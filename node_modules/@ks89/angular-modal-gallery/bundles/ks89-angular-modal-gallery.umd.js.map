{"version":3,"file":"ks89-angular-modal-gallery.umd.js","sources":["../../out/src/modal-gallery.module.ts","../../out/src/components/components.ts","../../out/src/components/plain-gallery/plain-gallery.component.ts","../../out/src/components/current-image/loading-spinner/loading-spinner.component.ts","../../out/src/components/previews/previews.component.ts","../../out/src/components/dots/dots.component.ts","../../out/src/components/upper-buttons/upper-buttons.component.ts","../../out/src/components/upper-buttons/upper-buttons-default.ts","../../out/src/model/buttons-config.interface.ts","../../out/src/components/modal-gallery/modal-gallery.component.ts","../../out/src/components/accessibility-default.ts","../../out/src/model/plain-gallery-config.interface.ts","../../out/src/components/current-image/current-image.component.ts","../../out/src/utils/image.util.ts","../../out/src/components/accessible.component.ts","../../out/src/utils/user-input.util.ts","../../out/src/services/gallery.service.ts","../../out/src/services/keyboard.service.ts","../../out/src/components/background/background.component.ts","../../out/src/directives/directives.ts","../../out/src/directives/description.directive.ts","../../out/src/directives/a-tag-bg-image.directive.ts","../../out/src/model/image.class.ts","../../out/src/directives/direction.directive.ts","../../out/src/directives/wrap.directive.ts","../../out/src/directives/keyboard-navigation.directive.ts","../../out/src/directives/size.directive.ts","../../out/src/directives/click-outside.directive.ts","../../../../../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DIRECTIVES } from './directives/directives';\nimport { COMPONENTS, ModalGalleryComponent } from './components/components';\nimport { KEYBOARD_CONFIGURATION, KeyboardService } from './services/keyboard.service';\nimport { KeyboardServiceConfig } from './model/keyboard-service-config.interface';\nimport { GalleryService } from './services/gallery.service';\n\n/**\n * Module with `forRoot` method to import it in the root module of your application.\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [COMPONENTS, DIRECTIVES],\n  exports: [ModalGalleryComponent]\n})\nexport class ModalGalleryModule {\n  static forRoot(config?: KeyboardServiceConfig): ModuleWithProviders {\n    return {\n      ngModule: ModalGalleryModule,\n      providers: [\n        {\n          provide: KEYBOARD_CONFIGURATION,\n          useValue: config ? config : {}\n        },\n        {\n          provide: KeyboardService,\n          useFactory: setupKeyboardService,\n          deps: [KEYBOARD_CONFIGURATION]\n        },\n        {\n          provide: GalleryService,\n          useFactory: setupGalleryService\n        }\n      ]\n    };\n  }\n}\n\n/**\n * Function to setup the keyboard service inside the `forRoot` method.\n * @param KeyboardServiceConfig injector is an interface of type `KeyboardServiceConfig` to pass data to KeyboardService\n * @returns KeyboardService an instance of the `KeyboardService`\n */\nexport function setupKeyboardService(injector: KeyboardServiceConfig): KeyboardService {\n  return new KeyboardService(injector);\n}\n\nexport function setupGalleryService(): GalleryService {\n  return new GalleryService();\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { BackgroundComponent } from './background/background.component';\nimport { ModalGalleryComponent } from './modal-gallery/modal-gallery.component';\nimport { UpperButtonsComponent } from './upper-buttons/upper-buttons.component';\nimport { DotsComponent } from './dots/dots.component';\nimport { PreviewsComponent } from './previews/previews.component';\nimport { CurrentImageComponent } from './current-image/current-image.component';\nimport { LoadingSpinnerComponent } from './current-image/loading-spinner/loading-spinner.component';\nimport { AccessibleComponent } from './accessible.component';\nimport { PlainGalleryComponent } from './plain-gallery/plain-gallery.component';\n\nexport { ModalGalleryComponent } from './modal-gallery/modal-gallery.component';\n\n/**\n * Array of all components.\n */\nexport const COMPONENTS = [\n  BackgroundComponent,\n  PlainGalleryComponent,\n  ModalGalleryComponent,\n  UpperButtonsComponent,\n  DotsComponent,\n  PreviewsComponent,\n  CurrentImageComponent,\n  LoadingSpinnerComponent,\n  AccessibleComponent\n];\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange, SimpleChanges } from '@angular/core';\n\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Image } from '../../model/image.class';\nimport { Size } from '../../model/size.interface';\nimport { AdvancedLayout, GridLayout, LineLayout, PlainGalleryConfig, PlainGalleryStrategy } from '../../model/plain-gallery-config.interface';\n\nimport { getIndex } from '../../utils/image.util';\n\n/**\n * Component with the gallery of thumbs.\n * In receives an array of Images, a boolean to show/hide\n * the gallery (feature used by imagePointer) and a config\n * object to customize the behaviour of this component.\n * Also, it emits click events as outputs.\n */\n@Component({\n  selector: 'ks-plain-gallery',\n  styles: [`.plain-container{-webkit-box-align:center;align-items:center;display:-webkit-box;display:flex}.plain-container .image{cursor:pointer;height:auto;margin-left:2px;margin-right:2px;width:50px}.plain-container .a-tag-image{cursor:pointer;margin-left:2px;margin-right:2px}`],\n  template: `<div *ngIf=\"showGallery\"\n     class=\"plain-container\"\n     ksWrap [wrap]=\"wrapStyle\" [width]=\"widthStyle\"\n     ksDirection [direction]=\"directionStyle\" [justify]=\"justifyStyle\"\n     [attr.aria-label]=\"accessibilityConfig?.plainGalleryContentAriaLabel\"\n     [title]=\"accessibilityConfig?.plainGalleryContentTitle\">\n\n  <ng-container *ngFor=\"let imgRow of imageGrid; let i = index\">\n    <ng-container *ngFor=\"let imgCol of imgRow; let j = index\">\n\n      <ng-container *ngIf=\"!configPlainGallery.advanced?.aTags; else aTags\">\n        <img *ngIf=\"imgCol?.modal?.img\"\n             [src]=\"imgCol.plain?.img ? imgCol.plain.img : imgCol.modal.img\"\n             class=\"image\"\n             ksSize [sizeConfig]=\"{width: size?.width, height: size?.height}\"\n             [attr.aria-label]=\"imgCol.plain?.ariaLabel\"\n             [title]=\"imgCol.plain?.title ? imgCol.plain.title : getTitleDisplay(imgCol)\"\n             alt=\"{{imgCol.plain?.alt ? imgCol.plain.alt : getAltPlainDescriptionByImage(imgCol)}}\"\n             [tabindex]=\"0\" role=\"img\"\n             (click)=\"showModalGalleryByImage(imgCol)\" (keyup)=\"showModalGalleryByImage(imgCol)\"/>\n      </ng-container>\n\n      <!-- Add directive to set background with the image url as param to pass thumb or img-->\n      <!-- to do something like this <a style=\"background: url('path to image') 50% 50%/cover\">.-->\n      <ng-template #aTags>\n        <a *ngIf=\"imgCol?.modal?.img\"\n           class=\"a-tag-image\"\n           ksATagBgImage [image]=\"imgCol\" [style]=\"configPlainGallery.advanced?.additionalBackground\"\n           ksSize [sizeConfig]=\"{width: size?.width, height: size?.height}\"\n           [attr.aria-label]=\"imgCol.plain?.ariaLabel\"\n           [title]=\"imgCol.plain?.title ? imgCol.plain.title : getTitleDisplay(imgCol)\"\n           [tabindex]=\"0\"\n           (click)=\"showModalGallery(j)\" (keyup)=\"showModalGallery(j)\"></a>\n      </ng-template>\n\n    </ng-container>\n  </ng-container>\n\n</div>\n\n`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PlainGalleryComponent implements OnInit, OnChanges {\n  /**\n   * Array of `Image` that represent the model of this library with all images, thumbs and so on.\n   */\n  @Input() images: Image[];\n  /**\n   * Boolean to show/hide plain gallery. If true the plain gallery will be visible, false otherwise.\n   */\n  @Input() showGallery: boolean;\n  /**\n   * Object of type `PlainGalleryConfig` to configure the plain gallery.\n   */\n  @Input() plainGalleryConfig: PlainGalleryConfig;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input() accessibilityConfig: AccessibilityConfig;\n\n  /**\n   * Output to emit an event when an image is changed.\n   */\n  @Output() show: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * Object of type `PlainGalleryConfig` to configure this component.\n   */\n  configPlainGallery: PlainGalleryConfig;\n\n  /**\n   * Bi-dimensional array of `Image` object to store images to display as plain gallery.\n   * [] by default.\n   */\n  imageGrid: Image[][] = [];\n  /**\n   * Size object used in the template to resize images.\n   */\n  size: Size;\n  /**\n   * Boolean passed as input to `ks-wrap` directive to configure flex-wrap css property.\n   * However it's not enough, because you need to limit the width using `widthStyle` public variable.\n   * For more info check https://developer.mozilla.org/it/docs/Web/CSS/flex-wrap\n   */\n  wrapStyle = false;\n  /**\n   * String passed as input to `ks-wrap` directive to set width to be able to force overflow.\n   * In this way, `wrapStyle` (flex-wrap css property) will be used as requested.\n   */\n  widthStyle = '';\n  /**\n   * String passed as input to `ks-direction` directive to set the flex-direction css property.\n   * For more info check https://developer.mozilla.org/it/docs/Web/CSS/flex-direction\n   */\n  directionStyle: string;\n  /**\n   * String passed as input to `ks-direction` directive to set the justify-content css property.\n   * For more info check https://developer.mozilla.org/it/docs/Web/CSS/justify-content\n   */\n  justifyStyle: string;\n\n  /**\n   * Default image size object\n   */\n  private defaultSize: Size = { width: '50px', height: 'auto' };\n  /**\n   * Default layout config object\n   * Note that length=-1 means infinity\n   */\n  private defaultLayout: LineLayout = new LineLayout(this.defaultSize, { length: -1, wrap: false }, 'flex-start');\n  /**\n   * Default plain gallery config object\n   */\n  private defaultPlainConfig: PlainGalleryConfig = {\n    strategy: PlainGalleryStrategy.ROW,\n    layout: this.defaultLayout,\n    advanced: { aTags: false, additionalBackground: '50% 50%/cover' }\n  };\n\n  /**\n   * Method ´ngOnInit´ to init both `configPlainGallery` calling `initPlainGalleryConfig()`\n   * and `imageGrid invoking `initImageGrid()`.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.configPlainGallery = this.initPlainGalleryConfig();\n    this.initImageGrid();\n  }\n\n  /**\n   * Method ´ngOnChanges´ to update both `imageGrid` and`configPlainGallery`.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const imagesChange: SimpleChange = changes.images;\n    const configChange: SimpleChange = changes.plainGalleryConfig;\n\n    // I'm using !change.firstChange because the first time will be called both onInit and onChange and I don't\n    // want to execute initialization two times.\n    if (\n      configChange &&\n      !configChange.firstChange &&\n      (configChange.previousValue !== configChange.currentValue || (!configChange.previousValue && !configChange.currentValue))\n    ) {\n      this.configPlainGallery = this.initPlainGalleryConfig();\n    }\n    if (imagesChange && !imagesChange.firstChange && imagesChange.previousValue !== imagesChange.currentValue) {\n      this.initImageGrid();\n    }\n  }\n\n  /**\n   * Method called when you click on an image of the plain (or inline) gallery.\n   * This will emit the show event with the index number as payload.\n   * @param number index of the clicked image\n   */\n  showModalGallery(index: number) {\n    this.show.emit(index);\n  }\n\n  /**\n   * Method called when you click on an image of the plain (or inline) gallery.\n   * This will emit the show event with the image as payload.\n   * @param Image img is the Image to show\n   */\n  showModalGalleryByImage(img: Image) {\n    const index: number = this.images.findIndex((val: Image) => val && img && val.id === img.id);\n    this.showModalGallery(index);\n  }\n\n  /**\n   * Method to get `alt attribute`.\n   * `alt` specifies an alternate text for an image, if the image cannot be displayed.\n   * @param Image image to get its alt description.\n   * @returns string alt description of the image\n   */\n  getAltPlainDescriptionByImage(image: Image): string {\n    if (!image) {\n      return '';\n    }\n    return image.plain && image.plain.description ? image.plain.description : `Image ${getIndex(image, this.images) + 1}`;\n  }\n\n  /**\n   * Method to get the title for an image.\n   * @param Image image to get its title\n   * @returns string the title of the input image\n   */\n  getTitleDisplay(image: Image): string {\n    let description = '';\n\n    if (image.plain && image.plain.description) {\n      description = image.plain.description;\n    } else if (image.modal && image.modal.description) {\n      description = image.modal.description;\n    }\n\n    const currentIndex: number = getIndex(image, this.images);\n    const prevDescription: string = 'Image ' + (currentIndex + 1) + '/' + this.images.length;\n    let currImgDescription: string = description ? description : '';\n\n    if (currImgDescription !== '') {\n      currImgDescription = ' - ' + currImgDescription;\n    }\n    return prevDescription + currImgDescription;\n  }\n\n  /**\n   * Method used in the template to track ids in ngFor.\n   * @param number index of the array\n   * @param Image item of the array\n   * @returns number the id of the item\n   */\n  trackById(index: number, item: Image): number {\n    return item.id;\n  }\n\n  /**\n   * Private method to build and return a `PlainGalleryConfig` object, proving also default values.\n   * @returns PlainGalleryConfig the plain gallery configuration\n   * @throws an Error if layout and strategy aren't compatible\n   */\n  private initPlainGalleryConfig(): PlainGalleryConfig {\n    const config: PlainGalleryConfig = Object.assign({}, this.defaultPlainConfig, this.plainGalleryConfig);\n\n    if (config.layout instanceof LineLayout) {\n      if (config.strategy !== PlainGalleryStrategy.ROW && config.strategy !== PlainGalleryStrategy.COLUMN) {\n        throw new Error('LineLayout requires either ROW or COLUMN strategy');\n      }\n      if (!config.layout || !config.layout.breakConfig) {\n        throw new Error('Both layout and breakConfig must be valid');\n      }\n    }\n\n    if (config.layout instanceof GridLayout) {\n      if (config.strategy !== PlainGalleryStrategy.GRID) {\n        throw new Error('GridLayout requires GRID strategy');\n      }\n      if (!config.layout || !config.layout.breakConfig) {\n        throw new Error('Both layout and breakConfig must be valid');\n      }\n      // force wrap for grid layout\n      config.layout.breakConfig.wrap = true;\n    }\n\n    if (config.layout instanceof AdvancedLayout) {\n      if (config.strategy !== PlainGalleryStrategy.CUSTOM) {\n        throw new Error('AdvancedLayout requires CUSTOM strategy');\n      }\n    }\n    return config;\n  }\n\n  /**\n   * Private method to init both `imageGrid` and other style variables,\n   * based on the layout type.\n   */\n  private initImageGrid() {\n    const config: PlainGalleryConfig = this.configPlainGallery;\n\n    // reset the array to prevent issues in case of GridLayout\n    this.imageGrid = [];\n\n    if (config.layout instanceof LineLayout) {\n      const layout: LineLayout = config.layout;\n      const row: Image[] = this.images.filter((val: Image, i: number) => i < layout.breakConfig.length || layout.breakConfig.length === -1);\n      this.imageGrid = [row];\n\n      this.size = config.layout.size;\n\n      switch (config.strategy) {\n        case PlainGalleryStrategy.ROW:\n          this.directionStyle = 'row';\n          break;\n        case PlainGalleryStrategy.COLUMN:\n          this.directionStyle = 'column';\n          this.wrapStyle = layout.breakConfig.wrap;\n          break;\n      }\n      this.justifyStyle = layout.justify;\n    }\n\n    if (config.layout instanceof GridLayout) {\n      const layout: GridLayout = config.layout;\n      const count: number = Math.ceil(this.images.length / layout.breakConfig.length);\n      let start = 0;\n      let end: number = layout.breakConfig.length - 1;\n\n      for (let j = 0; j < count; j++) {\n        const row: Image[] = this.images.filter((val: Image, i: number) => i >= start && i <= end);\n        this.imageGrid.push(row);\n        start = end + 1;\n        end = start + layout.breakConfig.length - 1;\n      }\n\n      this.size = config.layout.size;\n\n      const pixels: number = +layout.size.width.replace('px', '');\n\n      this.widthStyle = pixels * layout.breakConfig.length + pixels / 2 + 'px';\n      this.wrapStyle = layout.breakConfig.wrap;\n\n      this.directionStyle = 'row';\n    }\n\n    if (config.layout instanceof AdvancedLayout) {\n      this.imageGrid = [this.images];\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { AccessibilityConfig } from '../../../model/accessibility.interface';\nimport { LoadingConfig, LoadingType } from '../../../model/loading-config.interface';\n\n/**\n * Component with the loading spinner\n */\n@Component({\n  selector: 'ks-loading-spinner',\n  styles: [`.cssload-loader{position:absolute;top:0;bottom:0;right:0;left:0;margin:auto;width:64px;height:64px;border-radius:50%;-o-border-radius:50%;-ms-border-radius:50%;-webkit-border-radius:50%;-moz-border-radius:50%;-webkit-perspective:800px;perspective:800px}.cssload-inner{position:absolute;width:100%;height:100%;box-sizing:border-box;-o-box-sizing:border-box;-ms-box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;border-radius:50%;-o-border-radius:50%;-ms-border-radius:50%;-webkit-border-radius:50%;-moz-border-radius:50%}.cssload-inner.cssload-one{left:0;top:0;animation:.6s linear infinite cssload-rotate-one;-o-animation:.6s linear infinite cssload-rotate-one;-ms-animation:cssload-rotate-one .6s linear infinite;-webkit-animation:.6s linear infinite cssload-rotate-one;-moz-animation:.6s linear infinite cssload-rotate-one;border-bottom:3px solid rgba(255,255,255,.99)}.cssload-inner.cssload-two{right:0;top:0;animation:.6s linear infinite cssload-rotate-two;-o-animation:.6s linear infinite cssload-rotate-two;-ms-animation:cssload-rotate-two .6s linear infinite;-webkit-animation:.6s linear infinite cssload-rotate-two;-moz-animation:.6s linear infinite cssload-rotate-two;border-right:3px solid #fff}.cssload-inner.cssload-three{right:0;bottom:0;animation:.6s linear infinite cssload-rotate-three;-o-animation:.6s linear infinite cssload-rotate-three;-ms-animation:cssload-rotate-three .6s linear infinite;-webkit-animation:.6s linear infinite cssload-rotate-three;-moz-animation:.6s linear infinite cssload-rotate-three;border-top:3px solid #fff}@keyframes cssload-rotate-one{0%{-webkit-transform:rotateX(35deg) rotateY(-45deg) rotateZ(0);transform:rotateX(35deg) rotateY(-45deg) rotateZ(0)}100%{-webkit-transform:rotateX(35deg) rotateY(-45deg) rotateZ(360deg);transform:rotateX(35deg) rotateY(-45deg) rotateZ(360deg)}}@-webkit-keyframes cssload-rotate-one{0%{-webkit-transform:rotateX(35deg) rotateY(-45deg) rotateZ(0)}100%{-webkit-transform:rotateX(35deg) rotateY(-45deg) rotateZ(360deg)}}@keyframes cssload-rotate-two{0%{-webkit-transform:rotateX(50deg) rotateY(10deg) rotateZ(0);transform:rotateX(50deg) rotateY(10deg) rotateZ(0)}100%{-webkit-transform:rotateX(50deg) rotateY(10deg) rotateZ(360deg);transform:rotateX(50deg) rotateY(10deg) rotateZ(360deg)}}@-webkit-keyframes cssload-rotate-two{0%{-webkit-transform:rotateX(50deg) rotateY(10deg) rotateZ(0)}100%{-webkit-transform:rotateX(50deg) rotateY(10deg) rotateZ(360deg)}}@keyframes cssload-rotate-three{0%{-webkit-transform:rotateX(35deg) rotateY(55deg) rotateZ(0);transform:rotateX(35deg) rotateY(55deg) rotateZ(0)}100%{-webkit-transform:rotateX(35deg) rotateY(55deg) rotateZ(360deg);transform:rotateX(35deg) rotateY(55deg) rotateZ(360deg)}}@-webkit-keyframes cssload-rotate-three{0%{-webkit-transform:rotateX(35deg) rotateY(55deg) rotateZ(0)}100%{-webkit-transform:rotateX(35deg) rotateY(55deg) rotateZ(360deg)}}`, `.loader-dots{position:absolute;top:0;bottom:0;right:0;left:0;color:#fefcff;font-size:10px;margin:auto;width:1em;height:1em;border-radius:50%;text-indent:-9999em;-webkit-animation:1.3s linear infinite load4;animation:1.3s linear infinite load4;-webkit-transform:translateZ(0);transform:translateZ(0)}@-webkit-keyframes load4{0%,100%{-webkit-box-shadow:0 -3em 0 .2em,2em -2em 0 0,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 0;box-shadow:0 -3em 0 .2em,2em -2em 0 0,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 0}12.5%{-webkit-box-shadow:0 -3em 0 0,2em -2em 0 .2em,3em 0 0 0,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em;box-shadow:0 -3em 0 0,2em -2em 0 .2em,3em 0 0 0,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em}25%{-webkit-box-shadow:0 -3em 0 -.5em,2em -2em 0 0,3em 0 0 .2em,2em 2em 0 0,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em;box-shadow:0 -3em 0 -.5em,2em -2em 0 0,3em 0 0 .2em,2em 2em 0 0,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em}37.5%{-webkit-box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 0,2em 2em 0 .2em,0 3em 0 0,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em;box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 0,2em 2em 0 .2em,0 3em 0 0,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em}50%{-webkit-box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 0,0 3em 0 .2em,-2em 2em 0 0,-3em 0 0 -1em,-2em -2em 0 -1em;box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 0,0 3em 0 .2em,-2em 2em 0 0,-3em 0 0 -1em,-2em -2em 0 -1em}62.5%{-webkit-box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 0,-2em 2em 0 .2em,-3em 0 0 0,-2em -2em 0 -1em;box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 0,-2em 2em 0 .2em,-3em 0 0 0,-2em -2em 0 -1em}75%{-webkit-box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 0,-3em 0 0 .2em,-2em -2em 0 0;box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 0,-3em 0 0 .2em,-2em -2em 0 0}87.5%{-webkit-box-shadow:0 -3em 0 0,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 0,-3em 0 0 0,-2em -2em 0 .2em;box-shadow:0 -3em 0 0,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 0,-3em 0 0 0,-2em -2em 0 .2em}}@keyframes load4{0%,100%{-webkit-box-shadow:0 -3em 0 .2em,2em -2em 0 0,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 0;box-shadow:0 -3em 0 .2em,2em -2em 0 0,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 0}12.5%{-webkit-box-shadow:0 -3em 0 0,2em -2em 0 .2em,3em 0 0 0,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em;box-shadow:0 -3em 0 0,2em -2em 0 .2em,3em 0 0 0,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em}25%{-webkit-box-shadow:0 -3em 0 -.5em,2em -2em 0 0,3em 0 0 .2em,2em 2em 0 0,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em;box-shadow:0 -3em 0 -.5em,2em -2em 0 0,3em 0 0 .2em,2em 2em 0 0,0 3em 0 -1em,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em}37.5%{-webkit-box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 0,2em 2em 0 .2em,0 3em 0 0,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em;box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 0,2em 2em 0 .2em,0 3em 0 0,-2em 2em 0 -1em,-3em 0 0 -1em,-2em -2em 0 -1em}50%{-webkit-box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 0,0 3em 0 .2em,-2em 2em 0 0,-3em 0 0 -1em,-2em -2em 0 -1em;box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 0,0 3em 0 .2em,-2em 2em 0 0,-3em 0 0 -1em,-2em -2em 0 -1em}62.5%{-webkit-box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 0,-2em 2em 0 .2em,-3em 0 0 0,-2em -2em 0 -1em;box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 0,-2em 2em 0 .2em,-3em 0 0 0,-2em -2em 0 -1em}75%{-webkit-box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 0,-3em 0 0 .2em,-2em -2em 0 0;box-shadow:0 -3em 0 -1em,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 0,-3em 0 0 .2em,-2em -2em 0 0}87.5%{-webkit-box-shadow:0 -3em 0 0,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 0,-3em 0 0 0,-2em -2em 0 .2em;box-shadow:0 -3em 0 0,2em -2em 0 -1em,3em 0 0 -1em,2em 2em 0 -1em,0 3em 0 -1em,-2em 2em 0 0,-3em 0 0 0,-2em -2em 0 .2em}}`, `.loader-bars,.loader-bars:after,.loader-bars:before{background:#fefcff;-webkit-animation:1s ease-in-out infinite load1;animation:1s ease-in-out infinite load1;width:1em;height:4em}.loader-bars{position:absolute;top:0;bottom:0;right:0;left:0;color:#fefcff;text-indent:-9999em;margin:auto;font-size:11px;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation-delay:-.16s;animation-delay:-.16s}.loader-bars:after,.loader-bars:before{position:absolute;top:0;content:''}.loader-bars:before{left:-1.5em;-webkit-animation-delay:-.32s;animation-delay:-.32s}.loader-bars:after{left:1.5em}@-webkit-keyframes load1{0%,100%,80%{-webkit-box-shadow:0 0;box-shadow:0 0;height:4em}40%{-webkit-box-shadow:0 -2em;box-shadow:0 -2em;height:5em}}@keyframes load1{0%,100%,80%{-webkit-box-shadow:0 0;box-shadow:0 0;height:4em}40%{-webkit-box-shadow:0 -2em;box-shadow:0 -2em;height:5em}}`, `.loader-circular,.loader-circular:after{border-radius:50%;width:10em;height:10em}.loader-circular{position:absolute;top:0;bottom:0;right:0;left:0;margin:auto;font-size:10px;text-indent:-9999em;border-top:1.1em solid rgba(255,255,255,.2);border-right:1.1em solid rgba(255,255,255,.2);border-bottom:1.1em solid rgba(255,255,255,.2);border-left:1.1em solid #fff;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:1.1s linear infinite load8;animation:1.1s linear infinite load8}@-webkit-keyframes load8{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes load8{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}`, `.cube-folding{width:50px;height:50px;display:inline-block;-webkit-transform:rotate(45deg);transform:rotate(45deg);font-size:0}.cube-folding span{position:relative;width:25px;height:25px;-webkit-transform:scale(1.1);transform:scale(1.1);display:inline-block}.cube-folding span::before{content:'';background-color:#fff;position:absolute;left:0;top:0;display:block;width:25px;height:25px;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-animation:2.5s linear infinite both folding;animation:2.5s linear infinite both folding}.cube-folding .leaf2{-webkit-transform:rotateZ(90deg) scale(1.1);transform:rotateZ(90deg) scale(1.1)}.cube-folding .leaf2::before{-webkit-animation-delay:.3s;animation-delay:.3s;background-color:#f2f2f2}.cube-folding .leaf3{-webkit-transform:rotateZ(270deg) scale(1.1);transform:rotateZ(270deg) scale(1.1)}.cube-folding .leaf3::before{-webkit-animation-delay:.9s;animation-delay:.9s;background-color:#f2f2f2}.cube-folding .leaf4{-webkit-transform:rotateZ(180deg) scale(1.1);transform:rotateZ(180deg) scale(1.1)}.cube-folding .leaf4::before{-webkit-animation-delay:.6s;animation-delay:.6s;background-color:#e6e6e6}@-webkit-keyframes folding{0%,10%{-webkit-transform:perspective(140px) rotateX(-180deg);transform:perspective(140px) rotateX(-180deg);opacity:0}25%,75%{-webkit-transform:perspective(140px) rotateX(0);transform:perspective(140px) rotateX(0);opacity:1}100%,90%{-webkit-transform:perspective(140px) rotateY(180deg);transform:perspective(140px) rotateY(180deg);opacity:0}}@keyframes folding{0%,10%{-webkit-transform:perspective(140px) rotateX(-180deg);transform:perspective(140px) rotateX(-180deg);opacity:0}25%,75%{-webkit-transform:perspective(140px) rotateX(0);transform:perspective(140px) rotateX(0);opacity:1}100%,90%{-webkit-transform:perspective(140px) rotateY(180deg);transform:perspective(140px) rotateY(180deg);opacity:0}}.cube-wrapper{position:fixed;left:50%;top:50%;margin-top:-50px;margin-left:-50px;width:100px;height:100px;text-align:center}@-webkit-keyframes text{100%{top:35px}}@keyframes text{100%{top:35px}}@-webkit-keyframes shadow{100%{bottom:-18px;width:100px}}@keyframes shadow{100%{bottom:-18px;width:100px}}`, `#preloader{position:fixed;top:0;left:0;width:100%;height:100%}#loader{display:block;position:relative;left:50%;top:50%;width:100px;height:100px;margin:-75px 0 0 -75px;border-radius:50%;border:3px solid transparent;border-top-color:#b4b4b4;-webkit-animation:2s linear infinite spin;animation:2s linear infinite spin}#loader:before{content:\"\";position:absolute;top:5px;left:5px;right:5px;bottom:5px;border-radius:50%;border:3px solid transparent;border-top-color:#d9d9d9;-webkit-animation:3s linear infinite spin;animation:3s linear infinite spin}#loader:after{content:\"\";position:absolute;top:15px;left:15px;right:15px;bottom:15px;border-radius:50%;border:3px solid transparent;border-top-color:#fff;-webkit-animation:1.5s linear infinite spin;animation:1.5s linear infinite spin}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}`, `@-webkit-keyframes loader{0%,10%,100%{width:60px;height:60px}65%{width:150px;height:150px}}@keyframes loader{0%,10%,100%{width:60px;height:60px}65%{width:150px;height:150px}}@-webkit-keyframes loaderBlock{0%,30%{-webkit-transform:rotate(0);transform:rotate(0)}55%{background-color:#b4b4b4}100%{-webkit-transform:rotate(90deg);transform:rotate(90deg)}}@keyframes loaderBlock{0%,30%{-webkit-transform:rotate(0);transform:rotate(0)}55%{background-color:#b4b4b4}100%{-webkit-transform:rotate(90deg);transform:rotate(90deg)}}@-webkit-keyframes loaderBlockInverse{0%,20%{-webkit-transform:rotate(0);transform:rotate(0)}55%{background-color:#d9d9d9}100%{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}}@keyframes loaderBlockInverse{0%,20%{-webkit-transform:rotate(0);transform:rotate(0)}55%{background-color:#d9d9d9}100%{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}}.loader{position:absolute;top:50%;left:50%;width:60px;height:60px;-webkit-transform:translate(-50%,-50%) rotate(45deg) translate3d(0,0,0);transform:translate(-50%,-50%) rotate(45deg) translate3d(0,0,0);-webkit-animation:1.2s ease-in-out infinite loader;animation:1.2s ease-in-out infinite loader}.loader span{position:absolute;display:block;width:40px;height:40px;background-color:#fff;-webkit-animation:1.2s ease-in-out infinite both loaderBlock;animation:1.2s ease-in-out infinite both loaderBlock}.loader span:nth-child(1){top:0;left:0}.loader span:nth-child(2){top:0;right:0;-webkit-animation:1.2s ease-in-out infinite both loaderBlockInverse;animation:1.2s ease-in-out infinite both loaderBlockInverse}.loader span:nth-child(3){bottom:0;left:0;-webkit-animation:1.2s ease-in-out infinite both loaderBlockInverse;animation:1.2s ease-in-out infinite both loaderBlockInverse}.loader span:nth-child(4){bottom:0;right:0}`],\n  template: `<div [attr.aria-label]=\"accessibilityConfig?.loadingSpinnerAriaLabel\"\n     [title]=\"accessibilityConfig?.loadingSpinnerTitle\">\n\n  <ng-container [ngSwitch]=\"loadingConfig.type\">\n    <ng-container *ngSwitchCase=\"loadingStandard\">\n      <div class=\"cssload-loader\">\n        <div class=\"cssload-inner cssload-one\"></div>\n        <div class=\"cssload-inner cssload-two\"></div>\n        <div class=\"cssload-inner cssload-three\"></div>\n      </div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"loadingBars\">\n      <div class=\"loader-bars\">\n      </div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"loadingCircular\">\n      <div class=\"loader-circular\">\n      </div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"loadingDots\">\n      <div class=\"loader-dots\">\n      </div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"loadingCubeFlipping\">\n      <div class=\"cube-wrapper\">\n        <div class=\"cube-folding\">\n          <span class=\"leaf1\"></span>\n          <span class=\"leaf2\"></span>\n          <span class=\"leaf3\"></span>\n          <span class=\"leaf4\"></span>\n        </div>\n      </div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"loadingCircles\">\n      <div id=\"preloader\">\n        <div id=\"loader\"></div>\n      </div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"loadingExplosingSquares\">\n      <div class=\"loader\">\n        <span