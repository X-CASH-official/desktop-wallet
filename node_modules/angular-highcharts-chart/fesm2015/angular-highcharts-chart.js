import { Component, ElementRef, EventEmitter, Input, Output, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularHighchartsChartComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.updateValue = false;
        this.updateChange = new EventEmitter(true);
        this.updateOrCreateChart = function () {
            if (this.chart && this.chart.update) {
                this.chart.update(this.optionsValue, true, this.oneToOne || false);
            }
            else {
                this.chart = this.Highcharts[this.constructorType || 'chart'](this.el.nativeElement, this.optionsValue, this.callbackFunction || null);
                this.optionsValue.series = this.chart.userOptions.series;
            }
        };
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set options(val) {
        this.optionsValue = val;
        this.updateOrCreateChart();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set update(val) {
        if (val) {
            this.updateOrCreateChart();
            this.updateChange.emit(false); // clear the flag after update
        }
    }
}
AngularHighchartsChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-highcharts-angular',
                template: ''
            },] },
];
/** @nocollapse */
AngularHighchartsChartComponent.ctorParameters = () => [
    { type: ElementRef }
];
AngularHighchartsChartComponent.propDecorators = {
    Highcharts: [{ type: Input }],
    constructorType: [{ type: Input }],
    callbackFunction: [{ type: Input }],
    options: [{ type: Input }],
    updateChange: [{ type: Output }],
    update: [{ type: Input }],
    oneToOne: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularHighchartsChartModule {
}
AngularHighchartsChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [AngularHighchartsChartComponent],
                exports: [AngularHighchartsChartComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// export * from './lib/angular-highcharts-chart.component';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { AngularHighchartsChartModule, AngularHighchartsChartComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9hbmd1bGFyLWhpZ2hjaGFydHMtY2hhcnQvbGliL2FuZ3VsYXItaGlnaGNoYXJ0cy1jaGFydC5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItaGlnaGNoYXJ0cy1jaGFydC9saWIvYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0Lm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItaGlnaGNoYXJ0cy1hbmd1bGFyJyxcbiAgdGVtcGxhdGU6ICcnXG59KVxuXG5leHBvcnQgY2xhc3MgQW5ndWxhckhpZ2hjaGFydHNDaGFydENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIGNoYXJ0OiBhbnk7XG4gIEBJbnB1dCgpIEhpZ2hjaGFydHM6IGFueTtcbiAgQElucHV0KCkgY29uc3RydWN0b3JUeXBlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNhbGxiYWNrRnVuY3Rpb246IGFueTtcbiAgb3B0aW9uc1ZhbHVlOiBhbnk7XG4gIEBJbnB1dCgpXG4gIHNldCBvcHRpb25zKHZhbCkge1xuICAgIHRoaXMub3B0aW9uc1ZhbHVlID0gdmFsO1xuICAgIHRoaXMudXBkYXRlT3JDcmVhdGVDaGFydCgpO1xuICB9XG4gIHVwZGF0ZVZhbHVlID0gZmFsc2U7XG4gIEBPdXRwdXQoKSB1cGRhdGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKHRydWUpO1xuICBASW5wdXQoKSBzZXQgdXBkYXRlKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMudXBkYXRlT3JDcmVhdGVDaGFydCgpO1xuICAgICAgdGhpcy51cGRhdGVDaGFuZ2UuZW1pdChmYWxzZSk7IC8vIGNsZWFyIHRoZSBmbGFnIGFmdGVyIHVwZGF0ZVxuICAgIH1cbiAgfVxuICBASW5wdXQoKSBvbmVUb09uZTogYm9vbGVhbjtcblxuICB1cGRhdGVPckNyZWF0ZUNoYXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmNoYXJ0ICYmIHRoaXMuY2hhcnQudXBkYXRlKSB7XG4gICAgICB0aGlzLmNoYXJ0LnVwZGF0ZSh0aGlzLm9wdGlvbnNWYWx1ZSwgdHJ1ZSwgdGhpcy5vbmVUb09uZSB8fCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhcnQgPSB0aGlzLkhpZ2hjaGFydHNbdGhpcy5jb25zdHJ1Y3RvclR5cGUgfHwgJ2NoYXJ0J10oXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudCxcbiAgICAgICAgdGhpcy5vcHRpb25zVmFsdWUsXG4gICAgICAgIHRoaXMuY2FsbGJhY2tGdW5jdGlvbiB8fCBudWxsXG4gICAgICApO1xuICAgICAgdGhpcy5vcHRpb25zVmFsdWUuc2VyaWVzID0gdGhpcy5jaGFydC51c2VyT3B0aW9ucy5zZXJpZXM7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJIaWdoY2hhcnRzQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuL2FuZ3VsYXItaGlnaGNoYXJ0cy1jaGFydC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW0FuZ3VsYXJIaWdoY2hhcnRzQ2hhcnRDb21wb25lbnRdLFxuICBleHBvcnRzOiBbQW5ndWxhckhpZ2hjaGFydHNDaGFydENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckhpZ2hjaGFydHNDaGFydE1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztJQVFFLFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZOzJCQVlwQixLQUFLOzRCQUNNLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQzttQ0FTekI7WUFDcEIsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDO2FBQ3BFO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxDQUMzRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDckIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FDOUIsQ0FBQztnQkFDRixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7YUFDMUQ7U0FDRjtLQWpDc0M7Ozs7O0lBT3ZDLElBQ0ksT0FBTyxDQUFDLEdBQUc7UUFDYixJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQztRQUN4QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztLQUM1Qjs7Ozs7SUFHRCxJQUFhLE1BQU0sQ0FBQyxHQUFHO1FBQ3JCLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7S0FDRjs7O1lBekJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUUsRUFBRTthQUNiOzs7O1lBTG1CLFVBQVU7Ozt5QkFXM0IsS0FBSzs4QkFDTCxLQUFLOytCQUNMLEtBQUs7c0JBRUwsS0FBSzsyQkFNTCxNQUFNO3FCQUNOLEtBQUs7dUJBTUwsS0FBSzs7Ozs7OztBQzVCUjs7O1lBR0MsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxFQUNSO2dCQUNELFlBQVksRUFBRSxDQUFDLCtCQUErQixDQUFDO2dCQUMvQyxPQUFPLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQzthQUMzQzs7Ozs7Ozs7Ozs7Ozs7OzsifQ==