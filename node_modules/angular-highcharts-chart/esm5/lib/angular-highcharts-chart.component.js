/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
var AngularHighchartsChartComponent = /** @class */ (function () {
    function AngularHighchartsChartComponent(el) {
        this.el = el;
        this.updateValue = false;
        this.updateChange = new EventEmitter(true);
        this.updateOrCreateChart = function () {
            if (this.chart && this.chart.update) {
                this.chart.update(this.optionsValue, true, this.oneToOne || false);
            }
            else {
                this.chart = this.Highcharts[this.constructorType || 'chart'](this.el.nativeElement, this.optionsValue, this.callbackFunction || null);
                this.optionsValue.series = this.chart.userOptions.series;
            }
        };
    }
    Object.defineProperty(AngularHighchartsChartComponent.prototype, "options", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.optionsValue = val;
            this.updateOrCreateChart();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularHighchartsChartComponent.prototype, "update", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this.updateOrCreateChart();
                this.updateChange.emit(false); // clear the flag after update
            }
        },
        enumerable: true,
        configurable: true
    });
    AngularHighchartsChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-highcharts-angular',
                    template: ''
                },] },
    ];
    /** @nocollapse */
    AngularHighchartsChartComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    AngularHighchartsChartComponent.propDecorators = {
        Highcharts: [{ type: Input }],
        constructorType: [{ type: Input }],
        callbackFunction: [{ type: Input }],
        options: [{ type: Input }],
        updateChange: [{ type: Output }],
        update: [{ type: Input }],
        oneToOne: [{ type: Input }]
    };
    return AngularHighchartsChartComponent;
}());
export { AngularHighchartsChartComponent };
function AngularHighchartsChartComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.chart;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.Highcharts;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.constructorType;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.callbackFunction;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.optionsValue;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateValue;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateChange;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.oneToOne;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateOrCreateChart;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.el;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaGlnaGNoYXJ0cy1jaGFydC8iLCJzb3VyY2VzIjpbImxpYi9hbmd1bGFyLWhpZ2hjaGFydHMtY2hhcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFRakYseUNBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZOzJCQVlwQixLQUFLOzRCQUNNLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQzttQ0FTekI7WUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLENBQUM7YUFDcEU7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsQ0FDM0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQ3JCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQzlCLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO2FBQzFEO1NBQ0Y7S0FqQ3NDO0lBT3ZDLHNCQUNJLG9EQUFPOzs7OztRQURYLFVBQ1ksR0FBRztZQUNiLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzVCOzs7T0FBQTtJQUdELHNCQUFhLG1EQUFNOzs7OztRQUFuQixVQUFvQixHQUFHO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9CO1NBQ0Y7OztPQUFBOztnQkF6QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFFBQVEsRUFBRSxFQUFFO2lCQUNiOzs7O2dCQUxtQixVQUFVOzs7NkJBVzNCLEtBQUs7a0NBQ0wsS0FBSzttQ0FDTCxLQUFLOzBCQUVMLEtBQUs7K0JBTUwsTUFBTTt5QkFDTixLQUFLOzJCQU1MLEtBQUs7OzBDQTVCUjs7U0FPYSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItaGlnaGNoYXJ0cy1hbmd1bGFyJyxcbiAgdGVtcGxhdGU6ICcnXG59KVxuXG5leHBvcnQgY2xhc3MgQW5ndWxhckhpZ2hjaGFydHNDaGFydENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIGNoYXJ0OiBhbnk7XG4gIEBJbnB1dCgpIEhpZ2hjaGFydHM6IGFueTtcbiAgQElucHV0KCkgY29uc3RydWN0b3JUeXBlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNhbGxiYWNrRnVuY3Rpb246IGFueTtcbiAgb3B0aW9uc1ZhbHVlOiBhbnk7XG4gIEBJbnB1dCgpXG4gIHNldCBvcHRpb25zKHZhbCkge1xuICAgIHRoaXMub3B0aW9uc1ZhbHVlID0gdmFsO1xuICAgIHRoaXMudXBkYXRlT3JDcmVhdGVDaGFydCgpO1xuICB9XG4gIHVwZGF0ZVZhbHVlID0gZmFsc2U7XG4gIEBPdXRwdXQoKSB1cGRhdGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKHRydWUpO1xuICBASW5wdXQoKSBzZXQgdXBkYXRlKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMudXBkYXRlT3JDcmVhdGVDaGFydCgpO1xuICAgICAgdGhpcy51cGRhdGVDaGFuZ2UuZW1pdChmYWxzZSk7IC8vIGNsZWFyIHRoZSBmbGFnIGFmdGVyIHVwZGF0ZVxuICAgIH1cbiAgfVxuICBASW5wdXQoKSBvbmVUb09uZTogYm9vbGVhbjtcblxuICB1cGRhdGVPckNyZWF0ZUNoYXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmNoYXJ0ICYmIHRoaXMuY2hhcnQudXBkYXRlKSB7XG4gICAgICB0aGlzLmNoYXJ0LnVwZGF0ZSh0aGlzLm9wdGlvbnNWYWx1ZSwgdHJ1ZSwgdGhpcy5vbmVUb09uZSB8fCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhcnQgPSB0aGlzLkhpZ2hjaGFydHNbdGhpcy5jb25zdHJ1Y3RvclR5cGUgfHwgJ2NoYXJ0J10oXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudCxcbiAgICAgICAgdGhpcy5vcHRpb25zVmFsdWUsXG4gICAgICAgIHRoaXMuY2FsbGJhY2tGdW5jdGlvbiB8fCBudWxsXG4gICAgICApO1xuICAgICAgdGhpcy5vcHRpb25zVmFsdWUuc2VyaWVzID0gdGhpcy5jaGFydC51c2VyT3B0aW9ucy5zZXJpZXM7XG4gICAgfVxuICB9O1xufVxuIl19