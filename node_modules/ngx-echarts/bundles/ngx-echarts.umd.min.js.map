{"version":3,"sources":["ng://ngx-echarts/lib/change-filter.ts","ng://ngx-echarts/lib/ngx-echarts.directive.ts","ng://ngx-echarts/lib/ngx-echarts.module.ts"],"names":["ChangeFilter","_changes","this","of","changes","prototype","notEmpty","key","value","currentValue","undefined","EMPTY","has","notFirst","isFirstChange","notFirstAndEmpty","NgxEchartsDirective","el","ngZone","autoResize","loadingType","detectEventChanges","chartInit","EventEmitter","chartClick","createLazyEvent","chartDblClick","chartMouseDown","chartMouseMove","chartMouseUp","chartMouseOver","chartMouseOut","chartGlobalOut","chartContextMenu","chartLegendSelectChanged","chartLegendSelected","chartLegendUnselected","chartLegendScroll","chartDataZoom","chartDataRangeSelected","chartTimelineChanged","chartTimelinePlayChanged","chartRestore","chartDataViewChanged","chartMagicTypeChanged","chartPieSelectChanged","chartPieSelected","chartPieUnselected","chartMapSelectChanged","chartMapSelected","chartMapUnselected","chartAxisAreaSelected","chartFocusNodeAdjacency","chartUnfocusNodeAdjacency","chartBrush","chartBrushSelected","chartRendered","chartFinished","currentOffsetWidth","currentOffsetHeight","ngOnChanges","_this","filter","subscribe","opt","onOptionsChange","setOption","v","toggleLoading","refreshChart","ngOnInit","resizeSub","fromEvent","window","pipe","debounceTime","innerWidth","currentWindowWidth","nativeElement","offsetWidth","offsetHeight","resize","ngOnDestroy","unsubscribe","dispose","ngDoCheck","chart","ngAfterViewInit","setTimeout","initChart","loading","showLoading","loadingOpts","hideLoading","option","opts","createChart","dom","getComputedStyle","prop","getPropertyValue","style","height","runOutsideAngular","init","theme","initOpts","options","merge","emit","eventName","switchMap","Observable","observer","on","data","run","next","Directive","args","selector","ElementRef","NgZone","Input","Output","NgxEchartsModule","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { SimpleChanges } from '@angular/core';\nimport { Observable, of, EMPTY } from 'rxjs';\n\nexport class ChangeFilter {\n  constructor(private _changes: SimpleChanges) { }\n\n  static of(changes: SimpleChanges) {\n    return new ChangeFilter(changes);\n  }\n\n  notEmpty<T>(key: string): Observable<T> {\n    if (this._changes[key]) {\n      const value: T = this._changes[key].currentValue;\n\n      if (value !== undefined && value !== null) {\n        return of(value);\n      }\n    }\n    return EMPTY;\n  }\n\n  has<T>(key: string): Observable<T> {\n    if (this._changes[key]) {\n      const value: T = this._changes[key].currentValue;\n      return of(value);\n    }\n    return EMPTY;\n  }\n\n  notFirst<T>(key: string): Observable<T> {\n    if (this._changes[key] && !this._changes[key].isFirstChange()) {\n      const value: T = this._changes[key].currentValue;\n      return of(value);\n    }\n    return EMPTY;\n  }\n\n  notFirstAndEmpty<T>(key: string): Observable<T> {\n    if (this._changes[key] && !this._changes[key].isFirstChange()) {\n      const value: T = this._changes[key].currentValue;\n\n      if (value !== undefined && value !== null) {\n        return of(value);\n      }\n    }\n    return EMPTY;\n  }\n}\n","import { AfterViewInit, Directive, DoCheck, ElementRef, EventEmitter, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { EChartOption, ECharts, init } from 'echarts';\nimport { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { ChangeFilter } from './change-filter';\n\n@Directive({\n  selector: 'echarts, [echarts]',\n})\nexport class NgxEchartsDirective implements OnChanges, OnDestroy, OnInit, DoCheck, AfterViewInit {\n  @Input() options: EChartOption;\n  @Input() theme: string;\n  @Input() loading: boolean;\n  @Input() initOpts: {\n    devicePixelRatio?: number\n    renderer?: string\n    width?: number | string\n    height?: number | string\n  };\n  @Input() merge: EChartOption;\n  @Input() autoResize = true;\n  @Input() loadingType = 'default';\n  @Input() loadingOpts: object;\n  @Input() detectEventChanges = true; // deprecated, left for compatibility reasons to avoid triggering major version\n\n  // ngx-echarts events\n  @Output() chartInit = new EventEmitter<ECharts>();\n\n  // echarts mouse events\n  @Output() chartClick = this.createLazyEvent('click');\n  @Output() chartDblClick = this.createLazyEvent('dblclick');\n  @Output() chartMouseDown = this.createLazyEvent('mousedown');\n  @Output() chartMouseMove = this.createLazyEvent('mousemove');\n  @Output() chartMouseUp = this.createLazyEvent('mouseup');\n  @Output() chartMouseOver = this.createLazyEvent('mouseover');\n  @Output() chartMouseOut = this.createLazyEvent('mouseout');\n  @Output() chartGlobalOut = this.createLazyEvent('globalout');\n  @Output() chartContextMenu = this.createLazyEvent('contextmenu');\n\n  // echarts mouse events\n  @Output() chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n  @Output() chartLegendSelected = this.createLazyEvent('legendselected');\n  @Output() chartLegendUnselected = this.createLazyEvent('legendunselected');\n  @Output() chartLegendScroll = this.createLazyEvent('legendscroll');\n  @Output() chartDataZoom = this.createLazyEvent('datazoom');\n  @Output() chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n  @Output() chartTimelineChanged = this.createLazyEvent('timelinechanged');\n  @Output() chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n  @Output() chartRestore = this.createLazyEvent('restore');\n  @Output() chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n  @Output() chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n  @Output() chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n  @Output() chartPieSelected = this.createLazyEvent('pieselected');\n  @Output() chartPieUnselected = this.createLazyEvent('pieunselected');\n  @Output() chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n  @Output() chartMapSelected = this.createLazyEvent('mapselected');\n  @Output() chartMapUnselected = this.createLazyEvent('mapunselected');\n  @Output() chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n  @Output() chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n  @Output() chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n  @Output() chartBrush = this.createLazyEvent('brush');\n  @Output() chartBrushSelected = this.createLazyEvent('brushselected');\n  @Output() chartRendered = this.createLazyEvent('rendered');\n  @Output() chartFinished = this.createLazyEvent('finished');\n\n  private chart: ECharts;\n  private currentOffsetWidth = 0;\n  private currentOffsetHeight = 0;\n  private currentWindowWidth: number;\n  private resizeSub: Subscription;\n\n  constructor(private el: ElementRef, private ngZone: NgZone) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const filter = ChangeFilter.of(changes);\n    filter.notFirstAndEmpty<any>('options').subscribe(opt => this.onOptionsChange(opt));\n    filter.notFirstAndEmpty<any>('merge').subscribe(opt => this.setOption(opt));\n    filter.has<boolean>('loading').subscribe(v => this.toggleLoading(!!v));\n    filter.notFirst<string>('theme').subscribe(() => this.refreshChart());\n  }\n\n  ngOnInit() {\n    this.resizeSub = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe(() => {\n      if (this.autoResize && window.innerWidth !== this.currentWindowWidth) {\n        this.currentWindowWidth = window.innerWidth;\n        this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n        this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n        this.resize();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.resizeSub && this.resizeSub.unsubscribe();\n    this.dispose();\n  }\n\n  ngDoCheck() {\n    // No heavy work in DoCheck!\n    if (this.chart && this.autoResize) {\n      const offsetWidth = this.el.nativeElement.offsetWidth;\n      const offsetHeight = this.el.nativeElement.offsetHeight;\n\n      if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\n        this.currentOffsetWidth = offsetWidth;\n        this.currentOffsetHeight = offsetHeight;\n        this.resize();\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.initChart());\n  }\n\n  private dispose() {\n    if (this.chart) {\n      this.chart.dispose();\n      this.chart = null;\n    }\n  }\n\n  private resize() {\n    if (this.chart) {\n      this.chart.resize();\n    }\n  }\n\n  private toggleLoading(loading: boolean) {\n    if (this.chart) {\n      loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n    }\n  }\n\n  private setOption(option: any, opts?: any) {\n    if (this.chart) {\n      this.chart.setOption(option, opts);\n    }\n  }\n\n  private refreshChart() {\n    this.dispose();\n    this.initChart();\n  }\n\n  private createChart() {\n    this.currentWindowWidth = window.innerWidth;\n    this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n    this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n    const dom = this.el.nativeElement;\n\n    if (window && window.getComputedStyle) {\n      const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n      if ((!prop || prop === '0px') &&\n        (!dom.style.height || dom.style.height === '0px')) {\n        dom.style.height = '400px';\n      }\n    }\n\n    return this.ngZone.runOutsideAngular(() => init(dom, this.theme, this.initOpts));\n  }\n\n  private initChart() {\n    this.onOptionsChange(this.options);\n\n    if (this.merge && this.chart) {\n      this.setOption(this.merge);\n    }\n  }\n\n  private onOptionsChange(opt: EChartOption) {\n    if (opt) {\n      if (!this.chart) {\n        this.chart = this.createChart();\n        this.chartInit.emit(this.chart);\n      }\n\n      this.chart.setOption(this.options, true);\n    }\n  }\n\n  // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n  // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n  private createLazyEvent<T>(eventName: string): EventEmitter<T> {\n    return this.chartInit.pipe(\n      switchMap((chart: ECharts) => new Observable(observer => {\n        chart.on(eventName, (data: T) => this.ngZone.run(() => observer.next(data)));\n        return null; // no need to react on unsubscribe as long as the `dispose()` is called in ngOnDestroy\n      }))\n    ) as EventEmitter<T>;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxEchartsDirective } from './ngx-echarts.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [\n    NgxEchartsDirective\n  ],\n  exports: [\n    NgxEchartsDirective\n  ]\n})\nexport class NgxEchartsModule { }\n"]}