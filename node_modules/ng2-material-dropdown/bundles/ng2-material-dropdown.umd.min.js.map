{"version":3,"sources":["ng://ng2-material-dropdown/src/modules/components/button/ng2-dropdown-button.ts","ng://ng2-material-dropdown/src/modules/components/menu/actions.ts","ng://ng2-material-dropdown/src/modules/services/ng2-dropdown-state.ts","ng://ng2-material-dropdown/src/modules/services/dropdown-state.service.ts","ng://ng2-material-dropdown/src/modules/components/menu-item/ng2-menu-item.ts","ng://ng2-material-dropdown/src/modules/components/menu/ng2-dropdown-menu.ts","ng://ng2-material-dropdown/src/modules/components/dropdown/ng2-dropdown.ts","ng://ng2-material-dropdown/src/modules/ng2-dropdown.module.ts"],"names":["Ng2DropdownButton","element","this","EventEmitter","prototype","toggleMenu","onMenuToggled","emit","getPosition","nativeElement","getBoundingClientRect","Component","args","selector","styles","template","ElementRef","Output","Input","KEYS","ACTIONS","_a","index","items","state","length","select","selectedItem","click","undefined","hide","arrowKeysHandler","event","indexOf","keyCode","preventDefault","Ng2DropdownState","_selectedItem","item","dispatchEvent","focus","onItemSelected","unselect","DropdownStateService","isVisible","toString","Injectable","Ng2MenuItem","renderer","ngOnDestroy","dropdownState","onItemDestroyed","$event","stopPropagation","onItemClicked","invokeElementMethod","children","Renderer","Ng2DropdownMenu","arrowHandler","handleKeypress","show","position","dynamic","dc","document","wd","window","menuState","listeners","listen","body","bind","updatePosition","updateOnChange","key","toArray","hasOwnProperty","call","getMenuElement","calcPositionOffset","supportPageOffset","pageXOffset","isCSS1Compat","compatMode","x","documentElement","scrollLeft","y","pageYOffset","scrollTop","applyOffset","top","appendToBody","left","clientWidth","clientHeight","marginFromBottom","parseInt","marginFromRight","windowScrollHeight","innerHeight","scrollY","windowScrollWidth","innerWidth","scrollX","replace","marginRight","offset","split","ngOnInit","appendChild","setElementStyle","focusFirstElement","first","elem","parentNode","removeChild","animations","trigger","style","display","opacity","height","width","overflow","transition","animate","keyframes","ContentChildren","Ng2Dropdown","subscribe","_this","preventClose","button","newSelectedItem","menu","onHide","dynamicUpdate","onShow","scrollListener","providers","ContentChild","HostListener","Ng2DropdownModule","NgModule","exports","declarations","imports","CommonModule"],"mappings":"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","sourcesContent":["import {\n    Component,\n    Output,\n    Input,\n    EventEmitter,\n    ElementRef\n} from '@angular/core';\n\n@Component({\n    selector: 'ng2-dropdown-button',\n    styles: [`.ng2-dropdown-button{font-family:Roboto,\"Helvetica Neue\",Helvetica,Arial;background:#fff;padding:.45rem .25rem;font-size:14px;letter-spacing:.08rem;color:#444;outline:0;cursor:pointer;font-weight:400;border:none;border-bottom:1px solid #efefef;text-align:left;min-width:100px;width:100%;display:flex;flex-direction:row;max-width:150px}.ng2-dropdown-button:hover{color:#222}.ng2-dropdown-button:active,.ng2-dropdown-button:focus{color:#222;border-bottom:2px solid #2196f3}.ng2-dropdown-button__label{flex:1 1 95%}.ng2-dropdown-button__caret{width:12px;height:12px;display:flex;flex:1 1 6%}:host-context(.ng2-dropdown-button--icon) .ng2-dropdown-button{border:none;min-width:40px;width:40px;border-radius:100%;transition:all .2s;text-align:center;height:40px;padding:.5em}:host-context(.ng2-dropdown-button--icon) .ng2-dropdown-button:active{background:rgba(0,0,0,.2)}`],\n    template: `<button class='ng2-dropdown-button' type=\"button\" (click)=\"toggleMenu()\" tabindex=\"0s\">\n    <span class=\"ng2-dropdown-button__label\">\n        <ng-content></ng-content>\n    </span>\n\n    <span class=\"ng2-dropdown-button__caret\" *ngIf=\"showCaret\">\n        <svg enable-background=\"new 0 0 32 32\" height=\"16px\" id=\"Ð¡Ð»Ð¾Ð¹_1\" version=\"1.1\" viewBox=\"0 0 32 32\" width=\"16px\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><path d=\"M24.285,11.284L16,19.571l-8.285-8.288c-0.395-0.395-1.034-0.395-1.429,0  c-0.394,0.395-0.394,1.035,0,1.43l8.999,9.002l0,0l0,0c0.394,0.395,1.034,0.395,1.428,0l8.999-9.002  c0.394-0.395,0.394-1.036,0-1.431C25.319,10.889,24.679,10.889,24.285,11.284z\" fill=\"#121313\" id=\"Expand_More\"/><g/><g/><g/><g/><g/><g/></svg>\n    </span>\n</button>\n`\n})\nexport class Ng2DropdownButton {\n    @Output() public onMenuToggled: EventEmitter<boolean> = new EventEmitter<boolean>();\n    @Input() public showCaret: boolean = true;\n\n    constructor(private element: ElementRef) {}\n\n    /**\n     * @name toggleMenu\n     * @desc emits event to toggle menu\n     */\n    public toggleMenu(): void {\n        this.onMenuToggled.emit(true);\n    }\n\n    /**\n     * @name getPosition\n     * @desc returns position of the button\n     */\n    public getPosition(): ClientRect {\n      return this.element.nativeElement.getBoundingClientRect();\n    }\n}\n","import { Ng2MenuItem } from '../menu-item/ng2-menu-item';\nimport { Ng2DropdownMenu } from './ng2-dropdown-menu';\nimport { Ng2DropdownState } from '../../services/ng2-dropdown-state';\n\nconst KEYS = {\n    BACKSPACE: 9,\n    PREV: 38,\n    NEXT: 40,\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n/**\n * @name onSwitchNext\n * @param index\n * @param items\n * @param state\n */\nconst onSwitchNext = (index: number, items: Ng2MenuItem[], state: Ng2DropdownState) => {\n    if (index < items.length - 1) {\n        state.select(items[index + 1], true);\n    }\n};\n\n/**\n * @name onSwitchPrev\n * @param index\n * @param items\n * @param state\n */\nconst onSwitchPrev = (index: number, items: Ng2MenuItem[], state: Ng2DropdownState) => {\n    if (index > 0) {\n        state.select(items[index - 1], true);\n    }\n};\n\n/**\n * @name onBackspace\n * @param index\n * @param items\n * @param state\n */\nconst onBackspace = (index: number, items: Ng2MenuItem[], state: Ng2DropdownState) => {\n    if (index < items.length - 1) {\n        state.select(items[index + 1], true);\n    } else {\n        state.select(items[0], true);\n    }\n};\n\nfunction onEscape(this: Ng2DropdownMenu) {\n    this.hide();\n};\n\n/**\n * @name onItemClicked\n * @param index\n * @param items\n * @param state\n */\nconst onItemClicked = (index: number, items: Ng2MenuItem[], state: Ng2DropdownState) => {\n    return state.selectedItem ? state.selectedItem.click() : undefined;\n};\n\nexport const ACTIONS = {\n    [KEYS.BACKSPACE]: onBackspace,\n    [KEYS.PREV]: onSwitchPrev,\n    [KEYS.NEXT]: onSwitchNext,\n    [KEYS.ENTER]: onItemClicked,\n    [KEYS.ESCAPE]: onEscape\n};\n\nexport function arrowKeysHandler(event): void {\n    if ([38, 40].indexOf(event.keyCode) > -1) {\n        event.preventDefault();\n    }\n}\n","import { EventEmitter } from '@angular/core';\nimport { Ng2MenuItem } from '../components/menu-item/ng2-menu-item';\nexport class Ng2DropdownState {\n    public onItemSelected: EventEmitter<Ng2MenuItem> = new EventEmitter<Ng2MenuItem>();\n    public onItemClicked: EventEmitter<Ng2MenuItem> = new EventEmitter<Ng2MenuItem>();\n    public onItemDestroyed: EventEmitter<Ng2MenuItem> = new EventEmitter<Ng2MenuItem>();\n\n    private _selectedItem: Ng2MenuItem;\n\n    /**\n     * @name selectedItem\n     * @desc getter for _selectedItem\n     */\n    public get selectedItem(): Ng2MenuItem {\n        return this._selectedItem;\n    }\n\n    /**\n     * @name selects a menu item and emits event\n     * @param item\n     */\n    public select(item: Ng2MenuItem | undefined, dispatchEvent = true): void {\n        this._selectedItem = item;\n\n        if (!dispatchEvent || !item) {\n            return;\n        }\n\n        item.focus();\n\n        this.onItemSelected.emit(item);\n    }\n\n    /**\n     * @name unselect\n     * @desc sets _selectedItem as undefined\n     */\n    public unselect(): void {\n        this._selectedItem = undefined;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Ng2DropdownState } from './ng2-dropdown-state';\n\n@Injectable()\nexport class DropdownStateService {\n    public menuState = {\n        isVisible: <boolean>false,\n        toString(): string {\n            return this.isVisible === true ? 'visible' : 'hidden';\n        }\n    };\n\n    public dropdownState: Ng2DropdownState = new Ng2DropdownState();\n}\n","import {\n    Component,\n    Input,\n    Renderer,\n    ElementRef,\n    OnDestroy\n} from '@angular/core';\n\nimport { DropdownStateService } from '../../services/dropdown-state.service';\n\n@Component({\n    selector: 'ng2-menu-item',\n    styles: [`.ng2-menu-item{font-family:Roboto,\"Helvetica Neue\",Helvetica,Arial;background:#fff;color:rgba(0,0,0,.87);cursor:pointer;font-size:.9em;text-transform:none;font-weight:400;letter-spacing:.03em;height:48px;line-height:48px;padding:.3em 1.25rem;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;transition:background .25s}.ng2-menu-item--selected{background:rgba(158,158,158,.2);outline:0}.ng2-menu-item:focus{outline:0}.ng2-menu-item:active{background:rgba(158,158,158,.4)}:host(ng2-menu-item) /deep/ [ng2-menu-item-icon]{vertical-align:middle;font-size:28px;width:1.5em;height:30px;color:rgba(0,0,0,.44)}`],\n    template: `<div class='ng2-menu-item'\n     role=\"button\"\n     tabindex=\"0\"\n     [class.ng2-menu-item--selected]=\"isSelected\"\n     (keydown.enter)=\"click()\"\n     (click)=\"click()\"\n     (mouseover)=\"select()\">\n        <ng-content></ng-content>\n</div>\n`\n})\nexport class Ng2MenuItem implements OnDestroy {\n    /**\n     * @preventClose\n     * @desc if true, clicking on the item won't close the dropdown\n     */\n    @Input() public preventClose: boolean = false;\n\n    /**\n     * @name value\n     * @desc any value associated to the item\n     */\n    @Input() public value: any;\n\n    constructor(private state: DropdownStateService,\n                private element: ElementRef,\n                private renderer: Renderer) {}\n\n    public ngOnDestroy(): void {\n        this.state.dropdownState.onItemDestroyed.emit(this);\n    }\n\n    /**\n     * @name isSelected\n     * @desc returns current selected item\n     */\n    public get isSelected(): boolean {\n        return this === this.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name click\n     * @desc emits select event\n     */\n    public select($event?): void {\n        this.state.dropdownState.select(this, true);\n\n        if ($event) {\n            $event.stopPropagation();\n            $event.preventDefault();\n        }\n    }\n\n    /**\n     * @name click\n     * @desc emits click event\n     */\n    public click(): void {\n        this.state.dropdownState.onItemClicked.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus() {\n        this.renderer.invokeElementMethod(this.element.nativeElement.children[0], 'focus');\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    Renderer,\n    ContentChildren,\n    QueryList,\n    Input\n} from '@angular/core';\n\nimport {\n    trigger,\n    style,\n    transition,\n    animate,\n    keyframes,\n    state\n} from '@angular/animations';\n\nimport { ACTIONS, arrowKeysHandler } from './actions';\n\nimport { Ng2MenuItem } from '../menu-item/ng2-menu-item';\nimport { DropdownStateService } from '../../services/dropdown-state.service';\n\n@Component({\n    selector: 'ng2-dropdown-menu',\n    styles: [`:host{display:block}.ng2-dropdown-menu{overflow-y:auto;box-shadow:0 1px 2px 0 rgba(0,0,0,.3);position:absolute;padding:.5em 0;background:#fff;border-radius:1px;max-height:400px;width:260px;min-height:0;display:block}.ng2-dropdown-menu.ng2-dropdown-menu--inside-element{position:fixed}.ng2-dropdown-menu.ng2-dropdown-menu--width--2{width:200px}.ng2-dropdown-menu.ng2-dropdown-menu--width--4{width:260px}.ng2-dropdown-menu.ng2-dropdown-menu--width--6{width:320px}.ng2-dropdown-backdrop{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1;overflow:hidden}:host /deep/ .ng2-menu-divider{height:1px;min-height:1px;max-height:1px;width:100%;display:block;background:#f9f9f9}`],\n    template: `<!-- MENU -->\n<div class='ng2-dropdown-menu ng2-dropdown-menu---width--{{ width }}'\n     [class.ng2-dropdown-menu--inside-element]=\"!appendToBody\"\n     [class.ng2-dropdown-menu--open]=\"state.menuState.isVisible\"\n     [style.z-index]=\"zIndex\"\n     [@fade]=\"state.menuState.toString()\">\n        <div class=\"ng2-dropdown-menu__options-container\"\n             [@opacity]=\"state.menuState.toString()\">\n            <ng-content></ng-content>\n        </div>\n</div>\n\n<!-- BACKDROP -->\n<div class=\"ng2-dropdown-backdrop\" *ngIf=\"state.menuState.isVisible\" (click)=\"hide()\"></div>\n`,\n    animations: [\n        trigger('fade', [\n            state('visible', style(\n                {display: 'block', opacity: 1, height: '*', width: '*'}\n            )),\n            state('hidden', style(\n                {display: 'none', opacity: 0, overflow: 'hidden', height: 0, width: 0}\n            )),\n            transition('hidden => visible', [\n                animate('250ms ease-in',\n                    style({opacity: 1, height: '*', width: '*'})\n                )\n            ]),\n            transition('visible => hidden', [\n                animate('350ms ease-out',\n                    style({opacity: 0, width: 0, height: 0})\n                )\n            ])\n        ]),\n        trigger('opacity', [\n            transition('hidden => visible', [\n                animate('450ms ease-in', keyframes([\n                    style({opacity: 0, offset: 0}),\n                    style({opacity: 1, offset: 1}),\n                ]))\n            ]),\n            transition('visible => hidden', [\n                animate('250ms ease-out', keyframes([\n                    style({opacity: 1, offset: 0}),\n                    style({opacity: 0.5, offset: 0.3}),\n                    style({opacity: 0, offset: 1}),\n                ]))\n            ])\n        ])\n    ]\n})\nexport class Ng2DropdownMenu {\n    /**\n     * @name width\n     */\n    @Input() public width: number = 4;\n\n    /**\n     * @description if set to true, the first element of the dropdown will be automatically focused\n     * @name focusFirstElement\n     */\n    @Input() public focusFirstElement: boolean = true;\n\n    /**\n     * @description sets dropdown offset from the button\n     * @name offset {string} follow format '<number> <number>' ex. '0 20'\n     */\n    @Input() public offset: string;\n\n    /**\n     * @name appendToBody\n     */\n    @Input() public appendToBody: boolean = true;\n\n    /**\n     * @name zIndex\n     */\n    @Input() public zIndex = 1000;\n\n    /**\n     * @name items\n     */\n    @ContentChildren(Ng2MenuItem) public items: QueryList<Ng2MenuItem>;\n\n    private position: ClientRect;\n\n    private listeners = {\n        arrowHandler: undefined,\n        handleKeypress: undefined\n    };\n\n    constructor(public state: DropdownStateService,\n                private element: ElementRef,\n                private renderer: Renderer) {}\n\n    /**\n     * @name show\n     * @shows menu and selects first item\n     */\n    public show(position?: ClientRect, dynamic = true): void {\n        const dc = typeof document !== 'undefined' ? document : undefined;\n        const wd = typeof window !== 'undefined' ? window : undefined;\n\n        if (!this.state.menuState.isVisible) {\n            // setting handlers\n            this.listeners.handleKeypress = this.renderer.listen(dc.body, 'keydown', this.handleKeypress.bind(this));\n            this.listeners.arrowHandler = this.renderer.listen(wd, 'keydown', arrowKeysHandler);\n        }\n\n        // update state\n        this.state.menuState.isVisible = true;\n\n        if (position) {\n            this.updatePosition(position, dynamic);\n        }\n    }\n\n    /**\n     * @name hide\n     * @desc hides menu\n     */\n    public hide(): void {\n        this.state.menuState.isVisible = false;\n\n        // reset selected item state\n        this.state.dropdownState.unselect();\n\n        // call function to unlisten\n        this.listeners.arrowHandler ? this.listeners.arrowHandler() : undefined;\n        this.listeners.handleKeypress ? this.listeners.handleKeypress() : undefined;\n    }\n\n    /**\n     * @name updatePosition\n     * @desc updates the menu position every time it is toggled\n     * @param position {ClientRect}\n     * @param dynamic {boolean}\n     */\n    public updatePosition(position: ClientRect, dynamic: boolean): void {\n        this.position = position;\n        this.updateOnChange(dynamic);\n    }\n\n    /**\n     * @name handleKeypress\n     * @desc executes functions on keyPress based on the key pressed\n     * @param $event\n     */\n    public handleKeypress($event): void {\n        const key = $event.keyCode;\n        const items = this.items.toArray();\n        const index = items.indexOf(this.state.dropdownState.selectedItem);\n\n        if (!ACTIONS.hasOwnProperty(key)) {\n            return;\n        }\n\n        ACTIONS[key].call(this, index, items, this.state.dropdownState);\n    }\n\n    /**\n     * @name getMenuElement\n     */\n    private getMenuElement(): Element {\n        return this.element.nativeElement.children[0];\n    }\n\n    /**\n     * @name calcPositionOffset\n     * @param position\n     */\n    private calcPositionOffset(position): { top: string, left: string } {\n        const wd = typeof window !== 'undefined' ? window : undefined;\n        const dc = typeof document !== 'undefined' ? document : undefined;\n\n        if (!wd || !dc || !position) {\n            return;\n        }\n\n        const element = this.getMenuElement();\n        const supportPageOffset = wd.pageXOffset !== undefined;\n        const isCSS1Compat = ((dc.compatMode || '') === 'CSS1Compat');\n\n        const x = supportPageOffset ? wd.pageXOffset : isCSS1Compat ?\n            dc.documentElement.scrollLeft : dc.body.scrollLeft;\n\n        const y = supportPageOffset ? wd.pageYOffset : isCSS1Compat ?\n            dc.documentElement.scrollTop : dc.body.scrollTop;\n\n        let { top, left } = this.applyOffset(\n            `${position.top + (this.appendToBody ? y - 15 : 0)}px`,\n            `${position.left + x - 5}px`\n        );\n\n        const clientWidth = element.clientWidth;\n        const clientHeight = element.clientHeight;\n\n        const marginFromBottom = parseInt(top) + clientHeight + (this.appendToBody ? 0 : y - 15);\n        const marginFromRight = parseInt(left) + clientWidth;\n\n        const windowScrollHeight = wd.innerHeight + wd.scrollY;\n        const windowScrollWidth = wd.innerWidth + wd.scrollX;\n\n        if (marginFromBottom >= windowScrollHeight) {\n            top = `${parseInt(top.replace('px', '')) - clientHeight}px`;\n        }\n\n        if (marginFromRight >= windowScrollWidth) {\n            const marginRight = marginFromRight - windowScrollWidth + 30;\n            left = `${parseInt(left.replace('px', '')) - marginRight}px`;\n        }\n\n        return { top, left };\n    }\n\n    private applyOffset(top: string, left: string): { top: string, left: string } {\n        if (!this.offset) {\n            return { top, left };\n        }\n\n        const offset = this.offset.split(' ');\n\n        if (!offset[1]) {\n            offset[1] = '0';\n        }\n\n        top = `${parseInt(top.replace('px', '')) + parseInt(offset[0])}px`;\n        left = `${parseInt(left.replace('px', '')) + parseInt(offset[1])}px`;\n\n        return { top, left };\n    }\n\n    public ngOnInit() {\n        const dc = typeof document !== 'undefined' ? document : undefined;\n        if (this.appendToBody) {\n            // append menu element to the body\n            dc.body.appendChild(this.element.nativeElement);\n        }\n    }\n\n    public updateOnChange(dynamic = true) {\n        const element = this.getMenuElement();\n        const position = this.calcPositionOffset(this.position);\n\n        if (position) {\n            this.renderer.setElementStyle(element, 'top', position.top.toString());\n            this.renderer.setElementStyle(element, 'left', position.left.toString());\n        }\n\n        // select first item unless user disabled this option\n        if (this.focusFirstElement &&\n            this.items.first &&\n            !this.state.dropdownState.selectedItem) {\n            this.state.dropdownState.select(this.items.first, false);\n        }\n    }\n\n    public ngOnDestroy() {\n        const elem = this.element.nativeElement;\n        elem.parentNode.removeChild(elem);\n\n        if (this.listeners.handleKeypress) {\n            this.listeners.handleKeypress();\n        }\n    }\n}\n","import {\n    HostListener,\n    Component,\n    ContentChild,\n    Output,\n    EventEmitter,\n    Input\n} from '@angular/core';\n\nimport { Ng2DropdownButton } from '../button/ng2-dropdown-button';\nimport { Ng2DropdownMenu } from '../menu/ng2-dropdown-menu';\nimport { DropdownStateService } from '../../services/dropdown-state.service';\nimport { Ng2MenuItem } from '../menu-item/ng2-menu-item';\n\n@Component({\n    selector: 'ng2-dropdown',\n    template: `<div class=\"ng2-dropdown-container\">\n    <ng-content select=\"ng2-dropdown-button\"></ng-content>\n    <ng-content select=\"ng2-dropdown-menu\"></ng-content>\n</div>\n`,\n    providers: [ DropdownStateService ]\n})\nexport class Ng2Dropdown {\n    // get children components\n    @ContentChild(Ng2DropdownButton) public button: Ng2DropdownButton;\n    @ContentChild(Ng2DropdownMenu) public menu: Ng2DropdownMenu;\n\n    @Input() public dynamicUpdate = true;\n\n    // outputs\n    @Output() public onItemClicked: EventEmitter<string> = new EventEmitter<string>();\n    @Output() public onItemSelected: EventEmitter<string> = new EventEmitter<string>();\n    @Output() public onShow: EventEmitter<Ng2Dropdown> = new EventEmitter<Ng2Dropdown>();\n    @Output() public onHide: EventEmitter<Ng2Dropdown> = new EventEmitter<Ng2Dropdown>();\n\n    constructor(private state: DropdownStateService) {}\n\n    public ngOnInit() {\n        this.state.dropdownState.onItemClicked.subscribe(item => {\n            this.onItemClicked.emit(item);\n\n            if (item.preventClose) {\n                return;\n            }\n\n            this.hide.call(this);\n        });\n\n        if (this.button) {\n            this.button.onMenuToggled.subscribe(() => {\n                this.toggleMenu();\n            });\n        }\n\n        this.state.dropdownState.onItemSelected.subscribe(item => {\n            this.onItemSelected.emit(item);\n        });\n\n        this.state.dropdownState.onItemDestroyed.subscribe((item: Ng2MenuItem) => {\n            let newSelectedItem: Ng2MenuItem | undefined;\n            const items = this.menu.items.toArray();\n\n            if (item !== this.state.dropdownState.selectedItem) {\n                return;\n            }\n\n            if (this.menu.focusFirstElement) {\n                newSelectedItem = item === items[0] && items.length > 1 ? items[1] : items[0];\n            }\n\n            this.state.dropdownState.select(newSelectedItem);\n        });\n    }\n\n    /**\n     * @name toggleMenu\n     * @desc toggles menu visibility\n     */\n    public toggleMenu(position = this.button.getPosition()): void {\n        this.state.menuState.isVisible ? this.hide() : this.show(position);\n    }\n\n    /**\n     * - hides dropdown\n     * @name hide\n     */\n    public hide(): void {\n        this.menu.hide();\n        this.onHide.emit(this);\n    }\n\n    /**\n     * - shows dropdown\n     * @name show\n     * @param position\n     */\n    public show(position = this.button.getPosition()): void {\n        this.menu.show(position, this.dynamicUpdate);\n        this.onShow.emit(this);\n    }\n\n    /**\n     * @name scrollListener\n     */\n    @HostListener('window:scroll')\n    public scrollListener() {\n        if (this.button && this.dynamicUpdate) {\n            this.menu.updatePosition(this.button.getPosition(), true);\n        }\n    }\n}\n","import { Ng2Dropdown } from './components/dropdown/ng2-dropdown';\nimport { Ng2DropdownMenu } from './components/menu/ng2-dropdown-menu';\nimport { Ng2DropdownButton } from './components/button/ng2-dropdown-button';\nimport { Ng2MenuItem } from './components/menu-item/ng2-menu-item';\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DropdownStateService } from './services/dropdown-state.service';\n\n@NgModule({\n    exports: [\n        Ng2MenuItem,\n        Ng2DropdownButton,\n        Ng2DropdownMenu,\n        Ng2Dropdown\n    ],\n    declarations: [\n        Ng2Dropdown,\n        Ng2MenuItem,\n        Ng2DropdownButton,\n        Ng2DropdownMenu,\n    ],\n    imports: [\n        CommonModule\n    ]\n})\nexport class Ng2DropdownModule {}\n\nexport {\n    Ng2Dropdown,\n    Ng2DropdownMenu,\n    Ng2MenuItem,\n    Ng2DropdownButton,\n    DropdownStateService\n}\n"]}