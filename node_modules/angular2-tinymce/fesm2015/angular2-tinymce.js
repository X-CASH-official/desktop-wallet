import { Injectable, NgModule, Component, forwardRef, NgZone, Inject, Input, EventEmitter, Output, defineInjectable } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import 'tinymce/tinymce.min';
import 'tinymce/themes/modern/theme';
import 'tinymce/plugins/link/plugin.js';
import 'tinymce/plugins/paste/plugin.js';
import 'tinymce/plugins/table/plugin.js';
import 'tinymce/plugins/advlist/plugin.js';
import 'tinymce/plugins/autoresize/plugin.js';
import 'tinymce/plugins/lists/plugin.js';
import 'tinymce/plugins/code/plugin.js';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class Angular2TinymceLibService {
    constructor() {
    }
}
Angular2TinymceLibService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
Angular2TinymceLibService.ctorParameters = () => [];
/** @nocollapse */ Angular2TinymceLibService.ngInjectableDef = defineInjectable({ factory: function Angular2TinymceLibService_Factory() { return new Angular2TinymceLibService(); }, token: Angular2TinymceLibService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class TinymceDefaultOptions {
    constructor() {
        this.plugins = [
            'link',
            'paste',
            'table',
            'advlist',
            'autoresize',
            'lists',
            'code'
        ];
        this.skin_url = '/assets/tinymce/skins/lightgray';
        this.baseURL = '/assets/tinymce';
        this.auto_focus = true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const noop = () => {
};
class TinymceComponent {
    /**
     * @param {?} zone
     * @param {?} globalOptions
     */
    constructor(zone, globalOptions) {
        this.zone = zone;
        this.globalOptions = globalOptions;
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mousedown = new EventEmitter();
        this.mouseup = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
        this.keydown = new EventEmitter();
        this.keypress = new EventEmitter();
        this.keyup = new EventEmitter();
        this.contextmenu = new EventEmitter();
        this.paste = new EventEmitter();
        this.init = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.beforeSetContent = new EventEmitter();
        this.setContent = new EventEmitter();
        this.getContent = new EventEmitter();
        this.preProcess = new EventEmitter();
        this.postProcess = new EventEmitter();
        this.nodeChange = new EventEmitter();
        this.undo = new EventEmitter();
        this.redo = new EventEmitter();
        this.change = new EventEmitter();
        this.dirty = new EventEmitter();
        this.remove = new EventEmitter();
        this.execCommand = new EventEmitter();
        this.pastePreProcess = new EventEmitter();
        this.pastePostProcess = new EventEmitter();
        this.elementId = 'tiny-' + Math.random().toString(36).substring(2);
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = Object.assign(new TinymceDefaultOptions(), this.globalOptions, this.optionsOverride);
        this.options.selector = '#' + this.elementId;
        this.options.setup = editor => {
            this.setupEvents(editor);
        };
        this.options.init_instance_callback = editor => {
            if (editor && this.value) {
                editor.setContent(this.value);
            }
            this.editor = editor;
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.options.baseURL) {
            tinymce.baseURL = this.options.baseURL;
        }
        tinymce.init(this.options);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        tinymce.remove(this.editor);
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.zone.run(() => {
                this.onChangeCallback(v);
            });
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
            if (!value) {
                value = '';
            }
            if (this.editor && this.editor.initialized) {
                this.editor.setContent(value);
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} editor
     * @return {?}
     */
    setupEvents(editor) {
        editor.on('change keyup', () => {
            /** @type {?} */
            const content = editor.getContent();
            this.value = content;
        });
        editor.on('click', e => {
            this.click.emit(e);
        });
        editor.on('dblclick', e => {
            this.dblclick.emit(e);
        });
        editor.on('mousedown', e => {
            this.mousedown.emit(e);
        });
        editor.on('mouseup', e => {
            this.mouseup.emit(e);
        });
        editor.on('mousemove', e => {
            this.mousemove.emit(e);
        });
        editor.on('mouseover', e => {
            this.mouseover.emit(e);
        });
        editor.on('mouseout', e => {
            this.mouseout.emit(e);
        });
        editor.on('mouseenter', e => {
            this.mouseenter.emit(e);
        });
        editor.on('mouseleave', e => {
            this.mouseleave.emit(e);
        });
        editor.on('keydown', e => {
            this.keydown.emit(e);
        });
        editor.on('keypress', e => {
            this.keypress.emit(e);
        });
        editor.on('keyup', e => {
            this.keyup.emit(e);
        });
        editor.on('contextmenu', e => {
            this.contextmenu.emit(e);
        });
        editor.on('paste', e => {
            this.paste.emit(e);
        });
        editor.on('init', e => {
            this.init.emit(e);
        });
        editor.on('focus', e => {
            this.focus.emit(e);
        });
        editor.on('blur', e => {
            this.blur.emit(e);
        });
        editor.on('BeforeSetContent', e => {
            this.beforeSetContent.emit(e);
        });
        editor.on('SetContent', e => {
            this.setContent.emit(e);
        });
        editor.on('GetContent', e => {
            this.getContent.emit(e);
        });
        editor.on('PreProcess', e => {
            this.preProcess.emit(e);
        });
        editor.on('PostProcess', e => {
            this.postProcess.emit(e);
        });
        editor.on('NodeChange', e => {
            this.nodeChange.emit(e);
        });
        editor.on('Undo', e => {
            this.undo.emit(e);
        });
        editor.on('Redo', e => {
            this.redo.emit(e);
        });
        editor.on('Change', e => {
            this.change.emit(e);
        });
        editor.on('Dirty', e => {
            this.dirty.emit(e);
        });
        editor.on('Remove', e => {
            this.remove.emit(e);
        });
        editor.on('ExecCommand', e => {
            this.execCommand.emit(e);
        });
        editor.on('PastePreProcess', e => {
            this.pastePreProcess.emit(e);
        });
        editor.on('PastePostProcess', e => {
            this.pastePostProcess.emit(e);
        });
    }
}
TinymceComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-tinymce',
                template: '<div id="{{elementId}}"></div>',
                exportAs: 'tinymce',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TinymceComponent),
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
TinymceComponent.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: ['TINYMCE_CONFIG',] }] }
];
TinymceComponent.propDecorators = {
    optionsOverride: [{ type: Input, args: ['options',] }],
    click: [{ type: Output }],
    dblclick: [{ type: Output }],
    mousedown: [{ type: Output }],
    mouseup: [{ type: Output }],
    mousemove: [{ type: Output }],
    mouseover: [{ type: Output }],
    mouseout: [{ type: Output }],
    mouseenter: [{ type: Output }],
    mouseleave: [{ type: Output }],
    keydown: [{ type: Output }],
    keypress: [{ type: Output }],
    keyup: [{ type: Output }],
    contextmenu: [{ type: Output }],
    paste: [{ type: Output }],
    init: [{ type: Output }],
    focus: [{ type: Output }],
    blur: [{ type: Output }],
    beforeSetContent: [{ type: Output }],
    setContent: [{ type: Output }],
    getContent: [{ type: Output }],
    preProcess: [{ type: Output }],
    postProcess: [{ type: Output }],
    nodeChange: [{ type: Output }],
    undo: [{ type: Output }],
    redo: [{ type: Output }],
    change: [{ type: Output }],
    dirty: [{ type: Output }],
    remove: [{ type: Output }],
    execCommand: [{ type: Output }],
    pastePreProcess: [{ type: Output }],
    pastePostProcess: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class TinymceModule {
    /**
     * @param {?=} userConfig
     * @return {?}
     */
    static withConfig(userConfig = {}) {
        return {
            ngModule: TinymceModule,
            providers: [
                { provide: 'TINYMCE_CONFIG', useValue: userConfig }
            ]
        };
    }
}
TinymceModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [TinymceComponent],
                exports: [TinymceComponent],
                providers: [
                    { provide: 'TINYMCE_CONFIG', useClass: TinymceDefaultOptions }
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { Angular2TinymceLibService, TinymceComponent, TinymceModule, TinymceDefaultOptions as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,