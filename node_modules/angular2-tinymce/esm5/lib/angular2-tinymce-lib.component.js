/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, forwardRef, NgZone, Inject, Input, EventEmitter, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { TinymceDefaultOptions } from './angular2-tinymce-lib.default';
import 'tinymce/tinymce.min';
import 'tinymce/themes/modern/theme';
import 'tinymce/plugins/link/plugin.js';
import 'tinymce/plugins/paste/plugin.js';
import 'tinymce/plugins/table/plugin.js';
import 'tinymce/plugins/advlist/plugin.js';
import 'tinymce/plugins/autoresize/plugin.js';
import 'tinymce/plugins/lists/plugin.js';
import 'tinymce/plugins/code/plugin.js';
/** @type {?} */
var noop = function () {
};
var Éµ0 = noop;
var TinymceComponent = /** @class */ (function () {
    function TinymceComponent(zone, globalOptions) {
        this.zone = zone;
        this.globalOptions = globalOptions;
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mousedown = new EventEmitter();
        this.mouseup = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
        this.keydown = new EventEmitter();
        this.keypress = new EventEmitter();
        this.keyup = new EventEmitter();
        this.contextmenu = new EventEmitter();
        this.paste = new EventEmitter();
        this.init = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.beforeSetContent = new EventEmitter();
        this.setContent = new EventEmitter();
        this.getContent = new EventEmitter();
        this.preProcess = new EventEmitter();
        this.postProcess = new EventEmitter();
        this.nodeChange = new EventEmitter();
        this.undo = new EventEmitter();
        this.redo = new EventEmitter();
        this.change = new EventEmitter();
        this.dirty = new EventEmitter();
        this.remove = new EventEmitter();
        this.execCommand = new EventEmitter();
        this.pastePreProcess = new EventEmitter();
        this.pastePostProcess = new EventEmitter();
        this.elementId = 'tiny-' + Math.random().toString(36).substring(2);
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
    }
    /**
     * @return {?}
     */
    TinymceComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.options = Object.assign(new TinymceDefaultOptions(), this.globalOptions, this.optionsOverride);
        this.options.selector = '#' + this.elementId;
        this.options.setup = function (editor) {
            _this.setupEvents(editor);
        };
        this.options.init_instance_callback = function (editor) {
            if (editor && _this.value) {
                editor.setContent(_this.value);
            }
            _this.editor = editor;
        };
    };
    /**
     * @return {?}
     */
    TinymceComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.options.baseURL) {
            tinymce.baseURL = this.options.baseURL;
        }
        tinymce.init(this.options);
    };
    /**
     * @return {?}
     */
    TinymceComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        tinymce.remove(this.editor);
    };
    Object.defineProperty(TinymceComponent.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var _this = this;
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.zone.run(function () {
                    _this.onChangeCallback(v);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    TinymceComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
            if (!value) {
                value = '';
            }
            if (this.editor && this.editor.initialized) {
                this.editor.setContent(value);
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TinymceComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TinymceComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} editor
     * @return {?}
     */
    TinymceComponent.prototype.setupEvents = /**
     * @param {?} editor
     * @return {?}
     */
    function (editor) {
        var _this = this;
        editor.on('change keyup', function () {
            /** @type {?} */
            var content = editor.getContent();
            _this.value = content;
        });
        editor.on('click', function (e) {
            _this.click.emit(e);
        });
        editor.on('dblclick', function (e) {
            _this.dblclick.emit(e);
        });
        editor.on('mousedown', function (e) {
            _this.mousedown.emit(e);
        });
        editor.on('mouseup', function (e) {
            _this.mouseup.emit(e);
        });
        editor.on('mousemove', function (e) {
            _this.mousemove.emit(e);
        });
        editor.on('mouseover', function (e) {
            _this.mouseover.emit(e);
        });
        editor.on('mouseout', function (e) {
            _this.mouseout.emit(e);
        });
        editor.on('mouseenter', function (e) {
            _this.mouseenter.emit(e);
        });
        editor.on('mouseleave', function (e) {
            _this.mouseleave.emit(e);
        });
        editor.on('keydown', function (e) {
            _this.keydown.emit(e);
        });
        editor.on('keypress', function (e) {
            _this.keypress.emit(e);
        });
        editor.on('keyup', function (e) {
            _this.keyup.emit(e);
        });
        editor.on('contextmenu', function (e) {
            _this.contextmenu.emit(e);
        });
        editor.on('paste', function (e) {
            _this.paste.emit(e);
        });
        editor.on('init', function (e) {
            _this.init.emit(e);
        });
        editor.on('focus', function (e) {
            _this.focus.emit(e);
        });
        editor.on('blur', function (e) {
            _this.blur.emit(e);
        });
        editor.on('BeforeSetContent', function (e) {
            _this.beforeSetContent.emit(e);
        });
        editor.on('SetContent', function (e) {
            _this.setContent.emit(e);
        });
        editor.on('GetContent', function (e) {
            _this.getContent.emit(e);
        });
        editor.on('PreProcess', function (e) {
            _this.preProcess.emit(e);
        });
        editor.on('PostProcess', function (e) {
            _this.postProcess.emit(e);
        });
        editor.on('NodeChange', function (e) {
            _this.nodeChange.emit(e);
        });
        editor.on('Undo', function (e) {
            _this.undo.emit(e);
        });
        editor.on('Redo', function (e) {
            _this.redo.emit(e);
        });
        editor.on('Change', function (e) {
            _this.change.emit(e);
        });
        editor.on('Dirty', function (e) {
            _this.dirty.emit(e);
        });
        editor.on('Remove', function (e) {
            _this.remove.emit(e);
        });
        editor.on('ExecCommand', function (e) {
            _this.execCommand.emit(e);
        });
        editor.on('PastePreProcess', function (e) {
            _this.pastePreProcess.emit(e);
        });
        editor.on('PastePostProcess', function (e) {
            _this.pastePostProcess.emit(e);
        });
    };
    TinymceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-tinymce',
                    template: '<div id="{{elementId}}"></div>',
                    exportAs: 'tinymce',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return TinymceComponent; }),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    TinymceComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: ['TINYMCE_CONFIG',] }] }
    ]; };
    TinymceComponent.propDecorators = {
        optionsOverride: [{ type: Input, args: ['options',] }],
        click: [{ type: Output }],
        dblclick: [{ type: Output }],
        mousedown: [{ type: Output }],
        mouseup: [{ type: Output }],
        mousemove: [{ type: Output }],
        mouseover: [{ type: Output }],
        mouseout: [{ type: Output }],
        mouseenter: [{ type: Output }],
        mouseleave: [{ type: Output }],
        keydown: [{ type: Output }],
        keypress: [{ type: Output }],
        keyup: [{ type: Output }],
        contextmenu: [{ type: Output }],
        paste: [{ type: Output }],
        init: [{ type: Output }],
        focus: [{ type: Output }],
        blur: [{ type: Output }],
        beforeSetContent: [{ type: Output }],
        setContent: [{ type: Output }],
        getContent: [{ type: Output }],
        preProcess: [{ type: Output }],
        postProcess: [{ type: Output }],
        nodeChange: [{ type: Output }],
        undo: [{ type: Output }],
        redo: [{ type: Output }],
        change: [{ type: Output }],
        dirty: [{ type: Output }],
        remove: [{ type: Output }],
        execCommand: [{ type: Output }],
        pastePreProcess: [{ type: Output }],
        pastePostProcess: [{ type: Output }]
    };
    return TinymceComponent;
}());
export { TinymceComponent };
if (false) {
    /** @type {?} */
    TinymceComponent.prototype.optionsOverride;
    /** @type {?} */
    TinymceComponent.prototype.click;
    /** @type {?} */
    TinymceComponent.prototype.dblclick;
    /** @type {?} */
    TinymceComponent.prototype.mousedown;
    /** @type {?} */
    TinymceComponent.prototype.mouseup;
    /** @type {?} */
    TinymceComponent.prototype.mousemove;
    /** @type {?} */
    TinymceComponent.prototype.mouseover;
    /** @type {?} */
    TinymceComponent.prototype.mouseout;
    /** @type {?} */
    TinymceComponent.prototype.mouseenter;
    /** @type {?} */
    TinymceComponent.prototype.mouseleave;
    /** @type {?} */
    TinymceComponent.prototype.keydown;
    /** @type {?} */
    TinymceComponent.prototype.keypress;
    /** @type {?} */
    TinymceComponent.prototype.keyup;
    /** @type {?} */
    TinymceComponent.prototype.contextmenu;
    /** @type {?} */
    TinymceComponent.prototype.paste;
    /** @type {?} */
    TinymceComponent.prototype.init;
    /** @type {?} */
    TinymceComponent.prototype.focus;
    /** @type {?} */
    TinymceComponent.prototype.blur;
    /** @type {?} */
    TinymceComponent.prototype.beforeSetContent;
    /** @type {?} */
    TinymceComponent.prototype.setContent;
    /** @type {?} */
    TinymceComponent.prototype.getContent;
    /** @type {?} */
    TinymceComponent.prototype.preProcess;
    /** @type {?} */
    TinymceComponent.prototype.postProcess;
    /** @type {?} */
    TinymceComponent.prototype.nodeChange;
    /** @type {?} */
    TinymceComponent.prototype.undo;
    /** @type {?} */
    TinymceComponent.prototype.redo;
    /** @type {?} */
    TinymceComponent.prototype.change;
    /** @type {?} */
    TinymceComponent.prototype.dirty;
    /** @type {?} */
    TinymceComponent.prototype.remove;
    /** @type {?} */
    TinymceComponent.prototype.execCommand;
    /** @type {?} */
    TinymceComponent.prototype.pastePreProcess;
    /** @type {?} */
    TinymceComponent.prototype.pastePostProcess;
    /** @type {?} */
    TinymceComponent.prototype.elementId;
    /** @type {?} */
    TinymceComponent.prototype.editor;
    /** @type {?} */
    TinymceComponent.prototype.onTouchedCallback;
    /** @type {?} */
    TinymceComponent.prototype.onChangeCallback;
    /** @type {?} */
    TinymceComponent.prototype.innerValue;
    /** @type {?} */
    TinymceComponent.prototype.options;
    /** @type {?} */
    TinymceComponent.prototype.zone;
    /** @type {?} */
    TinymceComponent.prototype.globalOptions;
}
export { Éµ0 };

//# sourceMappingURL=data:application/json;base64,