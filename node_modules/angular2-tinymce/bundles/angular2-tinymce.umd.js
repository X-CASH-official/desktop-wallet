(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('tinymce/tinymce.min'), require('tinymce/themes/modern/theme'), require('tinymce/plugins/link/plugin.js'), require('tinymce/plugins/paste/plugin.js'), require('tinymce/plugins/table/plugin.js'), require('tinymce/plugins/advlist/plugin.js'), require('tinymce/plugins/autoresize/plugin.js'), require('tinymce/plugins/lists/plugin.js'), require('tinymce/plugins/code/plugin.js')) :
    typeof define === 'function' && define.amd ? define('angular2-tinymce', ['exports', '@angular/core', '@angular/forms', 'tinymce/tinymce.min', 'tinymce/themes/modern/theme', 'tinymce/plugins/link/plugin.js', 'tinymce/plugins/paste/plugin.js', 'tinymce/plugins/table/plugin.js', 'tinymce/plugins/advlist/plugin.js', 'tinymce/plugins/autoresize/plugin.js', 'tinymce/plugins/lists/plugin.js', 'tinymce/plugins/code/plugin.js'], factory) :
    (factory((global['angular2-tinymce'] = {}),global.ng.core,global.ng.forms));
}(this, (function (exports,i0,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Angular2TinymceLibService = /** @class */ (function () {
        function Angular2TinymceLibService() {
        }
        Angular2TinymceLibService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        Angular2TinymceLibService.ctorParameters = function () { return []; };
        /** @nocollapse */ Angular2TinymceLibService.ngInjectableDef = i0.defineInjectable({ factory: function Angular2TinymceLibService_Factory() { return new Angular2TinymceLibService(); }, token: Angular2TinymceLibService, providedIn: "root" });
        return Angular2TinymceLibService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TinymceDefaultOptions = /** @class */ (function () {
        function TinymceDefaultOptions() {
            this.plugins = [
                'link',
                'paste',
                'table',
                'advlist',
                'autoresize',
                'lists',
                'code'
            ];
            this.skin_url = '/assets/tinymce/skins/lightgray';
            this.baseURL = '/assets/tinymce';
            this.auto_focus = true;
        }
        return TinymceDefaultOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var noop = function () {
    };
    var TinymceComponent = /** @class */ (function () {
        function TinymceComponent(zone, globalOptions) {
            this.zone = zone;
            this.globalOptions = globalOptions;
            this.click = new i0.EventEmitter();
            this.dblclick = new i0.EventEmitter();
            this.mousedown = new i0.EventEmitter();
            this.mouseup = new i0.EventEmitter();
            this.mousemove = new i0.EventEmitter();
            this.mouseover = new i0.EventEmitter();
            this.mouseout = new i0.EventEmitter();
            this.mouseenter = new i0.EventEmitter();
            this.mouseleave = new i0.EventEmitter();
            this.keydown = new i0.EventEmitter();
            this.keypress = new i0.EventEmitter();
            this.keyup = new i0.EventEmitter();
            this.contextmenu = new i0.EventEmitter();
            this.paste = new i0.EventEmitter();
            this.init = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.beforeSetContent = new i0.EventEmitter();
            this.setContent = new i0.EventEmitter();
            this.getContent = new i0.EventEmitter();
            this.preProcess = new i0.EventEmitter();
            this.postProcess = new i0.EventEmitter();
            this.nodeChange = new i0.EventEmitter();
            this.undo = new i0.EventEmitter();
            this.redo = new i0.EventEmitter();
            this.change = new i0.EventEmitter();
            this.dirty = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.execCommand = new i0.EventEmitter();
            this.pastePreProcess = new i0.EventEmitter();
            this.pastePostProcess = new i0.EventEmitter();
            this.elementId = 'tiny-' + Math.random().toString(36).substring(2);
            this.onTouchedCallback = noop;
            this.onChangeCallback = noop;
        }
        /**
         * @return {?}
         */
        TinymceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.options = Object.assign(new TinymceDefaultOptions(), this.globalOptions, this.optionsOverride);
                this.options.selector = '#' + this.elementId;
                this.options.setup = function (editor) {
                    _this.setupEvents(editor);
                };
                this.options.init_instance_callback = function (editor) {
                    if (editor && _this.value) {
                        editor.setContent(_this.value);
                    }
                    _this.editor = editor;
                };
            };
        /**
         * @return {?}
         */
        TinymceComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.options.baseURL) {
                    tinymce.baseURL = this.options.baseURL;
                }
                tinymce.init(this.options);
            };
        /**
         * @return {?}
         */
        TinymceComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                tinymce.remove(this.editor);
            };
        Object.defineProperty(TinymceComponent.prototype, "value", {
            // get accessor
            get: /**
             * @return {?}
             */ function () {
                return this.innerValue;
            },
            // set accessor including call the onchange callback
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                var _this = this;
                if (v !== this.innerValue) {
                    this.innerValue = v;
                    this.zone.run(function () {
                        _this.onChangeCallback(v);
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        // From ControlValueAccessor interface
        /**
         * @param {?} value
         * @return {?}
         */
        TinymceComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.innerValue) {
                    this.innerValue = value;
                    if (!value) {
                        value = '';
                    }
                    if (this.editor && this.editor.initialized) {
                        this.editor.setContent(value);
                    }
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TinymceComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChangeCallback = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TinymceComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouchedCallback = fn;
            };
        /**
         * @param {?} editor
         * @return {?}
         */
        TinymceComponent.prototype.setupEvents = /**
         * @param {?} editor
         * @return {?}
         */
            function (editor) {
                var _this = this;
                editor.on('change keyup', function () {
                    /** @type {?} */
                    var content = editor.getContent();
                    _this.value = content;
                });
                editor.on('click', function (e) {
                    _this.click.emit(e);
                });
                editor.on('dblclick', function (e) {
                    _this.dblclick.emit(e);
                });
                editor.on('mousedown', function (e) {
                    _this.mousedown.emit(e);
                });
                editor.on('mouseup', function (e) {
                    _this.mouseup.emit(e);
                });
                editor.on('mousemove', function (e) {
                    _this.mousemove.emit(e);
                });
                editor.on('mouseover', function (e) {
                    _this.mouseover.emit(e);
                });
                editor.on('mouseout', function (e) {
                    _this.mouseout.emit(e);
                });
                editor.on('mouseenter', function (e) {
                    _this.mouseenter.emit(e);
                });
                editor.on('mouseleave', function (e) {
                    _this.mouseleave.emit(e);
                });
                editor.on('keydown', function (e) {
                    _this.keydown.emit(e);
                });
                editor.on('keypress', function (e) {
                    _this.keypress.emit(e);
                });
                editor.on('keyup', function (e) {
                    _this.keyup.emit(e);
                });
                editor.on('contextmenu', function (e) {
                    _this.contextmenu.emit(e);
                });
                editor.on('paste', function (e) {
                    _this.paste.emit(e);
                });
                editor.on('init', function (e) {
                    _this.init.emit(e);
                });
                editor.on('focus', function (e) {
                    _this.focus.emit(e);
                });
                editor.on('blur', function (e) {
                    _this.blur.emit(e);
                });
                editor.on('BeforeSetContent', function (e) {
                    _this.beforeSetContent.emit(e);
                });
                editor.on('SetContent', function (e) {
                    _this.setContent.emit(e);
                });
                editor.on('GetContent', function (e) {
                    _this.getContent.emit(e);
                });
                editor.on('PreProcess', function (e) {
                    _this.preProcess.emit(e);
                });
                editor.on('PostProcess', function (e) {
                    _this.postProcess.emit(e);
                });
                editor.on('NodeChange', function (e) {
                    _this.nodeChange.emit(e);
                });
                editor.on('Undo', function (e) {
                    _this.undo.emit(e);
                });
                editor.on('Redo', function (e) {
                    _this.redo.emit(e);
                });
                editor.on('Change', function (e) {
                    _this.change.emit(e);
                });
                editor.on('Dirty', function (e) {
                    _this.dirty.emit(e);
                });
                editor.on('Remove', function (e) {
                    _this.remove.emit(e);
                });
                editor.on('ExecCommand', function (e) {
                    _this.execCommand.emit(e);
                });
                editor.on('PastePreProcess', function (e) {
                    _this.pastePreProcess.emit(e);
                });
                editor.on('PastePostProcess', function (e) {
                    _this.pastePostProcess.emit(e);
                });
            };
        TinymceComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-tinymce',
                        template: '<div id="{{elementId}}"></div>',
                        exportAs: 'tinymce',
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return TinymceComponent; }),
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        TinymceComponent.ctorParameters = function () {
            return [
                { type: i0.NgZone },
                { type: undefined, decorators: [{ type: i0.Inject, args: ['TINYMCE_CONFIG',] }] }
            ];
        };
        TinymceComponent.propDecorators = {
            optionsOverride: [{ type: i0.Input, args: ['options',] }],
            click: [{ type: i0.Output }],
            dblclick: [{ type: i0.Output }],
            mousedown: [{ type: i0.Output }],
            mouseup: [{ type: i0.Output }],
            mousemove: [{ type: i0.Output }],
            mouseover: [{ type: i0.Output }],
            mouseout: [{ type: i0.Output }],
            mouseenter: [{ type: i0.Output }],
            mouseleave: [{ type: i0.Output }],
            keydown: [{ type: i0.Output }],
            keypress: [{ type: i0.Output }],
            keyup: [{ type: i0.Output }],
            contextmenu: [{ type: i0.Output }],
            paste: [{ type: i0.Output }],
            init: [{ type: i0.Output }],
            focus: [{ type: i0.Output }],
            blur: [{ type: i0.Output }],
            beforeSetContent: [{ type: i0.Output }],
            setContent: [{ type: i0.Output }],
            getContent: [{ type: i0.Output }],
            preProcess: [{ type: i0.Output }],
            postProcess: [{ type: i0.Output }],
            nodeChange: [{ type: i0.Output }],
            undo: [{ type: i0.Output }],
            redo: [{ type: i0.Output }],
            change: [{ type: i0.Output }],
            dirty: [{ type: i0.Output }],
            remove: [{ type: i0.Output }],
            execCommand: [{ type: i0.Output }],
            pastePreProcess: [{ type: i0.Output }],
            pastePostProcess: [{ type: i0.Output }]
        };
        return TinymceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TinymceModule = /** @class */ (function () {
        function TinymceModule() {
        }
        /**
         * @param {?=} userConfig
         * @return {?}
         */
        TinymceModule.withConfig = /**
         * @param {?=} userConfig
         * @return {?}
         */
            function (userConfig) {
                if (userConfig === void 0) {
                    userConfig = {};
                }
                return {
                    ngModule: TinymceModule,
                    providers: [
                        { provide: 'TINYMCE_CONFIG', useValue: userConfig }
                    ]
                };
            };
        TinymceModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [TinymceComponent],
                        exports: [TinymceComponent],
                        providers: [
                            { provide: 'TINYMCE_CONFIG', useClass: TinymceDefaultOptions }
                        ]
                    },] }
        ];
        return TinymceModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.Angular2TinymceLibService = Angular2TinymceLibService;
    exports.TinymceComponent = TinymceComponent;
    exports.TinymceModule = TinymceModule;
    exports.ɵb = TinymceDefaultOptions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,