{"version":3,"sources":["ng://angular2-tinymce/lib/angular2-tinymce-lib.service.ts","ng://angular2-tinymce/lib/angular2-tinymce-lib.default.ts","ng://angular2-tinymce/lib/angular2-tinymce-lib.component.ts","ng://angular2-tinymce/lib/angular2-tinymce-lib.module.ts"],"names":["Angular2TinymceLibService","Injectable","args","providedIn","TinymceDefaultOptions","noop","TinymceComponent","zone","globalOptions","this","EventEmitter","Math","random","toString","substring","prototype","ngOnInit","_this","options","Object","assign","optionsOverride","selector","elementId","setup","editor","setupEvents","init_instance_callback","value","setContent","ngAfterViewInit","baseURL","tinymce","init","ngOnDestroy","remove","defineProperty","innerValue","v","run","onChangeCallback","writeValue","initialized","registerOnChange","fn","registerOnTouched","onTouchedCallback","on","content","getContent","e","click","emit","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave","keydown","keypress","keyup","contextmenu","paste","focus","blur","beforeSetContent","preProcess","postProcess","nodeChange","undo","redo","change","dirty","execCommand","pastePreProcess","pastePostProcess","Component","template","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NgZone","Inject","Input","Output","TinymceModule","withConfig","userConfig","ngModule","useValue","NgModule","imports","declarations","exports","useClass"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class Angular2TinymceLibService {\n\tconstructor() {\n\t}\n}\n","import { TinymceOptions } from './angular2-tinymce-lib.config.interface';\n\nexport class TinymceDefaultOptions implements TinymceOptions {\n\tplugins = [\n\t\t'link',\n\t\t'paste',\n\t\t'table',\n\t\t'advlist',\n\t\t'autoresize',\n\t\t'lists',\n\t\t'code'\n\t];\n\tskin_url = '/assets/tinymce/skins/lightgray';\n\tbaseURL = '/assets/tinymce';\n\tauto_focus = true;\n}\n","import { Component, OnDestroy, AfterViewInit, forwardRef, NgZone, Inject, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { TinymceDefaultOptions } from './angular2-tinymce-lib.default';\nimport { TinymceOptions } from './angular2-tinymce-lib.config.interface';\n\nimport 'tinymce/tinymce.min';\n\ndeclare var tinymce: any;\n\nimport 'tinymce/themes/modern/theme';\nimport 'tinymce/plugins/link/plugin.js';\nimport 'tinymce/plugins/paste/plugin.js';\nimport 'tinymce/plugins/table/plugin.js';\nimport 'tinymce/plugins/advlist/plugin.js';\nimport 'tinymce/plugins/autoresize/plugin.js';\nimport 'tinymce/plugins/lists/plugin.js';\nimport 'tinymce/plugins/code/plugin.js';\n\nconst noop = () => {\n};\n\n@Component({\n\tselector: 'app-tinymce',\n\ttemplate: '<div id=\"{{elementId}}\"></div>',\n\texportAs: 'tinymce',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => TinymceComponent),\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class TinymceComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnDestroy {\n\t@Input('options') optionsOverride: TinymceOptions;\n\n\t@Output() click = new EventEmitter();\n\t@Output() dblclick = new EventEmitter();\n\t@Output() mousedown = new EventEmitter();\n\t@Output() mouseup = new EventEmitter();\n\t@Output() mousemove = new EventEmitter();\n\t@Output() mouseover = new EventEmitter();\n\t@Output() mouseout = new EventEmitter();\n\t@Output() mouseenter = new EventEmitter();\n\t@Output() mouseleave = new EventEmitter();\n\t@Output() keydown = new EventEmitter();\n\t@Output() keypress = new EventEmitter();\n\t@Output() keyup = new EventEmitter();\n\t@Output() contextmenu = new EventEmitter();\n\t@Output() paste = new EventEmitter();\n\t@Output() init = new EventEmitter();\n\t@Output() focus = new EventEmitter();\n\t@Output() blur = new EventEmitter();\n\t@Output() beforeSetContent = new EventEmitter();\n\t@Output() setContent = new EventEmitter();\n\t@Output() getContent = new EventEmitter();\n\t@Output() preProcess = new EventEmitter();\n\t@Output() postProcess = new EventEmitter();\n\t@Output() nodeChange = new EventEmitter();\n\t@Output() undo = new EventEmitter();\n\t@Output() redo = new EventEmitter();\n\t@Output() change = new EventEmitter();\n\t@Output() dirty = new EventEmitter();\n\t@Output() remove = new EventEmitter();\n\t@Output() execCommand = new EventEmitter();\n\t@Output() pastePreProcess = new EventEmitter();\n\t@Output() pastePostProcess = new EventEmitter();\n\n\tpublic elementId: string = 'tiny-' + Math.random().toString(36).substring(2);\n\tpublic editor: any;\n\n\tprivate onTouchedCallback: () => void = noop;\n\tprivate onChangeCallback: (_: any) => void = noop;\n\tprivate innerValue: string;\n\n\tprivate options: TinymceOptions;\n\n\tconstructor(\n\t\tprivate zone: NgZone,\n\t\t@Inject('TINYMCE_CONFIG') private globalOptions: TinymceOptions\n\t) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.options = Object.assign(new TinymceDefaultOptions(), this.globalOptions, this.optionsOverride);\n\t\tthis.options.selector = '#' + this.elementId;\n\t\tthis.options.setup = editor => {\n\t\t\tthis.setupEvents(editor);\n\t\t};\n\t\tthis.options.init_instance_callback = editor => {\n\t\t\tif (editor && this.value) {\n\t\t\t\teditor.setContent(this.value);\n\t\t\t}\n\t\t\tthis.editor = editor;\n\t\t};\n\t}\n\n\tngAfterViewInit() {\n\t\tif (this.options.baseURL) {\n\t\t\ttinymce.baseURL = this.options.baseURL;\n\t\t}\n\t\ttinymce.init(this.options);\n\t}\n\n\tngOnDestroy() {\n\t\ttinymce.remove(this.editor);\n\t}\n\n\t// get accessor\n\tget value(): any {\n\t\treturn this.innerValue;\n\t}\n\n\t// set accessor including call the onchange callback\n\tset value(v: any) {\n\t\tif (v !== this.innerValue) {\n\t\t\tthis.innerValue = v;\n\t\t\tthis.zone.run(() => {\n\t\t\t\tthis.onChangeCallback(v);\n\t\t\t});\n\n\t\t}\n\t}\n\n\t// From ControlValueAccessor interface\n\twriteValue(value: any) {\n\t\tif (value !== this.innerValue) {\n\t\t\tthis.innerValue = value;\n\t\t\tif (!value) {\n\t\t\t\tvalue = '';\n\t\t\t}\n\t\t\tif (this.editor && this.editor.initialized) {\n\t\t\t\tthis.editor.setContent(value);\n\t\t\t}\n\t\t}\n\t}\n\n\tregisterOnChange(fn: any) {\n\t\tthis.onChangeCallback = fn;\n\t}\n\n\tregisterOnTouched(fn: any) {\n\t\tthis.onTouchedCallback = fn;\n\t}\n\n\tsetupEvents(editor) {\n\t\teditor.on('change keyup', () => {\n\t\t\tconst content = editor.getContent();\n\t\t\tthis.value = content;\n\t\t});\n\t\teditor.on('click', e => {\n\t\t\tthis.click.emit(e);\n\t\t});\n\t\teditor.on('dblclick', e => {\n\t\t\tthis.dblclick.emit(e);\n\t\t});\n\t\teditor.on('mousedown', e => {\n\t\t\tthis.mousedown.emit(e);\n\t\t});\n\t\teditor.on('mouseup', e => {\n\t\t\tthis.mouseup.emit(e);\n\t\t});\n\t\teditor.on('mousemove', e => {\n\t\t\tthis.mousemove.emit(e);\n\t\t});\n\t\teditor.on('mouseover', e => {\n\t\t\tthis.mouseover.emit(e);\n\t\t});\n\t\teditor.on('mouseout', e => {\n\t\t\tthis.mouseout.emit(e);\n\t\t});\n\t\teditor.on('mouseenter', e => {\n\t\t\tthis.mouseenter.emit(e);\n\t\t});\n\t\teditor.on('mouseleave', e => {\n\t\t\tthis.mouseleave.emit(e);\n\t\t});\n\t\teditor.on('keydown', e => {\n\t\t\tthis.keydown.emit(e);\n\t\t});\n\t\teditor.on('keypress', e => {\n\t\t\tthis.keypress.emit(e);\n\t\t});\n\t\teditor.on('keyup', e => {\n\t\t\tthis.keyup.emit(e);\n\t\t});\n\t\teditor.on('contextmenu', e => {\n\t\t\tthis.contextmenu.emit(e);\n\t\t});\n\t\teditor.on('paste', e => {\n\t\t\tthis.paste.emit(e);\n\t\t});\n\t\teditor.on('init', e => {\n\t\t\tthis.init.emit(e);\n\t\t});\n\t\teditor.on('focus', e => {\n\t\t\tthis.focus.emit(e);\n\t\t});\n\t\teditor.on('blur', e => {\n\t\t\tthis.blur.emit(e);\n\t\t});\n\t\teditor.on('BeforeSetContent', e => {\n\t\t\tthis.beforeSetContent.emit(e);\n\t\t});\n\t\teditor.on('SetContent', e => {\n\t\t\tthis.setContent.emit(e);\n\t\t});\n\t\teditor.on('GetContent', e => {\n\t\t\tthis.getContent.emit(e);\n\t\t});\n\t\teditor.on('PreProcess', e => {\n\t\t\tthis.preProcess.emit(e);\n\t\t});\n\t\teditor.on('PostProcess', e => {\n\t\t\tthis.postProcess.emit(e);\n\t\t});\n\t\teditor.on('NodeChange', e => {\n\t\t\tthis.nodeChange.emit(e);\n\t\t});\n\t\teditor.on('Undo', e => {\n\t\t\tthis.undo.emit(e);\n\t\t});\n\t\teditor.on('Redo', e => {\n\t\t\tthis.redo.emit(e);\n\t\t});\n\t\teditor.on('Change', e => {\n\t\t\tthis.change.emit(e);\n\t\t});\n\t\teditor.on('Dirty', e => {\n\t\t\tthis.dirty.emit(e);\n\t\t});\n\t\teditor.on('Remove', e => {\n\t\t\tthis.remove.emit(e);\n\t\t});\n\t\teditor.on('ExecCommand', e => {\n\t\t\tthis.execCommand.emit(e);\n\t\t});\n\t\teditor.on('PastePreProcess', e => {\n\t\t\tthis.pastePreProcess.emit(e);\n\t\t});\n\t\teditor.on('PastePostProcess', e => {\n\t\t\tthis.pastePostProcess.emit(e);\n\t\t});\n\t}\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { TinymceComponent } from './angular2-tinymce-lib.component';\nimport { TinymceOptions } from './angular2-tinymce-lib.config.interface';\nimport { TinymceDefaultOptions } from './angular2-tinymce-lib.default';\n\n@NgModule({\n\timports: [],\n\tdeclarations: [TinymceComponent],\n\texports: [TinymceComponent],\n\tproviders: [\n\t\t{ provide: 'TINYMCE_CONFIG', useClass: TinymceDefaultOptions }\n\t]\n})\nexport class TinymceModule {\n\tstatic withConfig(userConfig: TinymceOptions = {}): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: TinymceModule,\n\t\t\tproviders: [\n\t\t\t\t{ provide: 'TINYMCE_CONFIG', useValue: userConfig }\n\t\t\t]\n\t\t};\n\t}\n}\n"]}