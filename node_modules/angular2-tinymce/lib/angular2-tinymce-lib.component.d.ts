import { OnDestroy, AfterViewInit, NgZone, OnInit, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TinymceOptions } from './angular2-tinymce-lib.config.interface';
import 'tinymce/tinymce.min';
import 'tinymce/themes/modern/theme';
import 'tinymce/plugins/link/plugin.js';
import 'tinymce/plugins/paste/plugin.js';
import 'tinymce/plugins/table/plugin.js';
import 'tinymce/plugins/advlist/plugin.js';
import 'tinymce/plugins/autoresize/plugin.js';
import 'tinymce/plugins/lists/plugin.js';
import 'tinymce/plugins/code/plugin.js';
export declare class TinymceComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnDestroy {
    private zone;
    private globalOptions;
    optionsOverride: TinymceOptions;
    click: EventEmitter<{}>;
    dblclick: EventEmitter<{}>;
    mousedown: EventEmitter<{}>;
    mouseup: EventEmitter<{}>;
    mousemove: EventEmitter<{}>;
    mouseover: EventEmitter<{}>;
    mouseout: EventEmitter<{}>;
    mouseenter: EventEmitter<{}>;
    mouseleave: EventEmitter<{}>;
    keydown: EventEmitter<{}>;
    keypress: EventEmitter<{}>;
    keyup: EventEmitter<{}>;
    contextmenu: EventEmitter<{}>;
    paste: EventEmitter<{}>;
    init: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    beforeSetContent: EventEmitter<{}>;
    setContent: EventEmitter<{}>;
    getContent: EventEmitter<{}>;
    preProcess: EventEmitter<{}>;
    postProcess: EventEmitter<{}>;
    nodeChange: EventEmitter<{}>;
    undo: EventEmitter<{}>;
    redo: EventEmitter<{}>;
    change: EventEmitter<{}>;
    dirty: EventEmitter<{}>;
    remove: EventEmitter<{}>;
    execCommand: EventEmitter<{}>;
    pastePreProcess: EventEmitter<{}>;
    pastePostProcess: EventEmitter<{}>;
    elementId: string;
    editor: any;
    private onTouchedCallback;
    private onChangeCallback;
    private innerValue;
    private options;
    constructor(zone: NgZone, globalOptions: TinymceOptions);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    value: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setupEvents(editor: any): void;
}
