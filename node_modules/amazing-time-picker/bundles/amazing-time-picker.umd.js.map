{"version":3,"file":"amazing-time-picker.umd.js","sources":["~/amazing-time-picker/src/app/atp-library/atp-time-picker.module.ts","~/amazing-time-picker/src/app/atp-library/atp.directive.ts","~/amazing-time-picker/src/app/atp-library/atp-time-picker.service.ts","~/amazing-time-picker/src/app/atp-library/preferences.ts","~/amazing-time-picker/src/app/atp-library/atp-time-picker/atp-time-picker.component.ts","../../../node_modules/src/Rx.ts","../../../node_modules/src/operators.ts","../../../node_modules/src/scheduler/animationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/src/scheduler/AnimationFrameAction.ts","../../../node_modules/src/util/AnimationFrame.ts","../../../node_modules/src/testing/TestScheduler.ts","../../../node_modules/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/src/testing/HotObservable.ts","../../../node_modules/src/testing/ColdObservable.ts","../../../node_modules/src/util/applyMixins.ts","../../../node_modules/src/testing/SubscriptionLoggable.ts","../../../node_modules/src/testing/SubscriptionLog.ts","../../../node_modules/src/add/operator/zipAll.ts","../../../node_modules/src/operator/zipAll.ts","../../../node_modules/src/operators/zipAll.ts","../../../node_modules/src/add/operator/zip.ts","../../../node_modules/src/operator/zip.ts","../../../node_modules/src/add/operator/withLatestFrom.ts","../../../node_modules/src/operator/withLatestFrom.ts","../../../node_modules/src/operators/withLatestFrom.ts","../../../node_modules/src/add/operator/windowWhen.ts","../../../node_modules/src/operator/windowWhen.ts","../../../node_modules/src/operators/windowWhen.ts","../../../node_modules/src/add/operator/windowToggle.ts","../../../node_modules/src/operator/windowToggle.ts","../../../node_modules/src/operators/windowToggle.ts","../../../node_modules/src/add/operator/windowTime.ts","../../../node_modules/src/operator/windowTime.ts","../../../node_modules/src/operators/windowTime.ts","../../../node_modules/src/add/operator/windowCount.ts","../../../node_modules/src/operator/windowCount.ts","../../../node_modules/src/operators/windowCount.ts","../../../node_modules/src/add/operator/window.ts","../../../node_modules/src/operator/window.ts","../../../node_modules/src/operators/window.ts","../../../node_modules/src/add/operator/toArray.ts","../../../node_modules/src/operator/toArray.ts","../../../node_modules/src/operators/toArray.ts","../../../node_modules/src/add/operator/timestamp.ts","../../../node_modules/src/operator/timestamp.ts","../../../node_modules/src/operators/timestamp.ts","../../../node_modules/src/add/operator/timeoutWith.ts","../../../node_modules/src/operator/timeoutWith.ts","../../../node_modules/src/operators/timeoutWith.ts","../../../node_modules/src/add/operator/timeout.ts","../../../node_modules/src/operator/timeout.ts","../../../node_modules/src/operators/timeout.ts","../../../node_modules/src/util/TimeoutError.ts","../../../node_modules/src/add/operator/timeInterval.ts","../../../node_modules/src/operator/timeInterval.ts","../../../node_modules/src/operators/timeInterval.ts","../../../node_modules/src/add/operator/throttleTime.ts","../../../node_modules/src/operator/throttleTime.ts","../../../node_modules/src/operators/throttleTime.ts","../../../node_modules/src/add/operator/throttle.ts","../../../node_modules/src/operator/throttle.ts","../../../node_modules/src/operators/throttle.ts","../../../node_modules/src/add/operator/takeWhile.ts","../../../node_modules/src/operator/takeWhile.ts","../../../node_modules/src/operators/takeWhile.ts","../../../node_modules/src/add/operator/takeUntil.ts","../../../node_modules/src/operator/takeUntil.ts","../../../node_modules/src/operators/takeUntil.ts","../../../node_modules/src/add/operator/takeLast.ts","../../../node_modules/src/operator/takeLast.ts","../../../node_modules/src/add/operator/take.ts","../../../node_modules/src/operator/take.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/src/add/operator/switchMapTo.ts","../../../node_modules/src/operator/switchMapTo.ts","../../../node_modules/src/operators/switchMapTo.ts","../../../node_modules/src/add/operator/switchMap.ts","../../../node_modules/src/operator/switchMap.ts","../../../node_modules/src/add/operator/switch.ts","../../../node_modules/src/operator/switch.ts","../../../node_modules/src/operators/switchAll.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/add/operator/subscribeOn.ts","../../../node_modules/src/operator/subscribeOn.ts","../../../node_modules/src/operators/subscribeOn.ts","../../../node_modules/src/observable/SubscribeOnObservable.ts","../../../node_modules/src/scheduler/asap.ts","../../../node_modules/src/scheduler/AsapScheduler.ts","../../../node_modules/src/scheduler/AsapAction.ts","../../../node_modules/src/util/Immediate.ts","../../../node_modules/src/add/operator/startWith.ts","../../../node_modules/src/operator/startWith.ts","../../../node_modules/src/operators/startWith.ts","../../../node_modules/src/add/operator/skipWhile.ts","../../../node_modules/src/operator/skipWhile.ts","../../../node_modules/src/operators/skipWhile.ts","../../../node_modules/src/add/operator/skipUntil.ts","../../../node_modules/src/operator/skipUntil.ts","../../../node_modules/src/operators/skipUntil.ts","../../../node_modules/src/add/operator/skipLast.ts","../../../node_modules/src/operator/skipLast.ts","../../../node_modules/src/operators/skipLast.ts","../../../node_modules/src/add/operator/skip.ts","../../../node_modules/src/operator/skip.ts","../../../node_modules/src/operators/skip.ts","../../../node_modules/src/add/operator/single.ts","../../../node_modules/src/operator/single.ts","../../../node_modules/src/operators/single.ts","../../../node_modules/src/add/operator/shareReplay.ts","../../../node_modules/src/operator/shareReplay.ts","../../../node_modules/src/operators/shareReplay.ts","../../../node_modules/src/add/operator/share.ts","../../../node_modules/src/operator/share.ts","../../../node_modules/src/operators/share.ts","../../../node_modules/src/add/operator/sequenceEqual.ts","../../../node_modules/src/operator/sequenceEqual.ts","../../../node_modules/src/operators/sequenceEqual.ts","../../../node_modules/src/add/operator/scan.ts","../../../node_modules/src/operator/scan.ts","../../../node_modules/src/add/operator/sampleTime.ts","../../../node_modules/src/operator/sampleTime.ts","../../../node_modules/src/operators/sampleTime.ts","../../../node_modules/src/add/operator/sample.ts","../../../node_modules/src/operator/sample.ts","../../../node_modules/src/operators/sample.ts","../../../node_modules/src/add/operator/retryWhen.ts","../../../node_modules/src/operator/retryWhen.ts","../../../node_modules/src/operators/retryWhen.ts","../../../node_modules/src/add/operator/retry.ts","../../../node_modules/src/operator/retry.ts","../../../node_modules/src/operators/retry.ts","../../../node_modules/src/add/operator/repeatWhen.ts","../../../node_modules/src/operator/repeatWhen.ts","../../../node_modules/src/operators/repeatWhen.ts","../../../node_modules/src/add/operator/repeat.ts","../../../node_modules/src/operator/repeat.ts","../../../node_modules/src/operators/repeat.ts","../../../node_modules/src/add/operator/reduce.ts","../../../node_modules/src/operator/reduce.ts","../../../node_modules/src/add/operator/race.ts","../../../node_modules/src/operator/race.ts","../../../node_modules/src/operators/race.ts","../../../node_modules/src/add/operator/publishLast.ts","../../../node_modules/src/operator/publishLast.ts","../../../node_modules/src/operators/publishLast.ts","../../../node_modules/src/add/operator/publishReplay.ts","../../../node_modules/src/operator/publishReplay.ts","../../../node_modules/src/operators/publishReplay.ts","../../../node_modules/src/add/operator/publishBehavior.ts","../../../node_modules/src/operator/publishBehavior.ts","../../../node_modules/src/operators/publishBehavior.ts","../../../node_modules/src/BehaviorSubject.ts","../../../node_modules/src/add/operator/publish.ts","../../../node_modules/src/operator/publish.ts","../../../node_modules/src/operators/publish.ts","../../../node_modules/src/add/operator/pluck.ts","../../../node_modules/src/operator/pluck.ts","../../../node_modules/src/operators/pluck.ts","../../../node_modules/src/add/operator/partition.ts","../../../node_modules/src/operator/partition.ts","../../../node_modules/src/operators/partition.ts","../../../node_modules/src/util/not.ts","../../../node_modules/src/add/operator/pairwise.ts","../../../node_modules/src/operator/pairwise.ts","../../../node_modules/src/operators/pairwise.ts","../../../node_modules/src/add/operator/onErrorResumeNext.ts","../../../node_modules/src/operator/onErrorResumeNext.ts","../../../node_modules/src/add/operator/observeOn.ts","../../../node_modules/src/operator/observeOn.ts","../../../node_modules/src/add/operator/multicast.ts","../../../node_modules/src/operator/multicast.ts","../../../node_modules/src/operators/multicast.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/add/operator/min.ts","../../../node_modules/src/operator/min.ts","../../../node_modules/src/operators/min.ts","../../../node_modules/src/add/operator/mergeScan.ts","../../../node_modules/src/operator/mergeScan.ts","../../../node_modules/src/operators/mergeScan.ts","../../../node_modules/src/add/operator/mergeMapTo.ts","../../../node_modules/src/operator/mergeMapTo.ts","../../../node_modules/src/operators/mergeMapTo.ts","../../../node_modules/src/add/operator/mergeMap.ts","../../../node_modules/src/operator/mergeMap.ts","../../../node_modules/src/add/operator/mergeAll.ts","../../../node_modules/src/operator/mergeAll.ts","../../../node_modules/src/add/operator/merge.ts","../../../node_modules/src/operator/merge.ts","../../../node_modules/src/operators/merge.ts","../../../node_modules/src/add/operator/max.ts","../../../node_modules/src/operator/max.ts","../../../node_modules/src/operators/max.ts","../../../node_modules/src/operators/reduce.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/add/operator/materialize.ts","../../../node_modules/src/operator/materialize.ts","../../../node_modules/src/operators/materialize.ts","../../../node_modules/src/add/operator/mapTo.ts","../../../node_modules/src/operator/mapTo.ts","../../../node_modules/src/operators/mapTo.ts","../../../node_modules/src/add/operator/map.ts","../../../node_modules/src/operator/map.ts","../../../node_modules/src/add/operator/every.ts","../../../node_modules/src/operator/every.ts","../../../node_modules/src/operators/every.ts","../../../node_modules/src/add/operator/let.ts","../../../node_modules/src/operator/let.ts","../../../node_modules/src/add/operator/last.ts","../../../node_modules/src/operator/last.ts","../../../node_modules/src/operators/last.ts","../../../node_modules/src/add/operator/auditTime.ts","../../../node_modules/src/operator/auditTime.ts","../../../node_modules/src/operators/auditTime.ts","../../../node_modules/src/add/operator/audit.ts","../../../node_modules/src/operator/audit.ts","../../../node_modules/src/operators/audit.ts","../../../node_modules/src/add/operator/isEmpty.ts","../../../node_modules/src/operator/isEmpty.ts","../../../node_modules/src/operators/isEmpty.ts","../../../node_modules/src/add/operator/ignoreElements.ts","../../../node_modules/src/operator/ignoreElements.ts","../../../node_modules/src/operators/ignoreElements.ts","../../../node_modules/src/add/operator/groupBy.ts","../../../node_modules/src/operator/groupBy.ts","../../../node_modules/src/operators/groupBy.ts","../../../node_modules/src/util/FastMap.ts","../../../node_modules/src/util/Map.ts","../../../node_modules/src/util/MapPolyfill.ts","../../../node_modules/src/add/operator/first.ts","../../../node_modules/src/operator/first.ts","../../../node_modules/src/operators/first.ts","../../../node_modules/src/util/EmptyError.ts","../../../node_modules/src/add/operator/findIndex.ts","../../../node_modules/src/operator/findIndex.ts","../../../node_modules/src/operators/findIndex.ts","../../../node_modules/src/add/operator/find.ts","../../../node_modules/src/operator/find.ts","../../../node_modules/src/operators/find.ts","../../../node_modules/src/add/operator/finally.ts","../../../node_modules/src/operator/finally.ts","../../../node_modules/src/operators/finalize.ts","../../../node_modules/src/add/operator/filter.ts","../../../node_modules/src/operator/filter.ts","../../../node_modules/src/operators/filter.ts","../../../node_modules/src/add/operator/elementAt.ts","../../../node_modules/src/operator/elementAt.ts","../../../node_modules/src/operators/elementAt.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/add/operator/expand.ts","../../../node_modules/src/operator/expand.ts","../../../node_modules/src/operators/expand.ts","../../../node_modules/src/add/operator/exhaustMap.ts","../../../node_modules/src/operator/exhaustMap.ts","../../../node_modules/src/operators/exhaustMap.ts","../../../node_modules/src/add/operator/exhaust.ts","../../../node_modules/src/operator/exhaust.ts","../../../node_modules/src/operators/exhaust.ts","../../../node_modules/src/add/operator/do.ts","../../../node_modules/src/operator/do.ts","../../../node_modules/src/operators/tap.ts","../../../node_modules/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/operators/distinctUntilKeyChanged.ts","../../../node_modules/src/add/operator/distinctUntilChanged.ts","../../../node_modules/src/operator/distinctUntilChanged.ts","../../../node_modules/src/operators/distinctUntilChanged.ts","../../../node_modules/src/add/operator/distinct.ts","../../../node_modules/src/operator/distinct.ts","../../../node_modules/src/operators/distinct.ts","../../../node_modules/src/util/Set.ts","../../../node_modules/src/add/operator/delayWhen.ts","../../../node_modules/src/operator/delayWhen.ts","../../../node_modules/src/operators/delayWhen.ts","../../../node_modules/src/add/operator/delay.ts","../../../node_modules/src/operator/delay.ts","../../../node_modules/src/operators/delay.ts","../../../node_modules/src/add/operator/defaultIfEmpty.ts","../../../node_modules/src/operator/defaultIfEmpty.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/add/operator/debounceTime.ts","../../../node_modules/src/operator/debounceTime.ts","../../../node_modules/src/operators/debounceTime.ts","../../../node_modules/src/add/operator/debounce.ts","../../../node_modules/src/operator/debounce.ts","../../../node_modules/src/operators/debounce.ts","../../../node_modules/src/add/operator/dematerialize.ts","../../../node_modules/src/operator/dematerialize.ts","../../../node_modules/src/operators/dematerialize.ts","../../../node_modules/src/add/operator/count.ts","../../../node_modules/src/operator/count.ts","../../../node_modules/src/operators/count.ts","../../../node_modules/src/add/operator/concatMapTo.ts","../../../node_modules/src/operator/concatMapTo.ts","../../../node_modules/src/operators/concatMapTo.ts","../../../node_modules/src/add/operator/concatMap.ts","../../../node_modules/src/operator/concatMap.ts","../../../node_modules/src/operators/concatMap.ts","../../../node_modules/src/add/operator/concatAll.ts","../../../node_modules/src/operator/concatAll.ts","../../../node_modules/src/add/operator/concat.ts","../../../node_modules/src/operator/concat.ts","../../../node_modules/src/operators/concat.ts","../../../node_modules/src/add/operator/combineLatest.ts","../../../node_modules/src/operator/combineLatest.ts","../../../node_modules/src/add/operator/combineAll.ts","../../../node_modules/src/operator/combineAll.ts","../../../node_modules/src/operators/combineAll.ts","../../../node_modules/src/add/operator/catch.ts","../../../node_modules/src/operator/catch.ts","../../../node_modules/src/operators/catchError.ts","../../../node_modules/src/add/operator/bufferWhen.ts","../../../node_modules/src/operator/bufferWhen.ts","../../../node_modules/src/operators/bufferWhen.ts","../../../node_modules/src/add/operator/bufferToggle.ts","../../../node_modules/src/operator/bufferToggle.ts","../../../node_modules/src/operators/bufferToggle.ts","../../../node_modules/src/add/operator/bufferTime.ts","../../../node_modules/src/operator/bufferTime.ts","../../../node_modules/src/operators/bufferTime.ts","../../../node_modules/src/add/operator/bufferCount.ts","../../../node_modules/src/operator/bufferCount.ts","../../../node_modules/src/operators/bufferCount.ts","../../../node_modules/src/add/operator/buffer.ts","../../../node_modules/src/operator/buffer.ts","../../../node_modules/src/operators/buffer.ts","../../../node_modules/src/add/observable/dom/webSocket.ts","../../../node_modules/src/observable/dom/webSocket.ts","../../../node_modules/src/observable/dom/WebSocketSubject.ts","../../../node_modules/src/util/assign.ts","../../../node_modules/src/ReplaySubject.ts","../../../node_modules/src/scheduler/queue.ts","../../../node_modules/src/scheduler/QueueScheduler.ts","../../../node_modules/src/scheduler/QueueAction.ts","../../../node_modules/src/add/observable/dom/ajax.ts","../../../node_modules/src/observable/dom/ajax.ts","../../../node_modules/src/observable/dom/AjaxObservable.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/add/observable/zip.ts","../../../node_modules/src/observable/zip.ts","../../../node_modules/src/operators/zip.ts","../../../node_modules/src/add/observable/timer.ts","../../../node_modules/src/observable/timer.ts","../../../node_modules/src/observable/TimerObservable.ts","../../../node_modules/src/util/isDate.ts","../../../node_modules/src/add/observable/throw.ts","../../../node_modules/src/observable/throw.ts","../../../node_modules/src/observable/ErrorObservable.ts","../../../node_modules/src/add/observable/using.ts","../../../node_modules/src/observable/using.ts","../../../node_modules/src/observable/UsingObservable.ts","../../../node_modules/src/add/observable/range.ts","../../../node_modules/src/observable/range.ts","../../../node_modules/src/observable/RangeObservable.ts","../../../node_modules/src/add/observable/pairs.ts","../../../node_modules/src/observable/pairs.ts","../../../node_modules/src/observable/PairsObservable.ts","../../../node_modules/src/add/observable/onErrorResumeNext.ts","../../../node_modules/src/observable/onErrorResumeNext.ts","../../../node_modules/src/operators/onErrorResumeNext.ts","../../../node_modules/src/add/observable/of.ts","../../../node_modules/src/add/observable/never.ts","../../../node_modules/src/observable/never.ts","../../../node_modules/src/observable/NeverObservable.ts","../../../node_modules/src/add/observable/race.ts","../../../node_modules/src/observable/race.ts","../../../node_modules/src/add/observable/merge.ts","../../../node_modules/src/observable/merge.ts","../../../node_modules/src/add/observable/interval.ts","../../../node_modules/src/observable/interval.ts","../../../node_modules/src/observable/IntervalObservable.ts","../../../node_modules/src/scheduler/async.ts","../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../node_modules/src/Scheduler.ts","../../../node_modules/src/scheduler/AsyncAction.ts","../../../node_modules/src/scheduler/Action.ts","../../../node_modules/src/util/isNumeric.ts","../../../node_modules/src/add/observable/if.ts","../../../node_modules/src/observable/if.ts","../../../node_modules/src/observable/IfObservable.ts","../../../node_modules/src/add/observable/generate.ts","../../../node_modules/src/observable/generate.ts","../../../node_modules/src/observable/GenerateObservable.ts","../../../node_modules/src/add/observable/fromPromise.ts","../../../node_modules/src/observable/fromPromise.ts","../../../node_modules/src/add/observable/fromEventPattern.ts","../../../node_modules/src/observable/fromEventPattern.ts","../../../node_modules/src/observable/FromEventPatternObservable.ts","../../../node_modules/src/add/observable/fromEvent.ts","../../../node_modules/src/observable/fromEvent.ts","../../../node_modules/src/observable/FromEventObservable.ts","../../../node_modules/src/add/observable/from.ts","../../../node_modules/src/add/observable/forkJoin.ts","../../../node_modules/src/observable/forkJoin.ts","../../../node_modules/src/observable/ForkJoinObservable.ts","../../../node_modules/src/add/observable/empty.ts","../../../node_modules/src/observable/empty.ts","../../../node_modules/src/add/observable/defer.ts","../../../node_modules/src/observable/defer.ts","../../../node_modules/src/observable/DeferObservable.ts","../../../node_modules/src/add/observable/concat.ts","../../../node_modules/src/observable/concat.ts","../../../node_modules/src/operators/concatAll.ts","../../../node_modules/src/operators/mergeAll.ts","../../../node_modules/src/util/identity.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/observable/from.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/of.ts","../../../node_modules/src/add/observable/combineLatest.ts","../../../node_modules/src/observable/combineLatest.ts","../../../node_modules/src/operators/combineLatest.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/add/observable/bindNodeCallback.ts","../../../node_modules/src/observable/bindNodeCallback.ts","../../../node_modules/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/src/add/observable/bindCallback.ts","../../../node_modules/src/observable/bindCallback.ts","../../../node_modules/src/observable/BoundCallbackObservable.ts","../../../node_modules/src/AsyncSubject.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/root.ts","~/amazing-time-picker/src/app/atp-library/time-picker/time-picker.component.ts","~/amazing-time-picker/src/app/atp-library/atp-core.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { AtpTimePickerComponent } from './atp-time-picker/atp-time-picker.component';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nimport { AtpDirective } from './atp.directive';\nimport { AtpCoreService } from './atp-core.service';\nexport class AmazingTimePickerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ],\n  providers: [\n    AmazingTimePickerService,\n    AtpCoreService\n  ],\n  entryComponents: [TimePickerComponent],\n  exports: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AmazingTimePickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, Output, EventEmitter, HostListener, ElementRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nexport class AtpDirective implements ControlValueAccessor {\n\n   myClick = new EventEmitter();\nprivate elementRef: ElementRef;\nprivate onChange = (x: any): void => {};\n/**\n * @param {?} viewContainerRef\n * @param {?} atp\n */\nconstructor(\npublic viewContainerRef: ViewContainerRef,\nprivate atp: AmazingTimePickerService) {\n    this.elementRef = this.viewContainerRef.element;\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nonClick(e) {\n    const /** @type {?} */ ele = this.viewContainerRef.element.nativeElement;\n    const /** @type {?} */ time = ele.value;\n    const /** @type {?} */ theme = ele.getAttribute('theme');\n    const /** @type {?} */ start = ele.getAttribute('start');\n    const /** @type {?} */ end = ele.getAttribute('end');\n    const /** @type {?} */ locale = ele.getAttribute('locale') || 'en';\n    const /** @type {?} */ changeToMinutes = ele.getAttribute('changeToMinutes') === 'true';\n    const /** @type {?} */ animation = ele.getAttribute('animation');\n    const /** @type {?} */ preference = ele.getAttribute('preference') || null;\n    const /** @type {?} */ onlyHour = ele.getAttribute('onlyHour') === 'true';\n    const /** @type {?} */ onlyMinute = ele.getAttribute('onlyMinute') === 'true';\n    const /** @type {?} */ onlyAM = ele.getAttribute('onlyAM') === 'true';\n    const /** @type {?} */ onlyPM = ele.getAttribute('onlyPM') === 'true';\n    let /** @type {?} */ arrowStyle = ele.getAttribute('arrowStyle');\n    arrowStyle = (arrowStyle) ? JSON.parse(arrowStyle.replace(new RegExp('\\'', 'g'), '\"')) : '';\n    const /** @type {?} */ timePickerFunction = this.atp.open({\n      time,\n      theme,\n      rangeTime: { start, end},\n      'arrowStyle': arrowStyle,\n      locale,\n      changeToMinutes,\n      animation,\n      onlyHour,\n      onlyMinute,\n      onlyAM,\n      onlyPM,\n      preference\n    });\n\n    timePickerFunction.afterClose().subscribe(retTime => {\n      this.writeValue(retTime); // update the native element\n      this.onChange(retTime); // update the form value (if there's a form)\n    });\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nonInput(e: any) {\n    this.onChange(e.srcElement.value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    if (this.elementRef) {\n      this.elementRef.nativeElement.value = value;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any) {\n    this.onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn) {  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[atp-time-picker]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: AtpDirective,\n    multi: true\n  }]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: AmazingTimePickerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'myClick': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n'onInput': [{ type: HostListener, args: ['input', ['$event'], ] },],\n};\n}\n\nfunction AtpDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpDirective.ctorParameters;\n/** @type {?} */\nAtpDirective.propDecorators;\n/** @type {?} */\nAtpDirective.prototype.myClick;\n/** @type {?} */\nAtpDirective.prototype.elementRef;\n/** @type {?} */\nAtpDirective.prototype.onChange;\n/** @type {?} */\nAtpDirective.prototype.viewContainerRef;\n/** @type {?} */\nAtpDirective.prototype.atp;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Injector, ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef } from '@angular/core';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { TimePickerConfig, IDialogResult } from './definitions';\n\n// We need to import like this, because of backward compatibility of angular\n/* tslint:disable */\n\nimport { Subject } from 'rxjs';\n/* tslint:enable */\n\nimport { Preference } from './preferences';\nexport class AmazingTimePickerService {\n/**\n * @param {?} resolver\n * @param {?} appRef\n * @param {?} injector\n */\nconstructor (\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\nprivate injector: Injector\n  ) {}\n/**\n * @param {?=} config\n * @return {?}\n */\nopen (config?: TimePickerConfig): IDialogResult {\n    const /** @type {?} */ thems = ['light', 'dark', 'material-red', 'material-green', 'material-blue', 'material-purple', 'material-orange'];\n    const /** @type {?} */ _self = this;\n    config = config || {};\n    config = /** @type {?} */(( {\n      time: config.time || '00:00',\n      theme: thems.indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {},\n      locale: config.locale || 'en',\n      changeToMinutes: config.changeToMinutes,\n      animation: (config.animation == null || config.animation === 'fade') ? 'fade' : (config.animation === 'rotate') ? 'rotate' : false,\n      preference: config.preference || null,\n      onlyHour: config.onlyHour,\n      onlyMinute: config.onlyMinute,\n      onlyAM: config.onlyAM,\n      onlyPM: config.onlyPM,\n    } as TimePickerConfig));\n    config.rangeTime = {\n      start: config.rangeTime.start || '0:0',\n      end: config.rangeTime.end || '24:0',\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : '' : '',\n      color: config.arrowStyle.color || ''\n    };\n    const /** @type {?} */ componentRef = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = componentRef.create(this.injector);\n    this.appRef.attachView(tsc.hostView);\n    const /** @type {?} */ domElem = /** @type {?} */(( ( /** @type {?} */((tsc.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n    document.body.appendChild(domElem);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    if (config.preference) {\n      tsc.instance.preference = config.preference;\n    } else {\n      tsc.instance.preference = Preference(config.locale);\n    }\n    tsc.instance.ParseStringToTime(config.time);\n    return {\n      afterClose: function () {\n        return tsc.instance.subject.asObservable();\n      }\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n];\n}\n\nfunction AmazingTimePickerService_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerService.ctorParameters;\n/** @type {?} */\nAmazingTimePickerService.prototype.resolver;\n/** @type {?} */\nAmazingTimePickerService.prototype.appRef;\n/** @type {?} */\nAmazingTimePickerService.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IDisplayPreference } from './definitions';\n\nconst /** @type {?} */ arabic = new Intl.NumberFormat('ar-AE');\nconst /** @type {?} */ persian = new Intl.NumberFormat('fa-IR');\n\nexport const /** @type {?} */ PersianPreference: IDisplayPreference = {\n  hour: (x) => persian.format(x),\n  minute: (x) => {\n    let /** @type {?} */ exp = persian.format(x);\n    if (exp.length === 1) {\n      exp = persian.format(0) + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? 'صبح' : 'عصر',\n  clockHour: (x) => persian.format(x),\n  clockMinute: (x) => persian.format(x),\n  labels: {\n    ok: 'تایید',\n    cancel: 'لغو'\n  }\n};\n\nexport const /** @type {?} */ ArabicPreference: IDisplayPreference = {\n  hour: (x) => arabic.format(x),\n  minute: (x) => {\n    let /** @type {?} */ exp = arabic.format(x);\n    if (exp.length === 1) {\n      exp = arabic.format(0) + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? 'صباحا' : 'مساء',\n  clockHour: (x) => arabic.format(x),\n  clockMinute: (x) => arabic.format(x),\n  labels: {\n    ok: 'حسنا',\n    cancel: 'إلغاء'\n  }\n};\n\nexport const /** @type {?} */ ChinesePreference: IDisplayPreference = {\n  hour:  (x) => x,\n  minute: (x) => {\n    let /** @type {?} */ exp = x;\n    if (exp.length === 1) {\n      exp = '۰' + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? '上午' : '下午',\n  clockHour: (x) => x,\n  clockMinute: (x) => x,\n  labels: {\n    ok: '确定',\n    cancel: '取消'\n  }\n};\n\nexport const /** @type {?} */ Preference = (locale: string): IDisplayPreference => {\n  switch (locale) {\n    case 'fa':\n        return PersianPreference;\n    case 'ar':\n        return ArabicPreference;\n    case 'zh':\n        return ChinesePreference;\n    default:\n      return null;\n  }\n};\n","import { Component, ViewChild, ViewContainerRef, Output, ComponentFactoryResolver, OnInit, ApplicationRef, EventEmitter\n} from '@angular/core';\nimport { TimePickerComponent } from '../time-picker/time-picker.component';\nimport { TimePickerConfig } from '../definitions';\n\n// We need to import like this, because of backward compatibility of angular\n/* tslint:disable */\n\nimport { Subject } from 'rxjs';\nexport class AtpTimePickerComponent implements OnInit {\n   container: ViewContainerRef;\n   timeSelected: EventEmitter<string> = new EventEmitter<string>();\npublic config: TimePickerConfig = {};\n/**\n * @param {?} resolver\n * @param {?} appRef\n */\nconstructor(\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    let /** @type {?} */ config = this.config;\n    config = {\n      time: config.time || '00:00',\n      theme: ['light', 'dark', 'material'].indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {}\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : 'blue' : 'blue',\n      color: config.arrowStyle.color || '#fff'\n    };\n    const /** @type {?} */ cfr = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = this.container.createComponent(cfr);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    tsc.instance.activeModal = true;\n    tsc.instance.isPopup = false;\n    tsc.instance.ParseStringToTime(config.time);\n    tsc.instance.subject.asObservable().subscribe(time => {\n      this.timeSelected.emit(time);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'atp-time-picker',\n  template: `\n    <div #container></div>\n  `,\n  styles: [`\n    .atp-time-picker .icon-container {\n      display: inline-block;\n      margin-right: .2em; }\n      .atp-time-picker .icon-container svg {\n        cursor: pointer;\n        position: relative;\n        top: .5em; }\n      .atp-time-picker .icon-container /deep/ i {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef }, ] },],\n'timeSelected': [{ type: Output },],\n};\n}\n\nfunction AtpTimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpTimePickerComponent.ctorParameters;\n/** @type {?} */\nAtpTimePickerComponent.propDecorators;\n/** @type {?} */\nAtpTimePickerComponent.prototype.container;\n/** @type {?} */\nAtpTimePickerComponent.prototype.timeSelected;\n/** @type {?} */\nAtpTimePickerComponent.prototype.config;\n/** @type {?} */\nAtpTimePickerComponent.prototype.resolver;\n/** @type {?} */\nAtpTimePickerComponent.prototype.appRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              public source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  /** @deprecated internal use only */ public _subject: Subject<T>;\n  /** @deprecated internal use only */ public _refCount: number = 0;\n  /** @deprecated internal use only */ public _connection: Subscription;\n  _isComplete = false;\n\n  constructor(/** @deprecated internal use only */ public source: Observable<T>,\n              /** @deprecated internal use only */ public subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  /** @deprecated internal use only */ public getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  /** @deprecated internal use only */ _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(/** @deprecated internal use only */ public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return JSON.parse((xhr as any).responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return  ('response' in xhr) ? xhr.response : (xhr as any).responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}\r\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n  protected work: (this: this, state?: T) => void;\n\n  constructor(protected scheduler: AsyncScheduler,\n              work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n    this.work = work;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: NodeEventHandler) => void;\n  removeListener: (eventName: string, handler: NodeEventHandler) => void;\n};\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler, <boolean>options);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler as NodeEventHandler);\n      unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","export function identity<T>(x: T): T {\n  return x;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  /** @deprecated internal use only */ public source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { Component, OnInit } from '@angular/core';\nimport { IClockNumber, IDisplayPreference, TimePickerConfig } from '../definitions';\nimport { AtpCoreService } from '../atp-core.service';\nimport { ITime } from '../definitions';\nexport class TimePickerComponent implements OnInit {\n\n  _ref: any;\npublic subject: any = null;\npublic activeModal = false;\npublic timerElement: any;\npublic clockObject: Array<any>;\npublic isClicked: boolean;\npublic clockType: 'minute' | 'hour' = 'hour';\npublic time: ITime = {\n    ampm: 'AM',\n    minute: 0,\n    hour: 12\n  };\npublic nowTime: any = this.time.hour;\npublic degree: any;\npublic config: TimePickerConfig;\npublic appRef: any;\npublic isPopup = true;\npublic allowed: any;\npublic preference: IDisplayPreference;\npublic changeToMin: boolean;\nprivate animationTime = 0;\n/**\n * @param {?} core\n */\nconstructor(\nprivate core: AtpCoreService\n  ) { }\n/**\n * @param {?} time\n * @return {?}\n */\npublic ParseStringToTime (time: string): void {\n    time = (time === '' || time === undefined || time === null) ? this.time.hour + ':' + this.time.minute : time;\n    this.time = this.core.StringToTime(time);\n  }\n/**\n * @return {?}\n */\npublic GetTime () {\n    const /** @type {?} */ time = this.core.TimeToString(this.time);\n    this.subject.next(time);\n  }\n\n  clockMaker = () => {\n    const /** @type {?} */ type = this.clockType;\n    this.clockObject = this.core.ClockMaker(type);\n    this.setArrow(null);\n  }\n\n  setActiveTime = () => {\n    this.nowTime = (this.clockType === 'minute' ? this.time.minute : this.time.hour);\n  }\n\n  setArrow = (obj: any) => {\n    if (obj) {\n      this.clockType = obj.type;\n      if (this.clockType === 'minute') {\n        this.time.minute = obj.time;\n      } else {\n        this.time.hour = obj.time;\n      }\n    }\n    const /** @type {?} */ step = (this.clockType === 'minute') ? 6 : 30;\n    const /** @type {?} */ time = (this.clockType === 'minute') ? this.time.minute : this.time.hour;\n    const /** @type {?} */ degrees = time * step;\n    this.rotationClass(degrees);\n    this.setActiveTime();\n  }\n\n  rotationClass = (degrees: any) => {\n    this.degree = degrees;\n  }\n/**\n * @return {?}\n */\nsetTime() {\n    this.isClicked = false;\n    if (this.config.changeToMinutes && !this.config.onlyHour && this.clockType === 'hour') {\n      this.ChangeAnimational('minute');\n    }\n  }\n\n  getDegree = (ele: any) => {\n    const /** @type {?} */ step = this.clockType === 'minute' ? 6 : 30;\n    const /** @type {?} */ parrentPos = ele.currentTarget.getBoundingClientRect();\n    if (this.isClicked && (ele.currentTarget === ele.target || ele.target.nodeName === 'BUTTON')) {\n      const /** @type {?} */ clock = {\n        width: ele.currentTarget.offsetWidth,\n        height: ele.currentTarget.offsetHeight\n      };\n      const /** @type {?} */ degrees = this.core.CalcDegrees(ele, parrentPos, step);\n      let /** @type {?} */ hour = this.time.hour, /** @type {?} */\n          minute = this.time.minute;\n\n      if (this.clockType === 'hour') {\n        hour = (degrees / step);\n        hour = (hour > 12) ? hour - 12 : hour;\n      } else if (this.clockType === 'minute') {\n        minute = (degrees / step);\n        minute = (minute > 59) ? minute - 60 : minute;\n      }\n\n      const /** @type {?} */ min = this.config.rangeTime.start, /** @type {?} */\n            max = this.config.rangeTime.end;\n\n      const /** @type {?} */ nowMinHour = +min.split(':')[0] < 12 ? +min.split(':')[0] : +min.split(':')[0] - 12;\n      const /** @type {?} */ nowMaxHour = +max.split(':')[0] < 12 ? +max.split(':')[0] : +max.split(':')[0] - 12;\n      const /** @type {?} */ nowMinMin = +min.split(':')[1];\n      const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n\n      const /** @type {?} */ nowTime = this.GetNowTime(hour, this.time.ampm, minute);\n      if (this.allowed.indexOf(nowTime) > -1) {\n        this.time.hour = hour;\n        this.time.minute = minute;\n        this.rotationClass(degrees);\n        this.setActiveTime();\n      }else if (this.clockType === 'hour' && (hour === nowMinHour && minute <= nowMinMin)) {\n        this.time.hour = nowMinHour;\n        this.time.minute = nowMinMin;\n      }else if (this.clockType === 'hour' && (hour === nowMaxHour && minute >= nowMaxMin)) {\n        this.time.hour = nowMaxHour;\n        this.time.minute = nowMaxMin;\n      }\n    }\n  }\n/**\n * @param {?} hour\n * @param {?} ampm\n * @param {?} minute\n * @return {?}\n */\nprivate GetNowTime (hour: number, ampm: 'AM' | 'PM', minute: number): string {\n    const /** @type {?} */ Hour = (hour === 12 && ampm === 'AM') ? '0' : hour;\n    const /** @type {?} */ nowTime = Hour + ':' + minute + ' ' + ampm;\n    return nowTime;\n  }\n/**\n * @return {?}\n */\ncheckBet() {\n    const /** @type {?} */ nowTime = this.GetNowTime(this.time.hour, this.time.ampm, this.time.minute);\n    if (this.allowed.indexOf(nowTime) === -1) {\n      this.ParseStringToTime(this.config.rangeTime.start);\n      this.setArrow(null);\n      this.setActiveTime();\n    }\n  }\n/**\n * @return {?}\n */\nmodalAnimation() {\n    setTimeout(() => {\n      this.activeModal = true;\n    }, 1);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.allowed = this.core.allowedTimes (this.config.rangeTime.start, this.config.rangeTime.end);\n    if (this.config && this.config.onlyMinute) {\n      this.clockType = 'minute';\n    }\n    if (this.config) {\n      if (this.config.onlyPM) {\n        this.time.ampm = 'PM';\n      } else if (this.config.onlyAM) {\n        this.time.ampm = 'AM';\n      }\n    }\n    this.clockMaker();\n    this.modalAnimation();\n  }\n/**\n * @return {?}\n */\npublic MinuteClick () {\n    /**\n     * We are not permitting user to select the minute.\n     * but anyway, it will return the standard time, if provided the default time.\n     */\n    if (this.config && this.config.onlyHour) {\n      return false;\n    }\n\n    this.ChangeAnimational('minute');\n  }\n/**\n * @return {?}\n */\npublic HourClick () {\n    /**\n     * We are not permitting user to select the minute.\n     * but anyway, it will return the standard time, if provided the default time.\n     */\n    if (this.config && this.config.onlyMinute) {\n      return false;\n    }\n    this.ChangeAnimational('hour');\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nChangeAnimational(type: 'minute' | 'hour') {\n    if (this.clockType !== type) {\n      if (this.config.animation === 'fade') {\n        this.changeToMin = true;\n        setTimeout(() => {\n          this.changeToMin = false;\n          this.clockType = type;\n          this.clockMaker();\n        }, 200);\n      } else if (this.config.animation === 'rotate') {\n        this.animationTime = 0.4;\n        this.clockType = type;\n        this.clockMaker();\n      } else {\n        this.clockType = type;\n        this.clockMaker();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nSetAM () {\n    if (this.config && this.config.onlyPM) {\n      return false;\n    }\n    this.time.ampm = 'AM';\n    this.checkBet();\n  }\n/**\n * @return {?}\n */\nSetPM () {\n    if (this.config && this.config.onlyAM) {\n      return false;\n    }\n    this.time.ampm = 'PM';\n    this.checkBet();\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nClose(e: any) {\n    if (e.target === e.currentTarget) {\n      if (this.isPopup === true) {\n        this.activeModal = false;\n        setTimeout(() => {\n          this.appRef.detachView(this._ref.hostView);\n          this._ref.destroy();\n        }, 400);\n      }\n    }\n  }\n/**\n * @return {?}\n */\ngetClockArrowStyle() {\n    let /** @type {?} */ arrowStyle = {};\n    if (this.config.animation === 'rotate') {\n        arrowStyle = {\n          transform: 'rotate(' + this.degree + 'deg)',\n          '-webkit-transform': 'rotate(' + this.degree + 'deg)',\n          background: this.config.arrowStyle.background,\n          '-webkit-transition': 'transform ' + this.getAnimationTime(),\n          transition: 'transform ' + + this.getAnimationTime()\n        };\n    }else {\n      arrowStyle = {\n        transform: 'rotate(' + this.degree + 'deg)',\n        '-webkit-transform': 'rotate(' + this.degree + 'deg)',\n        background: this.config.arrowStyle.background,\n      };\n    }\n    return arrowStyle;\n  }\n/**\n * @return {?}\n */\ngetAnimationTime() {\n    return this.animationTime + 's';\n  }\n/**\n * Event on clock mouse click down\n * @param {?} event - captured event\n * @return {?}\n */\nupdateClockDown(event) {\n    this.isClicked = true;\n    this.animationTime = 0;\n    this.getDegree(event);\n  }\n/**\n * @return {?}\n */\nsetNewRotation() {\n    const /** @type {?} */ targetDegree = ((this.time.minute / 60) * 360) + 360;\n    const /** @type {?} */ targetDegree2 = targetDegree * 2;\n\n    const /** @type {?} */ diff1 = Math.abs(this.degree - targetDegree);\n    const /** @type {?} */ diff2 = Math.abs(this.degree - targetDegree2);\n\n    if (diff1 < diff2) {\n      this.rotationClass(targetDegree);\n    } else {\n      this.rotationClass(targetDegree2);\n    }\n  }\n/**\n * @return {?}\n */\npublic GetSeparator () {\n    if (this.preference && this.preference.separator) {\n      return this.preference.separator;\n    }\n    return ':';\n  }\n/**\n * @param {?} period\n * @return {?}\n */\npublic GetPeriod (period: 'AM' | 'PM') {\n    if (this.preference && this.preference.period) {\n      return this.preference.period(period);\n    }\n    return period;\n  }\n/**\n * @return {?}\n */\npublic GetMinute () {\n    if (this.preference && this.preference.minute) {\n      return this.preference.minute(this.time.minute);\n    }\n    let /** @type {?} */ min: string = this.time.minute.toString();\n    if (+min < 10) {\n      min = '0' + min;\n    }\n    return min;\n  }\n/**\n * @return {?}\n */\npublic GetHour () {\n    if (this.preference && this.preference.hour) {\n      return this.preference.hour(this.time.hour);\n    }\n    return this.time.hour;\n  }\n/**\n * @param {?} clock\n * @return {?}\n */\npublic GetClockTime(clock: IClockNumber) {\n    if ( ! this.preference) {\n      return clock.time;\n    }\n    if ( this.clockType === 'hour' && this.preference.clockHour) {\n      return this.preference.clockHour(clock.time);\n    }\n    if ( this.clockType === 'minute' && this.preference.clockMinute) {\n      return this.preference.clockMinute(clock.time);\n    }\n    return clock.time;\n  }\n/**\n * @param {?} key\n * @return {?}\n */\npublic GetLabel (key: string) {\n    const /** @type {?} */ defaults = {\n      'ok': 'Ok',\n      'cancel': 'Cancel'\n    };\n    if ((this.preference && this.preference.labels && this.preference.labels.ok)) {\n      defaults.ok = this.preference.labels.ok;\n    }\n    if ((this.preference && this.preference.labels && this.preference.labels.cancel)) {\n      defaults.cancel = this.preference.labels.cancel;\n    }\n    return defaults[key];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'time-picker',\n  template: `\n    <div id=\"time-picker-wrapper\" class=\"{{config.theme}}\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\" (click)=\"Close($event);\">\n      <div id=\"time-picker\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\">\n        <div class=\"time-picker-header\">\n          <div class=\"time-picker-selected-time\">\n              <div class=\"time-picker-hour\" (click)=\"HourClick()\" [attr.disabled]=\"(config.onlyMinute) ? 'disabled' : null\"\n                [ngClass]=\"{'selected' : clockType == 'hour'}\">{{GetHour()}}</div>\n              <span class=\"time-seprator\">{{GetSeparator()}}</span>\n              <div class=\"time-picker-minute\" (click)=\"MinuteClick();\" [attr.disabled]=\"(config.onlyHour) ? 'disabled' : null\"\n                [ngClass]=\"{'selected' : clockType == 'minute'}\">{{GetMinute()}}</div>\n          </div>\n          <div class=\"time-picker-selected-ampm\">\n            <div class=\"time-picker-am\" (click)=\"SetAM();\" [attr.disabled]=\"(config.onlyPM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'AM'}\">{{GetPeriod('AM')}}</div>\n            <div class=\"time-picker-pm\" (click)=\"SetPM();\" [attr.disabled]=\"(config.onlyAM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'PM'}\">{{GetPeriod('PM')}}</div>\n\n          </div>\n        </div>\n        <div class=\"time-picker-content\">\n            <div class=\"time-picker-clock\" [ngClass]=\"{'hide-time-picker-clock': changeToMin}\"  (mousemove)=\"getDegree($event);\" (mousedown)=\"updateClockDown($event)\" (mouseup)=\"setTime();\">\n              <button *ngFor=\"let clock of clockObject\" [ngClass]=\"{'active' : nowTime == clock.time}\" \n                [id]=\"'timepicker-item-id-' + clock.time\" \n                [ngStyle]=\"{top: clock.top,left: clock.left, color: nowTime == clock.time ? config.arrowStyle.color :  '', background: nowTime == clock.time ? config.arrowStyle.background : 'transparent'}\">\n                {{GetClockTime(clock)}}\n              </button>\n              <div class=\"time-picker-clock-origin\" [ngStyle]=\"{ background: config.arrowStyle.background}\"></div>\n              <div id=\"tpc-arrow\" class=\"time-picker-clock-arrow\" [ngStyle]=\"getClockArrowStyle()\">\n                <span [ngStyle]=\"{ background: config.arrowStyle.background }\"></span>\n              </div>\n            </div>\n        </div>\n        <div class=\"time-picker-footer\">\n            <button (click)=\"Close($event);\">{{GetLabel('cancel')}}</button>\n            <button (click)=\"GetTime();Close($event);\" class=\"atp-ref-dialog-close\">{{GetLabel('ok')}}</button>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    #time-picker-wrapper {\n      position: fixed;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: transparent;\n      -webkit-transition: background 0.4s;\n      transition: background 0.4s;\n      font-family: 'Roboto', sans-serif;\n      z-index: 1000; }\n      #time-picker-wrapper.static {\n        position: relative !important;\n        background: transparent !important;\n        display: inline-block;\n        z-index: 0; }\n      #time-picker-wrapper.active {\n        background: rgba(0, 0, 0, 0.3); }\n      #time-picker-wrapper.dark #time-picker {\n        background: #424242; }\n        #time-picker-wrapper.dark #time-picker .time-picker-header {\n          border-bottom: none;\n          background: #555555; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time {\n            color: #999; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: #999; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.dark #time-picker .time-picker-clock {\n          background: #555555; }\n          #time-picker-wrapper.dark #time-picker .time-picker-clock > button {\n            color: #fff; }\n        #time-picker-wrapper.dark #time-picker .time-picker-footer {\n          border-top: none; }\n          #time-picker-wrapper.dark #time-picker .time-picker-footer button {\n            background: #555555;\n            color: #fff; }\n            #time-picker-wrapper.dark #time-picker .time-picker-footer button:hover {\n              background: #777; }\n      #time-picker-wrapper.light #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.light #time-picker .time-picker-header {\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time {\n            color: #aaa; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #000; }\n          #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: #aaa; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #000; }\n        #time-picker-wrapper.light #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock > button.active {\n              background: blue;\n              color: #fff; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: blue; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: blue; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: blue; }\n        #time-picker-wrapper.light #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.light #time-picker .time-picker-footer button {\n            background: #f1f1f1; }\n            #time-picker-wrapper.light #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-green #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-header {\n          background-color: #00897b;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock > button.active {\n              background: #00897b;\n              color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #00897b; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #00897b; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-blue #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-header {\n          background-color: #3F51B5;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button.active {\n              background: #3F51B5;\n              color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #3F51B5; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #3F51B5; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-red #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-header {\n          background-color: #F44336;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock > button.active {\n              background: #F44336;\n              color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #F44336; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #F44336; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-purple #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-header {\n          background-color: #9C27B0;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button.active {\n              background: #9C27B0;\n              color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #9C27B0; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #9C27B0; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-orange #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-header {\n          background-color: #FF9800;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button.active {\n              background: #FF9800;\n              color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #FF9800; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #FF9800; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper #time-picker {\n        width: 325px;\n        height: auto;\n        -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n        border-radius: 2px;\n        margin: 15vh auto !important;\n        -webkit-transform: scale(0.5) !important;\n                transform: scale(0.5) !important;\n        -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;\n        transition: opacity 0.3s, -webkit-transform 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n        opacity: 0; }\n        #time-picker-wrapper #time-picker.static {\n          margin: 0px !important;\n          -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                  box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12); }\n        #time-picker-wrapper #time-picker.active {\n          -webkit-transform: scale(1) !important;\n                  transform: scale(1) !important;\n          opacity: 1; }\n        #time-picker-wrapper #time-picker .time-picker-header {\n          text-align: center;\n          padding: 15px 0px; }\n          #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time {\n            font-size: 35px;\n            padding: 5px 0px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div {\n              display: inline-block;\n              cursor: pointer; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div[disabled=true] {\n                cursor: default; }\n          #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm {\n            font-size: 18px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div {\n              display: inline-block;\n              padding: 0 5px;\n              cursor: pointer; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div[disabled=true] {\n                cursor: default; }\n        #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock {\n          width: 200px;\n          height: 200px;\n          padding: 24px;\n          border-radius: 50%;\n          cursor: pointer;\n          margin: 25px auto;\n          position: relative;\n          user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          -webkit-user-select: none;\n          opacity: 1;\n          -webkit-transform: scale(1);\n                  transform: scale(1);\n          -webkit-transition: opacity 0.3s, transform 0.3s;\n          -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;\n          transition: opacity 0.3s, -webkit-transform 0.3s;\n          transition: opacity 0.3s, transform 0.3s;\n          transition: opacity 0.3s, transform 0.3s, -webkit-transform 0.3s; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock button {\n            border: none;\n            position: absolute;\n            width: 35px;\n            height: 35px;\n            border-radius: 50%;\n            cursor: pointer;\n            font-size: 17px;\n            text-align: center;\n            padding: 0;\n            -webkit-transition: all .2s;\n            transition: all .2s;\n            z-index: 3; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-origin {\n            width: 6px;\n            height: 6px;\n            border-radius: 50%;\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            margin-left: -3px;\n            margin-top: -3px; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow {\n            width: 2px;\n            height: 41%;\n            position: absolute;\n            left: 0;\n            top: 22px;\n            right: 0;\n            margin: auto;\n            -webkit-transform-origin: top left;\n            transform-origin: bottom; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow span {\n              width: 8px;\n              height: 8px;\n              border-radius: 50%;\n              position: absolute;\n              top: 0;\n              right: -3px; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock.hide-time-picker-clock {\n            opacity: 0;\n            -webkit-transform: scale(0.8);\n                    transform: scale(0.8); }\n        #time-picker-wrapper #time-picker .time-picker-footer {\n          padding: 15px;\n          text-align: right; }\n          #time-picker-wrapper #time-picker .time-picker-footer button {\n            border: transparent;\n            margin-left: 10px;\n            padding: 10px;\n            font-size: 14px;\n            border-radius: 2px;\n            cursor: pointer; }\n\n    * {\n      outline: none;\n      -webkit-box-sizing: content-box;\n              box-sizing: content-box; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AtpCoreService, },\n];\n}\n\nfunction TimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTimePickerComponent.ctorParameters;\n/** @type {?} */\nTimePickerComponent.prototype._ref;\n/** @type {?} */\nTimePickerComponent.prototype.subject;\n/** @type {?} */\nTimePickerComponent.prototype.activeModal;\n/** @type {?} */\nTimePickerComponent.prototype.timerElement;\n/** @type {?} */\nTimePickerComponent.prototype.clockObject;\n/** @type {?} */\nTimePickerComponent.prototype.isClicked;\n/** @type {?} */\nTimePickerComponent.prototype.clockType;\n/** @type {?} */\nTimePickerComponent.prototype.time;\n/** @type {?} */\nTimePickerComponent.prototype.nowTime;\n/** @type {?} */\nTimePickerComponent.prototype.degree;\n/** @type {?} */\nTimePickerComponent.prototype.config;\n/** @type {?} */\nTimePickerComponent.prototype.appRef;\n/** @type {?} */\nTimePickerComponent.prototype.isPopup;\n/** @type {?} */\nTimePickerComponent.prototype.allowed;\n/** @type {?} */\nTimePickerComponent.prototype.preference;\n/** @type {?} */\nTimePickerComponent.prototype.changeToMin;\n/** @type {?} */\nTimePickerComponent.prototype.animationTime;\n/** @type {?} */\nTimePickerComponent.prototype.clockMaker;\n/** @type {?} */\nTimePickerComponent.prototype.setActiveTime;\n/** @type {?} */\nTimePickerComponent.prototype.setArrow;\n/** @type {?} */\nTimePickerComponent.prototype.rotationClass;\n/** @type {?} */\nTimePickerComponent.prototype.getDegree;\n/** @type {?} */\nTimePickerComponent.prototype.core;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { ITime } from './definitions';\nexport class AtpCoreService {\nconstructor() { }\n/**\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\npublic allowedTimes (min, max) {\n    const /** @type {?} */ allTimes = [];\n    const /** @type {?} */ nowMinHour = +min.split(':')[0];\n    const /** @type {?} */ nowMaxHour = +max.split(':')[0];\n    const /** @type {?} */ nowMinMin = +min.split(':')[1];\n    const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n    for (let /** @type {?} */ i = nowMinHour; i <= nowMaxHour; i++) {\n      let /** @type {?} */ j = 0, /** @type {?} */\n          jDest = 59;\n      if (i === nowMinHour) {\n        j = nowMinMin;\n      }else if (i === nowMaxHour) {\n        jDest = nowMaxMin;\n      }\n      for (j; j <= jDest; j++) {\n        const /** @type {?} */ hour = i <= 12 ? i : i - 12;\n        const /** @type {?} */ minute = j;\n        const /** @type {?} */ ampm = i < 12 ? 'AM' : 'PM';\n        allTimes.push(hour + ':' + minute + ' ' + ampm);\n      }\n    }\n    return allTimes;\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic ClockMaker (type: 'minute' | 'hour'): Array<any> {\n    const /** @type {?} */ items = [];\n    const /** @type {?} */ timeVal = (type === 'minute') ? 60 : 12;\n    const /** @type {?} */ timeStep = (type === 'minute') ? 5 : 1;\n    const /** @type {?} */ timeStart = (type === 'minute') ? 0 : 1;\n    const /** @type {?} */ r = 124;\n    const /** @type {?} */ j = r - 25;\n\n    for (let /** @type {?} */ min = timeStart; min <= timeVal; min += timeStep) {\n      if (min !== 60) {\n        const /** @type {?} */ str = String(min);\n        const /** @type {?} */ x = j * Math.sin(Math.PI * 2 * (min / timeVal));\n        const /** @type {?} */ y = j * Math.cos(Math.PI * 2 * (min / timeVal));\n\n        items.push({\n          time: str,\n          left: (x + r - 17) + 'px',\n          top: (-y + r - 17) + 'px',\n          type\n        });\n      }\n    }\n    return items;\n  }\n/**\n * @param {?} time\n * @return {?}\n */\npublic TimeToString(time: ITime): string {\n    const { ampm, minute, hour } = time;\n    let /** @type {?} */ hh = ampm === 'PM' ? +hour + 12 : +hour;\n    if (ampm === 'AM' && hh === 12) {\n      hh = 0;\n    }\n    if ( hh === 24) {\n      hh = 12;\n    }\n    hh = hh < 10 ? '0' + hh : /** @type {?} */(( '' + hh as any));\n    const /** @type {?} */ mm = minute < 10 ? '0' + minute : minute;\n    return `${hh}:${mm}`;\n  }\n/**\n * Converts 00:00 format to ITime object\n * @param {?} time\n * @return {?}\n */\npublic StringToTime (time: string): ITime {\n    const [h, m] = time.split(':');\n    let /** @type {?} */ hour = +h > 12 ? +h - 12 : +h;\n    hour = hour === 0 ? 12 : hour;\n    const /** @type {?} */ ampm = +h >= 12 ? 'PM' : 'AM';\n    return {\n      ampm, minute: +m, hour\n    };\n  }\n/**\n * \\@experimental\n * @param {?} ele\n * @param {?} parrentPos\n * @param {?} step\n * @return {?}\n */\npublic CalcDegrees (ele: any, parrentPos: any, step: number): number {\n    const /** @type {?} */ clock = {\n      width: ele.currentTarget.offsetWidth,\n      height: ele.currentTarget.offsetHeight\n    };\n    const /** @type {?} */ targetX = clock.width / 2;\n    const /** @type {?} */ targetY = clock.height / 2;\n    const /** @type {?} */ Vx = Math.round((ele.clientX - parrentPos.left) - targetX);\n    const /** @type {?} */ Vy = Math.round(targetY - (ele.clientY - parrentPos.top));\n    let /** @type {?} */ radians = -Math.atan2(Vy, Vx);\n    radians += 2.5 * Math.PI;\n\n    let /** @type {?} */ degrees = Math.round(radians * 180 / Math.PI);\n    const /** @type {?} */ degMod = degrees % step;\n    if (degMod === 0) {\n      return degrees;\n    } else if (degMod >= step / 2) {\n      degrees = degrees + (step - degMod);\n    } else if (degMod < step / 2) {\n      degrees = degrees - degMod;\n    }\n    return degrees;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AtpCoreService_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpCoreService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpCoreService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","HostListener","Output","ViewContainerRef","NG_VALUE_ACCESSOR","Directive","EventEmitter","Injector","ApplicationRef","ComponentFactoryResolver","Injectable","ViewChild","Component","iterator_1","observable_1","rxSubscriber_1","__extends","AnimationFrame_1","root_1","root","TestScheduler","VirtualTimeScheduler","zipAll_1","zipAll","zip_1","withLatestFrom_1","withLatestFrom","windowWhen_1","windowWhen","errorObject_1","WindowSubscriber","WindowOperator","windowToggle_1","windowToggle","windowTime_1","windowTime","async_1","windowCount_1","windowCount","window_1","window","toArray_1","toArray","timestamp_1","timestamp","Timestamp","timeoutWith_1","timeoutWith","timeout_1","timeout","TimeoutError","timeInterval_1","timeInterval","TimeInterval","throttleTime_1","throttleTime","dispatchNext","throttle_1","throttle","takeWhile_1","takeWhile","takeUntil_1","takeUntil","takeLast_1","takeLast","take_1","take","switchMapTo_1","switchMapTo","switchMap_1","switchMap","switch_1","_switch","subscribeOn_1","subscribeOn","asap_1","Immediate_1","startWith_1","startWith","skipWhile_1","skipWhile","skipUntil_1","skipUntil","skipLast_1","skipLast","skip_1","skip","single_1","single","shareReplay_1","shareReplay","share_1","share","sequenceEqual_1","sequenceEqual","scan_1","scan","sampleTime_1","sampleTime","sample_1","sample","retryWhen_1","retryWhen","retry_1","retry","repeatWhen_1","repeatWhen","repeat_1","repeat","reduce_1","reduce","race_1","race","race_2","isArray_1","publishLast_1","publishLast","publishReplay_1","publishReplay","publishBehavior_1","publishBehavior","BehaviorSubject","publish_1","publish","pluck_1","pluck","partition_1","partition","pairwise_1","pairwise","onErrorResumeNext_1","onErrorResumeNext","observeOn_1","observeOn","multicast_1","multicast","ConnectableObservable","RefCountSubscriber","RefCountOperator","min_1","min","mergeScan_1","mergeScan","mergeMapTo_1","mergeMapTo","mergeMap_1","mergeMap","mergeAll_1","mergeAll","merge_1","merge","merge_2","max_1","max","materialize_1","materialize","mapTo_1","mapTo","map_1","map","every_1","every","let_1","last_1","last","auditTime_1","auditTime","timer_1","audit_1","audit","isEmpty_1","isEmpty","ignoreElements_1","ignoreElements","groupBy_1","groupBy","GroupedObservable","Map_1","first_1","first","EmptyError","findIndex_1","findIndex","find_1","find","finally_1","_finally","filter_1","filter","elementAt_1","elementAt","ArgumentOutOfRangeError","expand_1","expand","exhaustMap_1","exhaustMap","exhaust_1","exhaust","do_1","_do","distinctUntilKeyChanged_1","distinctUntilKeyChanged","distinctUntilChanged_1","distinctUntilChanged","distinct_1","distinct","Set_1","delayWhen_1","delayWhen","delay_1","delay","defaultIfEmpty_1","defaultIfEmpty","debounceTime_1","debounceTime","debounce_1","debounce","dematerialize_1","dematerialize","count_1","count","concatMapTo_1","concatMapTo","concatMap_1","concatMap","concatAll_1","concatAll","concat_1","concat","concat_2","combineLatest_1","combineLatest","combineAll_1","combineAll","catch_1","_catch","bufferWhen_1","bufferWhen","bufferToggle_1","bufferToggle","bufferTime_1","bufferTime","bufferCount_1","bufferCount","buffer_1","buffer","webSocket_1","assign_1","ReplaySubject","queue_1","ajax_1","AjaxTimeoutError","AjaxError","AjaxResponse","iterator","zip","throw_1","using_1","range_1","pairs_1","dispatch","of_1","never_1","interval_1","Scheduler_1","Scheduler","if_1","generate_1","fromPromise_1","fromEventPattern_1","fromEvent_1","from_1","forkJoin_1","empty_1","defer_1","isArrayLike_1","Notification","dispatchError","bindNodeCallback_1","bindCallback_1","AsyncSubject","AnonymousSubject","Subject","ObjectUnsubscribedError","Observable","observable","pipe","Observer_1","Subscriber","Subscription","UnsubscriptionError","global","core"],"mappings":"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"}
