(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-number-formatter', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng-number-formatter'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgNumberFormatterComponent = (function () {
        function NgNumberFormatterComponent() {
        }
        /**
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var incomingNumber = this.ngNumber;
                this.ngNumber = this.nFormatter(Math.abs(parseInt(incomingNumber)), 1);
            };
        /**
         * @param {?} num
         * @param {?} digits
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.nFormatter = /**
         * @param {?} num
         * @param {?} digits
         * @return {?}
         */
            function (num, digits) {
                /** @type {?} */
                var si = [
                    { value: 1E18, symbol: "E" },
                    { value: 1E15, symbol: "P" },
                    { value: 1E12, symbol: "T" },
                    { value: 1E9, symbol: "B" },
                    { value: 1E6, symbol: "M" },
                    { value: 1E3, symbol: "K" }
                ];
                /** @type {?} */
                var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
                /** @type {?} */
                var i;
                for (i = 0; i < si.length; i++) {
                    if (num >= si[i].value) {
                        return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
                    }
                }
                return num.toFixed(digits).replace(rx, "$1");
            };
        NgNumberFormatterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-number-formatter',
                        inputs: ['ngNumber'],
                        template: '<span>{{ngNumber}}</span>',
                    },] },
        ];
        /** @nocollapse */
        NgNumberFormatterComponent.ctorParameters = function () { return []; };
        return NgNumberFormatterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgNumberFormatterModule = (function () {
        function NgNumberFormatterModule() {
        }
        NgNumberFormatterModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            NgNumberFormatterComponent
                        ],
                        exports: [
                            NgNumberFormatterComponent
                        ]
                    },] },
        ];
        return NgNumberFormatterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgNumberFormatterModule = NgNumberFormatterModule;
    exports.Éµa = NgNumberFormatterComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbnVtYmVyLWZvcm1hdHRlci51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLW51bWJlci1mb3JtYXR0ZXIvc3JjL2FwcC9tb2R1bGVzL25nLW51bWJlci1mb3JtYXR0ZXIvbmctbnVtYmVyLWZvcm1hdHRlci5jb21wb25lbnQudHMiLCJuZzovL25nLW51bWJlci1mb3JtYXR0ZXIvc3JjL2FwcC9tb2R1bGVzL25nLW51bWJlci1mb3JtYXR0ZXIvbmctbnVtYmVyLWZvcm1hdHRlci5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmctbnVtYmVyLWZvcm1hdHRlcicsXG4gIGlucHV0czogWyduZ051bWJlciddLFxuICB0ZW1wbGF0ZTogJzxzcGFuPnt7bmdOdW1iZXJ9fTwvc3Bhbj4nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ051bWJlckZvcm1hdHRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIG5nTnVtYmVyOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB2YXIgaW5jb21pbmdOdW1iZXIgPSB0aGlzLm5nTnVtYmVyO1xuICAgIHRoaXMubmdOdW1iZXIgPSB0aGlzLm5Gb3JtYXR0ZXIoIE1hdGguYWJzKHBhcnNlSW50KGluY29taW5nTnVtYmVyKSksIDEpO1xuICB9XG5cbiAgbkZvcm1hdHRlcihudW0sIGRpZ2l0cykge1xuICAgIHZhciBzaSA9IFtcbiAgICAgIHsgdmFsdWU6IDFFMTgsIHN5bWJvbDogXCJFXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFMTUsIHN5bWJvbDogXCJQXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFMTIsIHN5bWJvbDogXCJUXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFOSwgIHN5bWJvbDogXCJCXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFNiwgIHN5bWJvbDogXCJNXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFMywgIHN5bWJvbDogXCJLXCIgfVxuICAgIF0sIHJ4ID0gL1xcLjArJHwoXFwuWzAtOV0qWzEtOV0pMCskLywgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc2kubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChudW0gPj0gc2lbaV0udmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChudW0gLyBzaVtpXS52YWx1ZSkudG9GaXhlZChkaWdpdHMpLnJlcGxhY2UocngsIFwiJDFcIikgKyBzaVtpXS5zeW1ib2w7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW0udG9GaXhlZChkaWdpdHMpLnJlcGxhY2UocngsIFwiJDFcIik7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ051bWJlckZvcm1hdHRlckNvbXBvbmVudCB9IGZyb20gJy4vbmctbnVtYmVyLWZvcm1hdHRlci5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBOZ051bWJlckZvcm1hdHRlckNvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE5nTnVtYmVyRm9ybWF0dGVyTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7UUFVRTtTQUFpQjs7OztRQUVqQiw2Q0FBUTs7O1lBQVI7O2dCQUNFLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3pFOzs7Ozs7UUFFRCwrQ0FBVTs7Ozs7WUFBVixVQUFXLEdBQUcsRUFBRSxNQUFNOztnQkFDcEIsSUFBSSxFQUFFLEdBQUc7b0JBQ1AsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7b0JBQzVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO29CQUM1QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtvQkFDNUIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUU7b0JBQzVCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRyxNQUFNLEVBQUUsR0FBRyxFQUFFO29CQUM1QixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRTtpQkFDN0IsQ0FBcUM7O2dCQVB0QyxJQU9HLEVBQUUsR0FBRywwQkFBMEIsQ0FBSTs7Z0JBUHRDLElBT29DLENBQUMsQ0FBQztnQkFDdEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUM5QixJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFO3dCQUN0QixPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztxQkFDN0U7aUJBQ0Y7Z0JBQ0QsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDOUM7O29CQTlCRkEsY0FBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxxQkFBcUI7d0JBQy9CLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQzt3QkFDcEIsUUFBUSxFQUFFLDJCQUEyQjtxQkFDdEM7Ozs7eUNBTkQ7Ozs7Ozs7QUNBQTs7OztvQkFJQ0MsYUFBUSxTQUFDO3dCQUNSLE9BQU8sRUFBRTs0QkFDUEMsbUJBQVk7eUJBQ2I7d0JBQ0QsWUFBWSxFQUFFOzRCQUNaLDBCQUEwQjt5QkFDM0I7d0JBQ0QsT0FBTyxFQUFFOzRCQUNQLDBCQUEwQjt5QkFDM0I7cUJBQ0Y7O3NDQWREOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=