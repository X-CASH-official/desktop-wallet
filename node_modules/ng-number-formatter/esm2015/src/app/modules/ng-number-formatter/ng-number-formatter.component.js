/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
export class NgNumberFormatterComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        var incomingNumber = this.ngNumber;
        this.ngNumber = this.nFormatter(Math.abs(parseInt(incomingNumber)), 1);
    }
    /**
     * @param {?} num
     * @param {?} digits
     * @return {?}
     */
    nFormatter(num, digits) {
        /** @type {?} */
        var si = [
            { value: 1E18, symbol: "E" },
            { value: 1E15, symbol: "P" },
            { value: 1E12, symbol: "T" },
            { value: 1E9, symbol: "B" },
            { value: 1E6, symbol: "M" },
            { value: 1E3, symbol: "K" }
        ];
        /** @type {?} */
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        /** @type {?} */
        var i;
        for (i = 0; i < si.length; i++) {
            if (num >= si[i].value) {
                return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
            }
        }
        return num.toFixed(digits).replace(rx, "$1");
    }
}
NgNumberFormatterComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-number-formatter',
                inputs: ['ngNumber'],
                template: '<span>{{ngNumber}}</span>',
            },] },
];
/** @nocollapse */
NgNumberFormatterComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    NgNumberFormatterComponent.prototype.ngNumber;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbnVtYmVyLWZvcm1hdHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1udW1iZXItZm9ybWF0dGVyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL25nLW51bWJlci1mb3JtYXR0ZXIvbmctbnVtYmVyLWZvcm1hdHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFPbEQsTUFBTTtJQUdKLGlCQUFpQjs7OztJQUVqQixRQUFROztRQUNOLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDekU7Ozs7OztJQUVELFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTTs7UUFDcEIsSUFBSSxFQUFFLEdBQUc7WUFDUCxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUM1QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUM1QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUM1QixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUM1QixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUM1QixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRTtTQUM3QixDQUFxQzs7UUFQdEMsSUFPRyxFQUFFLEdBQUcsMEJBQTBCLENBQUk7O1FBUHRDLElBT29DLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDL0IsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7YUFDN0U7U0FDRjtRQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDOUM7OztZQTlCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDO2dCQUNwQixRQUFRLEVBQUUsMkJBQTJCO2FBQ3RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmctbnVtYmVyLWZvcm1hdHRlcicsXG4gIGlucHV0czogWyduZ051bWJlciddLFxuICB0ZW1wbGF0ZTogJzxzcGFuPnt7bmdOdW1iZXJ9fTwvc3Bhbj4nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ051bWJlckZvcm1hdHRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIG5nTnVtYmVyOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB2YXIgaW5jb21pbmdOdW1iZXIgPSB0aGlzLm5nTnVtYmVyO1xuICAgIHRoaXMubmdOdW1iZXIgPSB0aGlzLm5Gb3JtYXR0ZXIoIE1hdGguYWJzKHBhcnNlSW50KGluY29taW5nTnVtYmVyKSksIDEpO1xuICB9XG5cbiAgbkZvcm1hdHRlcihudW0sIGRpZ2l0cykge1xuICAgIHZhciBzaSA9IFtcbiAgICAgIHsgdmFsdWU6IDFFMTgsIHN5bWJvbDogXCJFXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFMTUsIHN5bWJvbDogXCJQXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFMTIsIHN5bWJvbDogXCJUXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFOSwgIHN5bWJvbDogXCJCXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFNiwgIHN5bWJvbDogXCJNXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFMywgIHN5bWJvbDogXCJLXCIgfVxuICAgIF0sIHJ4ID0gL1xcLjArJHwoXFwuWzAtOV0qWzEtOV0pMCskLywgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc2kubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChudW0gPj0gc2lbaV0udmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChudW0gLyBzaVtpXS52YWx1ZSkudG9GaXhlZChkaWdpdHMpLnJlcGxhY2UocngsIFwiJDFcIikgKyBzaVtpXS5zeW1ib2w7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW0udG9GaXhlZChkaWdpdHMpLnJlcGxhY2UocngsIFwiJDFcIik7XG4gIH1cblxufVxuIl19