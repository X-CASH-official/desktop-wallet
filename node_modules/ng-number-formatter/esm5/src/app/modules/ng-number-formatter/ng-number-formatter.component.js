/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
var NgNumberFormatterComponent = /** @class */ (function () {
    function NgNumberFormatterComponent() {
    }
    /**
     * @return {?}
     */
    NgNumberFormatterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var incomingNumber = this.ngNumber;
        this.ngNumber = this.nFormatter(Math.abs(parseInt(incomingNumber)), 1);
    };
    /**
     * @param {?} num
     * @param {?} digits
     * @return {?}
     */
    NgNumberFormatterComponent.prototype.nFormatter = /**
     * @param {?} num
     * @param {?} digits
     * @return {?}
     */
    function (num, digits) {
        /** @type {?} */
        var si = [
            { value: 1E18, symbol: "E" },
            { value: 1E15, symbol: "P" },
            { value: 1E12, symbol: "T" },
            { value: 1E9, symbol: "B" },
            { value: 1E6, symbol: "M" },
            { value: 1E3, symbol: "K" }
        ];
        /** @type {?} */
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        /** @type {?} */
        var i;
        for (i = 0; i < si.length; i++) {
            if (num >= si[i].value) {
                return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
            }
        }
        return num.toFixed(digits).replace(rx, "$1");
    };
    NgNumberFormatterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-number-formatter',
                    inputs: ['ngNumber'],
                    template: '<span>{{ngNumber}}</span>',
                },] },
    ];
    /** @nocollapse */
    NgNumberFormatterComponent.ctorParameters = function () { return []; };
    return NgNumberFormatterComponent;
}());
export { NgNumberFormatterComponent };
if (false) {
    /** @type {?} */
    NgNumberFormatterComponent.prototype.ngNumber;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbnVtYmVyLWZvcm1hdHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1udW1iZXItZm9ybWF0dGVyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL25nLW51bWJlci1mb3JtYXR0ZXIvbmctbnVtYmVyLWZvcm1hdHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7O0lBVWhEO0tBQWlCOzs7O0lBRWpCLDZDQUFROzs7SUFBUjs7UUFDRSxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3pFOzs7Ozs7SUFFRCwrQ0FBVTs7Ozs7SUFBVixVQUFXLEdBQUcsRUFBRSxNQUFNOztRQUNwQixJQUFJLEVBQUUsR0FBRztZQUNQLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQzVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQzVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQzVCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQzVCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQzVCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRyxNQUFNLEVBQUUsR0FBRyxFQUFFO1NBQzdCLENBQXFDOztRQVB0QyxJQU9HLEVBQUUsR0FBRywwQkFBMEIsQ0FBSTs7UUFQdEMsSUFPb0MsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMvQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQzthQUM3RTtTQUNGO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM5Qzs7Z0JBOUJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUM7b0JBQ3BCLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDOzs7O3FDQU5EOztTQU9hLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nLW51bWJlci1mb3JtYXR0ZXInLFxuICBpbnB1dHM6IFsnbmdOdW1iZXInXSxcbiAgdGVtcGxhdGU6ICc8c3Bhbj57e25nTnVtYmVyfX08L3NwYW4+Jyxcbn0pXG5leHBvcnQgY2xhc3MgTmdOdW1iZXJGb3JtYXR0ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBuZ051bWJlcjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdmFyIGluY29taW5nTnVtYmVyID0gdGhpcy5uZ051bWJlcjtcbiAgICB0aGlzLm5nTnVtYmVyID0gdGhpcy5uRm9ybWF0dGVyKCBNYXRoLmFicyhwYXJzZUludChpbmNvbWluZ051bWJlcikpLCAxKTtcbiAgfVxuXG4gIG5Gb3JtYXR0ZXIobnVtLCBkaWdpdHMpIHtcbiAgICB2YXIgc2kgPSBbXG4gICAgICB7IHZhbHVlOiAxRTE4LCBzeW1ib2w6IFwiRVwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTE1LCBzeW1ib2w6IFwiUFwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTEyLCBzeW1ib2w6IFwiVFwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTksICBzeW1ib2w6IFwiQlwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTYsICBzeW1ib2w6IFwiTVwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTMsICBzeW1ib2w6IFwiS1wiIH1cbiAgICBdLCByeCA9IC9cXC4wKyR8KFxcLlswLTldKlsxLTldKTArJC8sIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHNpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobnVtID49IHNpW2ldLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiAobnVtIC8gc2lbaV0udmFsdWUpLnRvRml4ZWQoZGlnaXRzKS5yZXBsYWNlKHJ4LCBcIiQxXCIpICsgc2lbaV0uc3ltYm9sO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtLnRvRml4ZWQoZGlnaXRzKS5yZXBsYWNlKHJ4LCBcIiQxXCIpO1xuICB9XG5cbn1cbiJdfQ==