/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Renderer2 } from '@angular/core';
import { FileUploadTypes } from './../helpers/file-types.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
export class FileUploadService {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.extensions = ['B', 'KB', 'MB', 'GB'];
        this.sizeRegex = new RegExp(`^(\\d+)(?:\\s{0,1})(${this.extensions.join('|')})?$`, 'i');
    }
    /**
     * @return {?}
     */
    isFileDragDropAvailable() {
        /** @type {?} */
        const div = this.renderer.createElement('div');
        return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    parseSize(value) {
        if (IsNullOrEmpty(value)) {
            return 0;
        }
        if (typeof value === 'number') {
            return value;
        }
        const [, size, extension] = value.match(this.sizeRegex) || [null, '0', 'B'];
        /** @type {?} */
        const i = IsNullOrEmpty(extension) ? 0 : this.extensions.indexOf((/** @type {?} */ (extension.toUpperCase())));
        return parseInt(size, 10) * Math.pow(1024, i < 0 ? 0 : i);
    }
    /**
     * @param {?} size
     * @return {?}
     */
    formatSize(size) {
        return this.calculateSize(size);
    }
    /**
     * @private
     * @param {?} size
     * @param {?=} extensionIndex
     * @return {?}
     */
    calculateSize(size, extensionIndex = 0) {
        if (isNaN(size)) {
            size = 0;
        }
        if (size < 1024) {
            return `${Math.round(size * 100) / 100} ${this.extensions[extensionIndex]}`;
        }
        return this.calculateSize(size / 1024, extensionIndex + 1);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    getFileType(file) {
        return Object.keys(FileUploadTypes).find((/**
         * @param {?} key
         * @return {?}
         */
        (key) => FileUploadTypes[key] === file.type));
    }
}
FileUploadService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FileUploadService.ctorParameters = () => [
    { type: Renderer2 }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileUploadService.prototype.extensions;
    /**
     * @type {?}
     * @private
     */
    FileUploadService.prototype.sizeRegex;
    /**
     * @type {?}
     * @private
     */
    FileUploadService.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpcGxhYi9uZ3gtZmlsZS11cGxvYWQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmlsZS11cGxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUszRCxNQUFNLE9BQU8saUJBQWlCOzs7O0lBTTFCLFlBQW9CLFFBQW1CO1FBQW5CLGFBQVEsR0FBUixRQUFRLENBQVc7UUFKdEIsZUFBVSxHQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRW5ELGNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyx1QkFBdUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUdwRyxDQUFDOzs7O0lBRU0sdUJBQXVCOztjQUNwQixHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxHQUFHLElBQUksUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Ozs7SUFFTSxTQUFTLENBQUMsS0FBc0I7UUFDbkMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxDQUFDLENBQUM7U0FDWjtRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO2NBRUssQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDOztjQUNyRSxDQUFDLEdBQUksYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLG1CQUFBLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBUyxDQUFDO1FBRW5HLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7O0lBRU0sVUFBVSxDQUFDLElBQVk7UUFDMUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7Ozs7SUFFTyxhQUFhLENBQUMsSUFBWSxFQUFFLGlCQUF5QixDQUFDO1FBQzFELElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2IsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNaO1FBRUQsSUFBSSxJQUFJLEdBQUcsSUFBSSxFQUFFO1lBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7U0FDL0U7UUFFRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLElBQUksRUFBRSxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7SUFFTSxXQUFXLENBQUMsSUFBVTtRQUN6QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSTs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksRUFBQyxDQUFDO0lBQzFGLENBQUM7OztZQWhESixVQUFVOzs7O1lBTlUsU0FBUzs7Ozs7OztJQVMxQix1Q0FBb0U7Ozs7O0lBRXBFLHNDQUFvRzs7Ozs7SUFFeEYscUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRUeXBlcyB9IGZyb20gJy4vLi4vaGVscGVycy9maWxlLXR5cGVzLmNsYXNzJztcclxuaW1wb3J0IHsgSXNOdWxsT3JFbXB0eSB9IGZyb20gJy4vLi4vaGVscGVycy9oZWxwZXJzLmNsYXNzJztcclxuXHJcbmV4cG9ydCB0eXBlIElTaXplID0gJ0InIHwgJ0tCJyB8ICdNQicgfCAnR0InO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmlsZVVwbG9hZFNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXh0ZW5zaW9uczogQXJyYXk8SVNpemU+ID0gWydCJywgJ0tCJywgJ01CJywgJ0dCJ107XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzaXplUmVnZXggPSBuZXcgUmVnRXhwKGBeKFxcXFxkKykoPzpcXFxcc3swLDF9KSgke3RoaXMuZXh0ZW5zaW9ucy5qb2luKCd8Jyl9KT8kYCwgJ2knKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNGaWxlRHJhZ0Ryb3BBdmFpbGFibGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICByZXR1cm4gKCgnZHJhZ2dhYmxlJyBpbiBkaXYpIHx8ICgnb25kcmFnc3RhcnQnIGluIGRpdiAmJiAnb25kcm9wJyBpbiBkaXYpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGFyc2VTaXplKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGlmIChJc051bGxPckVtcHR5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IFssIHNpemUsIGV4dGVuc2lvbl0gPSB2YWx1ZS5tYXRjaCh0aGlzLnNpemVSZWdleCkgfHwgW251bGwsICcwJywgJ0InXTtcclxuICAgICAgICBjb25zdCBpID0gIElzTnVsbE9yRW1wdHkoZXh0ZW5zaW9uKSA/IDAgOiB0aGlzLmV4dGVuc2lvbnMuaW5kZXhPZihleHRlbnNpb24udG9VcHBlckNhc2UoKSBhcyBJU2l6ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwYXJzZUludChzaXplLCAxMCkgKiBNYXRoLnBvdygxMDI0LCBpIDwgMCA/IDAgOiBpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZm9ybWF0U2l6ZShzaXplOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZVNpemUoc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVTaXplKHNpemU6IG51bWJlciwgZXh0ZW5zaW9uSW5kZXg6IG51bWJlciA9IDApOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChpc05hTihzaXplKSkge1xyXG4gICAgICAgICAgICBzaXplID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzaXplIDwgMTAyNCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7TWF0aC5yb3VuZChzaXplICogMTAwKSAvIDEwMH0gJHt0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uSW5kZXhdfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVTaXplKHNpemUgLyAxMDI0LCBleHRlbnNpb25JbmRleCArIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRGaWxlVHlwZShmaWxlOiBGaWxlKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoRmlsZVVwbG9hZFR5cGVzKS5maW5kKChrZXkpID0+IEZpbGVVcGxvYWRUeXBlc1trZXldID09PSBmaWxlLnR5cGUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==