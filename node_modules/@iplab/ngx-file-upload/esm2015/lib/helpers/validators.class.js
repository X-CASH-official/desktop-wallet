/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { IsNullOrEmpty } from './helpers.class';
import { FileUploadTypes } from './file-types.class';
/**
 * @record
 */
export function ValidationErrors() { }
/**
 * @record
 */
export function ValidatorFn() { }
/**
 * function used to check file size
 * @type {?}
 */
const checkFileSize = (/**
 * @param {?} file
 * @param {?} maxSize
 * @param {?=} minSize
 * @return {?}
 */
(file, maxSize, minSize = 0) => {
    return (!IsNullOrEmpty(maxSize) && file.size > maxSize) || file.size < minSize ?
        { maxSize, minSize, actual: file.size, file } : null;
});
const ɵ0 = checkFileSize;
/** @type {?} */
const getFileType = (/**
 * @param {?} file
 * @param {?} fileExtension
 * @return {?}
 */
(file, fileExtension) => {
    /** @type {?} */
    const type = file.type;
    if (!IsNullOrEmpty(type)) {
        return (/** @type {?} */ (type));
    }
    return FileUploadTypes[fileExtension];
});
const ɵ1 = getFileType;
/** @type {?} */
const FILE_EXT_REG = /(^[.]\w*)$/m;
/**
 * function used to check file type
 *
 * #### allowedTypes
 * file_extension|audio/*|video/*|image/*|media_type
 * @type {?}
 */
const checkFileType = (/**
 * @param {?} file
 * @param {?} allowedTypes
 * @return {?}
 */
(file, allowedTypes) => {
    /** @type {?} */
    const fileExtension = file.name.split('.').pop().toLowerCase();
    /** @type {?} */
    const fileType = getFileType(file, fileExtension);
    for (const type of allowedTypes) {
        /** @type {?} */
        const isValid = FILE_EXT_REG.test(type) ? type === `.${fileExtension}` : new RegExp(type).test(fileType);
        if (isValid) {
            return null;
        }
    }
    return { allowedTypes, actual: file.type, file };
});
const ɵ2 = checkFileType;
/** @type {?} */
const checkValueType = (/**
 * @param {?} value
 * @return {?}
 */
(value) => {
    if (!Array.isArray(value)) {
        throw Error(`FormControl.setValue was provided with wrong argument type, ${value} was provided instead Array<File>`);
    }
});
const ɵ3 = checkValueType;
// @dynamic
export class FileUploadValidators {
    /**
     * Validator that requires controls to have a file maximum size length.
     * Compare the File size in bytes
     * \@dynamic
     * @param {?} maxSize
     * @return {?}
     */
    static fileSize(maxSize) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            /** @type {?} */
            const toLargeFiles = files.map((/**
             * @param {?} file
             * @return {?}
             */
            (file) => checkFileSize(file, maxSize)))
                .filter((/**
             * @param {?} error
             * @return {?}
             */
            (error) => error));
            return toLargeFiles.length > 0 ?
                { 'fileSize': toLargeFiles } : null;
        });
    }
    /**
     * Compare the File size in bytes with max and min size limits
     * \@dynamic
     * @param {?} __0
     * @return {?}
     */
    static sizeRange({ minSize, maxSize }) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            /** @type {?} */
            const sizeMismatch = files.map((/**
             * @param {?} file
             * @return {?}
             */
            (file) => checkFileSize(file, maxSize, minSize)))
                .filter((/**
             * @param {?} error
             * @return {?}
             */
            (error) => error));
            return sizeMismatch.length > 0 ?
                { 'sizeRange': sizeMismatch } : null;
        });
    }
    /**
     * validator that requires control to have limit on files number
     * \@dynamic
     * @param {?} numFiles
     * @return {?}
     */
    static filesLimit(numFiles) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            return files.length > numFiles ?
                { 'filesLimit': { 'max': numFiles, 'actual': files.length } } : null;
        });
    }
    /**
     * validator that requires control to have limit on media types
     *
     * ##### Allowed media types are
     *
     * - file_extension - a file extension starting with the STOP character,
     * e.g: .gif, .jpg, .png, .doc
     * - audio/* -        All sound files are accepted
     * - video/* -        All video files are accepted
     * - image/* -        All image files are accepted
     * - media_type -     A valid media type, with no parameters. Look at [IANA Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml) for a complete list of standard media types
     *
     * #### Example
     * `FileUploadValidators.accept([file_extension, audio/*, video/*, image/*, media_type])`
     * \@dynamic
     * @param {?} allowedFileTypes
     * @return {?}
     */
    static accept(allowedFileTypes) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            /** @type {?} */
            const notAllowedFiles = files.map((/**
             * @param {?} file
             * @return {?}
             */
            (file) => checkFileType(file, allowedFileTypes)))
                .filter((/**
             * @param {?} error
             * @return {?}
             */
            (error) => error));
            return notAllowedFiles.length > 0 ?
                { 'fileTypes': notAllowedFiles } : null;
        });
    }
}
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,