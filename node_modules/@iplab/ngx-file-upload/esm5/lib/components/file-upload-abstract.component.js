/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FileUploadControl } from './../helpers/control.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
/**
 * @abstract
 */
var /**
 * @abstract
 */
FileUploadAbstract = /** @class */ (function () {
    function FileUploadAbstract(hostElementRef, renderer, cdr) {
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.cdr = cdr;
        this.control = null;
        this.hooks = [];
        this.subscriptions = [];
        this.onChange = (/**
         * @return {?}
         */
        function () { });
    }
    /**
     * @return {?}
     */
    FileUploadAbstract.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
        this.setEvents();
        this.checkAndMarkAsDisabled();
        this.connectToForm();
    };
    /**
     * @return {?}
     */
    FileUploadAbstract.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.cdr.detach();
        this.hooks.forEach((/**
         * @param {?} hook
         * @return {?}
         */
        function (hook) { return hook(); }));
        this.hooks.length = 0;
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions.length = 0;
    };
    /**
     * @protected
     * @return {?}
     */
    FileUploadAbstract.prototype.setEvents = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.control.statusChanges.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        function (status) { return _this.checkAndMarkAsDisabled(); })));
        this.subscriptions.push(this.control.eventsChanges.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.triggerEvent(event); })));
        this.subscriptions.push(this.control.acceptChanges.subscribe((/**
         * @param {?} accept
         * @return {?}
         */
        function (accept) { return _this.updateAcceptAttr(accept); })));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FileUploadAbstract.prototype.triggerEvent = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (typeof this.label.nativeElement[event] === 'function') {
            this.label.nativeElement[event]();
        }
    };
    /**
     * @private
     * @param {?} accept
     * @return {?}
     */
    FileUploadAbstract.prototype.updateAcceptAttr = /**
     * @private
     * @param {?} accept
     * @return {?}
     */
    function (accept) {
        if (!IsNullOrEmpty(accept)) {
            this.renderer.setAttribute(this.input.nativeElement, 'accept', accept);
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'accept');
        }
    };
    /**
     * @private
     * @return {?}
     */
    FileUploadAbstract.prototype.checkAndMarkAsDisabled = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', true);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', false);
        }
    };
    /**
     * ControlValueAccessor implementation
     */
    /**
     * ControlValueAccessor implementation
     * @private
     * @return {?}
     */
    FileUploadAbstract.prototype.connectToForm = /**
     * ControlValueAccessor implementation
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.control.valueChanges.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return _this.onChange(v); })));
    };
    return FileUploadAbstract;
}());
/**
 * @abstract
 */
export { FileUploadAbstract };
if (false) {
    /** @type {?} */
    FileUploadAbstract.prototype.control;
    /** @type {?} */
    FileUploadAbstract.prototype.input;
    /** @type {?} */
    FileUploadAbstract.prototype.label;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.hooks;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.hostElementRef;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.renderer;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,