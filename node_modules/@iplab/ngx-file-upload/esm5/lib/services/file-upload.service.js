/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Renderer2 } from '@angular/core';
import { FileUploadTypes } from './../helpers/file-types.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
var FileUploadService = /** @class */ (function () {
    function FileUploadService(renderer) {
        this.renderer = renderer;
        this.extensions = ['B', 'KB', 'MB', 'GB'];
        this.sizeRegex = new RegExp("^(\\d+)(?:\\s{0,1})(" + this.extensions.join('|') + ")?$", 'i');
    }
    /**
     * @return {?}
     */
    FileUploadService.prototype.isFileDragDropAvailable = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var div = this.renderer.createElement('div');
        return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FileUploadService.prototype.parseSize = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (IsNullOrEmpty(value)) {
            return 0;
        }
        if (typeof value === 'number') {
            return value;
        }
        var _a = tslib_1.__read(value.match(this.sizeRegex) || [null, '0', 'B'], 3), size = _a[1], extension = _a[2];
        /** @type {?} */
        var i = IsNullOrEmpty(extension) ? 0 : this.extensions.indexOf((/** @type {?} */ (extension.toUpperCase())));
        return parseInt(size, 10) * Math.pow(1024, i < 0 ? 0 : i);
    };
    /**
     * @param {?} size
     * @return {?}
     */
    FileUploadService.prototype.formatSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        return this.calculateSize(size);
    };
    /**
     * @private
     * @param {?} size
     * @param {?=} extensionIndex
     * @return {?}
     */
    FileUploadService.prototype.calculateSize = /**
     * @private
     * @param {?} size
     * @param {?=} extensionIndex
     * @return {?}
     */
    function (size, extensionIndex) {
        if (extensionIndex === void 0) { extensionIndex = 0; }
        if (isNaN(size)) {
            size = 0;
        }
        if (size < 1024) {
            return Math.round(size * 100) / 100 + " " + this.extensions[extensionIndex];
        }
        return this.calculateSize(size / 1024, extensionIndex + 1);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadService.prototype.getFileType = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return Object.keys(FileUploadTypes).find((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return FileUploadTypes[key] === file.type; }));
    };
    FileUploadService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FileUploadService.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    return FileUploadService;
}());
export { FileUploadService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileUploadService.prototype.extensions;
    /**
     * @type {?}
     * @private
     */
    FileUploadService.prototype.sizeRegex;
    /**
     * @type {?}
     * @private
     */
    FileUploadService.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpcGxhYi9uZ3gtZmlsZS11cGxvYWQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmlsZS11cGxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFJM0Q7SUFPSSwyQkFBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUp0QixlQUFVLEdBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFbkQsY0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLHlCQUF1QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBR3BHLENBQUM7Ozs7SUFFTSxtREFBdUI7OztJQUE5Qjs7WUFDVSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxHQUFHLElBQUksUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Ozs7SUFFTSxxQ0FBUzs7OztJQUFoQixVQUFpQixLQUFzQjtRQUNuQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixPQUFPLENBQUMsQ0FBQztTQUNaO1FBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDM0IsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFSyxJQUFBLHVFQUFxRSxFQUFsRSxZQUFJLEVBQUUsaUJBQTREOztZQUNyRSxDQUFDLEdBQUksYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLG1CQUFBLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBUyxDQUFDO1FBRW5HLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7O0lBRU0sc0NBQVU7Ozs7SUFBakIsVUFBa0IsSUFBWTtRQUMxQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Ozs7OztJQUVPLHlDQUFhOzs7Ozs7SUFBckIsVUFBc0IsSUFBWSxFQUFFLGNBQTBCO1FBQTFCLCtCQUFBLEVBQUEsa0JBQTBCO1FBQzFELElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2IsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNaO1FBRUQsSUFBSSxJQUFJLEdBQUcsSUFBSSxFQUFFO1lBQ2IsT0FBVSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLFNBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUcsQ0FBQztTQUMvRTtRQUVELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7OztJQUVNLHVDQUFXOzs7O0lBQWxCLFVBQW1CLElBQVU7UUFDekIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFsQyxDQUFrQyxFQUFDLENBQUM7SUFDMUYsQ0FBQzs7Z0JBaERKLFVBQVU7Ozs7Z0JBTlUsU0FBUzs7SUF1RDlCLHdCQUFDO0NBQUEsQUFqREQsSUFpREM7U0FoRFksaUJBQWlCOzs7Ozs7SUFFMUIsdUNBQW9FOzs7OztJQUVwRSxzQ0FBb0c7Ozs7O0lBRXhGLHFDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkVHlwZXMgfSBmcm9tICcuLy4uL2hlbHBlcnMvZmlsZS10eXBlcy5jbGFzcyc7XHJcbmltcG9ydCB7IElzTnVsbE9yRW1wdHkgfSBmcm9tICcuLy4uL2hlbHBlcnMvaGVscGVycy5jbGFzcyc7XHJcblxyXG5leHBvcnQgdHlwZSBJU2l6ZSA9ICdCJyB8ICdLQicgfCAnTUInIHwgJ0dCJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZpbGVVcGxvYWRTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4dGVuc2lvbnM6IEFycmF5PElTaXplPiA9IFsnQicsICdLQicsICdNQicsICdHQiddO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2l6ZVJlZ2V4ID0gbmV3IFJlZ0V4cChgXihcXFxcZCspKD86XFxcXHN7MCwxfSkoJHt0aGlzLmV4dGVuc2lvbnMuam9pbignfCcpfSk/JGAsICdpJyk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzRmlsZURyYWdEcm9wQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGRpdiA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcmV0dXJuICgoJ2RyYWdnYWJsZScgaW4gZGl2KSB8fCAoJ29uZHJhZ3N0YXJ0JyBpbiBkaXYgJiYgJ29uZHJvcCcgaW4gZGl2KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBhcnNlU2l6ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoSXNOdWxsT3JFbXB0eSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBbLCBzaXplLCBleHRlbnNpb25dID0gdmFsdWUubWF0Y2godGhpcy5zaXplUmVnZXgpIHx8IFtudWxsLCAnMCcsICdCJ107XHJcbiAgICAgICAgY29uc3QgaSA9ICBJc051bGxPckVtcHR5KGV4dGVuc2lvbikgPyAwIDogdGhpcy5leHRlbnNpb25zLmluZGV4T2YoZXh0ZW5zaW9uLnRvVXBwZXJDYXNlKCkgYXMgSVNpemUpO1xyXG5cclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoc2l6ZSwgMTApICogTWF0aC5wb3coMTAyNCwgaSA8IDAgPyAwIDogaSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZvcm1hdFNpemUoc2l6ZTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVTaXplKHNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlU2l6ZShzaXplOiBudW1iZXIsIGV4dGVuc2lvbkluZGV4OiBudW1iZXIgPSAwKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoaXNOYU4oc2l6ZSkpIHtcclxuICAgICAgICAgICAgc2l6ZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2l6ZSA8IDEwMjQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke01hdGgucm91bmQoc2l6ZSAqIDEwMCkgLyAxMDB9ICR7dGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbkluZGV4XX1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlU2l6ZShzaXplIC8gMTAyNCwgZXh0ZW5zaW9uSW5kZXggKyAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RmlsZVR5cGUoZmlsZTogRmlsZSk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKEZpbGVVcGxvYWRUeXBlcykuZmluZCgoa2V5KSA9PiBGaWxlVXBsb2FkVHlwZXNba2V5XSA9PT0gZmlsZS50eXBlKTtcclxuICAgIH1cclxufVxyXG4iXX0=