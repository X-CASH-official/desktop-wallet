/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * l10n
 *
 * By Ivan Pintar, http://www.pintar-ivan.com
 * Licensed under the MIT License
 * See https://github.com/pIvan/file-upload/blob/master/README.md
 */
import { NgModule, Injector } from '@angular/core';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { FileUploadComponent } from './components/file-upload.component';
import { FileUploadListItemComponent } from './components/file-upload-list-item.component';
import { FileUploadIconComponent } from './components/file-upload-icon.component';
import { FileUploadAttributeComponent } from './components/file-upload-attr.component';
import { SimpleFileUploadComponent } from './components/simple-file-upload.component';
import { FileSizeValidator, FilesLimitValidator, FilesAcceptValidator } from './directives/validators.directive';
import { FilesAcceptDirective } from './directives/attribute.directive';
export { FileUploadComponent } from './components/file-upload.component';
export { FileUploadAttributeComponent } from './components/file-upload-attr.component';
export { SimpleFileUploadComponent } from './components/simple-file-upload.component';
export { FileSizeValidator, FilesLimitValidator, FilesAcceptValidator } from './directives/validators.directive';
export { FilesAcceptDirective } from './directives/attribute.directive';
export { FileUploadControl } from './helpers/control.class';
export { FileUploadValidators } from './helpers/validators.class';
export { FileUploadTypes } from './helpers/file-types.class';
var FileUploadModule = /** @class */ (function () {
    function FileUploadModule(injector) {
        this.injector = injector;
        // const fileUploadElement = createCustomElement(FileUploadComponent, { injector });
        // customElements.define('file-upload', fileUploadElement);
    }
    /**
     * @return {?}
     */
    FileUploadModule.prototype.ngDoBootstrap = /**
     * @return {?}
     */
    function () { };
    FileUploadModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        FormsModule
                    ],
                    declarations: [
                        FileUploadComponent,
                        FileUploadListItemComponent,
                        FileUploadIconComponent,
                        FileUploadAttributeComponent,
                        FileSizeValidator,
                        FilesLimitValidator,
                        FilesAcceptValidator,
                        FilesAcceptDirective,
                        SimpleFileUploadComponent
                    ],
                    exports: [
                        FileUploadComponent,
                        FileUploadAttributeComponent,
                        FileSizeValidator,
                        FilesLimitValidator,
                        FilesAcceptValidator,
                        FilesAcceptDirective,
                        SimpleFileUploadComponent
                    ],
                    entryComponents: [
                        FileUploadComponent
                    ]
                },] }
    ];
    /** @nocollapse */
    FileUploadModule.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return FileUploadModule;
}());
export { FileUploadModule };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileUploadModule.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGlwbGFiL25neC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9maWxlLXVwbG9hZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFPQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRXRGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBaUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFN0Q7SUFxQ0ksMEJBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEMsb0ZBQW9GO1FBQ3BGLDJEQUEyRDtJQUMvRCxDQUFDOzs7O0lBRUQsd0NBQWE7OztJQUFiLGNBQWlCLENBQUM7O2dCQTFDckIsUUFBUSxTQUFDO29CQUNOLE9BQU8sRUFBRTt3QkFDTCxZQUFZO3dCQUNaLG1CQUFtQjt3QkFDbkIsV0FBVztxQkFDZDtvQkFDRCxZQUFZLEVBQUU7d0JBQ1YsbUJBQW1CO3dCQUNuQiwyQkFBMkI7d0JBQzNCLHVCQUF1Qjt3QkFFdkIsNEJBQTRCO3dCQUU1QixpQkFBaUI7d0JBQ2pCLG1CQUFtQjt3QkFDbkIsb0JBQW9CO3dCQUNwQixvQkFBb0I7d0JBRXBCLHlCQUF5QjtxQkFDNUI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLG1CQUFtQjt3QkFDbkIsNEJBQTRCO3dCQUU1QixpQkFBaUI7d0JBQ2pCLG1CQUFtQjt3QkFDbkIsb0JBQW9CO3dCQUNwQixvQkFBb0I7d0JBRXBCLHlCQUF5QjtxQkFDNUI7b0JBQ0QsZUFBZSxFQUFFO3dCQUNiLG1CQUFtQjtxQkFDdEI7aUJBQ0o7Ozs7Z0JBekRrQixRQUFROztJQWtFM0IsdUJBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQVJZLGdCQUFnQjs7Ozs7O0lBRWIsb0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogbDEwblxyXG4gKlxyXG4gKiBCeSBJdmFuIFBpbnRhciwgaHR0cDovL3d3dy5waW50YXItaXZhbi5jb21cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcEl2YW4vZmlsZS11cGxvYWQvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kXHJcbiAqL1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSwgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2ZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRMaXN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9maWxlLXVwbG9hZC1saXN0LWl0ZW0uY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmlsZVVwbG9hZEljb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZmlsZS11cGxvYWQtaWNvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQXR0cmlidXRlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2ZpbGUtdXBsb2FkLWF0dHIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zaW1wbGUtZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IEZpbGVTaXplVmFsaWRhdG9yLCBGaWxlc0xpbWl0VmFsaWRhdG9yLCBGaWxlc0FjY2VwdFZhbGlkYXRvciB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0b3JzLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZpbGVzQWNjZXB0RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2F0dHJpYnV0ZS5kaXJlY3RpdmUnO1xyXG5cclxuZXhwb3J0IHsgRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5leHBvcnQgeyBGaWxlVXBsb2FkQXR0cmlidXRlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2ZpbGUtdXBsb2FkLWF0dHIuY29tcG9uZW50JztcclxuZXhwb3J0IHsgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zaW1wbGUtZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuZXhwb3J0IHsgRmlsZVNpemVWYWxpZGF0b3IsIEZpbGVzTGltaXRWYWxpZGF0b3IsIEZpbGVzQWNjZXB0VmFsaWRhdG9yIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3ZhbGlkYXRvcnMuZGlyZWN0aXZlJztcclxuZXhwb3J0IHsgRmlsZXNBY2NlcHREaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYXR0cmlidXRlLmRpcmVjdGl2ZSc7XHJcblxyXG5leHBvcnQgeyBGaWxlVXBsb2FkQ29udHJvbCB9IGZyb20gJy4vaGVscGVycy9jb250cm9sLmNsYXNzJztcclxuZXhwb3J0IHsgRmlsZVVwbG9hZFZhbGlkYXRvcnMsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvckZuIH0gZnJvbSAnLi9oZWxwZXJzL3ZhbGlkYXRvcnMuY2xhc3MnO1xyXG5leHBvcnQgeyBGaWxlVXBsb2FkVHlwZXMgfSBmcm9tICcuL2hlbHBlcnMvZmlsZS10eXBlcy5jbGFzcyc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIENvbW1vbk1vZHVsZSxcclxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxyXG4gICAgICAgIEZvcm1zTW9kdWxlXHJcbiAgICBdLFxyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgRmlsZVVwbG9hZENvbXBvbmVudCxcclxuICAgICAgICBGaWxlVXBsb2FkTGlzdEl0ZW1Db21wb25lbnQsXHJcbiAgICAgICAgRmlsZVVwbG9hZEljb25Db21wb25lbnQsXHJcblxyXG4gICAgICAgIEZpbGVVcGxvYWRBdHRyaWJ1dGVDb21wb25lbnQsXHJcblxyXG4gICAgICAgIEZpbGVTaXplVmFsaWRhdG9yLFxyXG4gICAgICAgIEZpbGVzTGltaXRWYWxpZGF0b3IsXHJcbiAgICAgICAgRmlsZXNBY2NlcHRWYWxpZGF0b3IsXHJcbiAgICAgICAgRmlsZXNBY2NlcHREaXJlY3RpdmUsXHJcblxyXG4gICAgICAgIFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgRmlsZVVwbG9hZENvbXBvbmVudCxcclxuICAgICAgICBGaWxlVXBsb2FkQXR0cmlidXRlQ29tcG9uZW50LFxyXG5cclxuICAgICAgICBGaWxlU2l6ZVZhbGlkYXRvcixcclxuICAgICAgICBGaWxlc0xpbWl0VmFsaWRhdG9yLFxyXG4gICAgICAgIEZpbGVzQWNjZXB0VmFsaWRhdG9yLFxyXG4gICAgICAgIEZpbGVzQWNjZXB0RGlyZWN0aXZlLFxyXG5cclxuICAgICAgICBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50XHJcbiAgICBdLFxyXG4gICAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICAgICAgRmlsZVVwbG9hZENvbXBvbmVudFxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsZVVwbG9hZE1vZHVsZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICAvLyBjb25zdCBmaWxlVXBsb2FkRWxlbWVudCA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQoRmlsZVVwbG9hZENvbXBvbmVudCwgeyBpbmplY3RvciB9KTtcclxuICAgICAgICAvLyBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ2ZpbGUtdXBsb2FkJywgZmlsZVVwbG9hZEVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nRG9Cb290c3RyYXAoKSB7fVxyXG59XHJcbiJdfQ==