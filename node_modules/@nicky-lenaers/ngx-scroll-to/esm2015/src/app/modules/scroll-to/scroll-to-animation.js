/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ReplaySubject } from 'rxjs/index';
import { EASING } from './scroll-to-helpers';
/**
 * Scroll To Animation
 */
export class ScrollToAnimation {
    /**
     * Class Constructor.
     *
     * @param {?} _container            The Container
     * @param {?} _listenerTarget       The Element that listens for DOM Events
     * @param {?} _isWindow             Whether or not the listener is the Window
     * @param {?} _to                   Position to scroll to
     * @param {?} _options              Additional options for scrolling
     * @param {?} _isBrowser            Whether or not execution runs in the browser
     *                              (as opposed to the server)
     */
    constructor(_container, _listenerTarget, _isWindow, _to, _options, _isBrowser) {
        this._container = _container;
        this._listenerTarget = _listenerTarget;
        this._isWindow = _isWindow;
        this._to = _to;
        this._options = _options;
        this._isBrowser = _isBrowser;
        /**
         * Recursively loop over the Scroll Animation
         */
        this._loop = () => {
            this._timeLapsed += this._tick;
            this._percentage = (this._timeLapsed / this._options.duration);
            this._percentage = (this._percentage > 1) ? 1 : this._percentage;
            // Position Update
            this._position = this._startPosition +
                ((this._startPosition - this._to <= 0 ? 1 : -1) *
                    this._distance *
                    EASING[this._options.easing](this._percentage));
            if (this._lastPosition !== null && this._position === this._lastPosition) {
                this.stop();
            }
            else {
                this._source$.next(this._position);
                this._isWindow
                    ? this._listenerTarget.scrollTo(0, Math.floor(this._position))
                    : this._container.scrollTop = Math.floor(this._position);
                this._lastPosition = this._position;
            }
        };
        this._tick = 16;
        this._interval = null;
        this._lastPosition = null;
        this._timeLapsed = 0;
        this._windowScrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        if (!this._container) {
            this._startPosition = this._windowScrollTop;
        }
        else {
            this._startPosition = this._isWindow ? this._windowScrollTop : this._container.scrollTop;
        }
        // Correction for Starting Position of nested HTML Elements
        if (this._container && !this._isWindow) {
            this._to = this._to - this._container.getBoundingClientRect().top + this._startPosition;
        }
        // Set Distance
        const /** @type {?} */ directionalDistance = this._startPosition - this._to;
        this._distance = this._container ? Math.abs(this._startPosition - this._to) : this._to;
        this._mappedOffset = this._options.offset;
        // Set offset from Offset Map
        if (this._isBrowser) {
            this._options
                .offsetMap
                .forEach((value, key) => this._mappedOffset = window.innerWidth > key ? value : this._mappedOffset);
        }
        this._distance += this._mappedOffset * (directionalDistance <= 0 ? 1 : -1);
        this._source$ = new ReplaySubject();
    }
    /**
     * Start the new Scroll Animation.
     *
     * @return {?} Observable containing a number
     */
    start() {
        clearInterval(this._interval);
        this._interval = setInterval(this._loop, this._tick);
        return this._source$.asObservable();
    }
    /**
     * Stop the current Scroll Animation Loop.
     *
     * @return {?} Void
     */
    stop() {
        clearInterval(this._interval);
        this._interval = null;
        this._source$.complete();
    }
}
function ScrollToAnimation_tsickle_Closure_declarations() {
    /**
     * Number of milliseconds for each Tick
     * @type {?}
     */
    ScrollToAnimation.prototype._tick;
    /**
     * Interval
     * @type {?}
     */
    ScrollToAnimation.prototype._interval;
    /**
     * Time Lapsed in milliseconds
     * @type {?}
     */
    ScrollToAnimation.prototype._timeLapsed;
    /**
     * Percentage of time lapsed
     * @type {?}
     */
    ScrollToAnimation.prototype._percentage;
    /**
     * Position of the Element
     * @type {?}
     */
    ScrollToAnimation.prototype._position;
    /**
     * Last Element Position
     * @type {?}
     */
    ScrollToAnimation.prototype._lastPosition;
    /**
     * Start Position of the Element
     * @type {?}
     */
    ScrollToAnimation.prototype._startPosition;
    /**
     * The Distance to scroll
     * @type {?}
     */
    ScrollToAnimation.prototype._distance;
    /**
     * Observable Source
     * @type {?}
     */
    ScrollToAnimation.prototype._source$;
    /**
     * Scroll Top of the Window
     * @type {?}
     */
    ScrollToAnimation.prototype._windowScrollTop;
    /**
     * Mapped Offset taken from the active Offset Map
     * @type {?}
     */
    ScrollToAnimation.prototype._mappedOffset;
    /**
     * Recursively loop over the Scroll Animation
     * @type {?}
     */
    ScrollToAnimation.prototype._loop;
    /** @type {?} */
    ScrollToAnimation.prototype._container;
    /** @type {?} */
    ScrollToAnimation.prototype._listenerTarget;
    /** @type {?} */
    ScrollToAnimation.prototype._isWindow;
    /** @type {?} */
    ScrollToAnimation.prototype._to;
    /** @type {?} */
    ScrollToAnimation.prototype._options;
    /** @type {?} */
    ScrollToAnimation.prototype._isBrowser;
}

//# sourceMappingURL=data:application/json;base64,