{
  "version": 3,
  "file": "angular-pell.umd.min.js",
  "sources": [
    "ng://angular-pell/out/app/modules/pell/pell.ts",
    "ng://angular-pell/out/app/modules/pell/pell.component.ts",
    "ng://angular-pell/out/app/modules/pell/pell.module.ts"
  ],
  "sourcesContent": [
    "export const actions = {\n  bold: {\n    icon: '<b>B</b>',\n    title: 'Bold',\n    result: () => exec('bold')\n  },\n  italic: {\n    icon: '<i>I</i>',\n    title: 'Italic',\n    result: () => exec('italic')\n  },\n  underline: {\n    icon: '<u>U</u>',\n    title: 'Underline',\n    result: () => exec('underline')\n  },\n  strikethrough: {\n    icon: '<strike>S</strike>',\n    title: 'Strike-through',\n    result: () => exec('strikeThrough')\n  },\n  heading1: {\n    icon: '<b>H<sub>1</sub></b>',\n    title: 'Heading 1',\n    result: () => exec('formatBlock', '<H1>')\n  },\n  heading2: {\n    icon: '<b>H<sub>2</sub></b>',\n    title: 'Heading 2',\n    result: () => exec('formatBlock', '<H2>')\n  },\n  paragraph: {\n    icon: '&#182;',\n    title: 'Paragraph',\n    result: () => exec('formatBlock', '<P>')\n  },\n  quote: {\n    icon: '&#8220; &#8221;',\n    title: 'Quote',\n    result: () => exec('formatBlock', '<BLOCKQUOTE>')\n  },\n  olist: {\n    icon: '&#35;',\n    title: 'Ordered List',\n    result: () => exec('insertOrderedList')\n  },\n  ulist: {\n    icon: '&#8226;',\n    title: 'Unordered List',\n    result: () => exec('insertUnorderedList')\n  },\n  code: {\n    icon: '&lt;/&gt;',\n    title: 'Code',\n    result: () => exec('formatBlock', '<PRE>')\n  },\n  line: {\n    icon: '&#8213;',\n    title: 'Horizontal Line',\n    result: () => exec('insertHorizontalRule')\n  },\n  link: {\n    icon: '&#128279;',\n    title: 'Link',\n    result: () => {\n      const url = window.prompt('Enter the link URL')\n      if (url) exec('createLink', url)\n    }\n  },\n  image: {\n    icon: '&#128247;',\n    title: 'Image',\n    result: () => {\n      const url = window.prompt('Enter the image URL')\n      if (url) exec('insertImage', url)\n    }\n  }\n}\n\nconst classes = {\n  actionbar: 'pell-actionbar',\n  button: 'pell-button',\n  content: 'pell-content'\n}\n\nexport const exec = (command, value = null) => {\n  document.execCommand(command, false, value)\n}\n\nconst preventTab = event => {\n  if (event.which === 9) event.preventDefault()\n}\n\nexport const init = settings => {\n  settings.actions = settings.actions\n    ? settings.actions.map(action => {\n      if (typeof action === 'string') return actions[action]\n      else if (actions[action.name]) return { ...actions[action.name], ...action }\n      return action\n    })\n    : Object.keys(actions).map(action => actions[action])\n\n  settings.classes = { ...classes, ...settings.classes }\n\n  const actionbar = document.createElement('div')\n  actionbar.className = settings.classes.actionbar\n  settings.element.appendChild(actionbar)\n\n  settings.element.content = document.createElement('div')\n  settings.element.content.contentEditable = true\n  settings.element.content.className = settings.classes.content\n  settings.element.content.oninput = event => settings.onChange(event.target.innerHTML)\n  settings.element.content.onkeydown = preventTab\n  settings.element.appendChild(settings.element.content)\n\n  settings.actions.forEach(action => {\n    const button = document.createElement('button')\n    button.className = settings.classes.button\n    button.innerHTML = action.icon\n    button.title = action.title\n    button.onclick = action.result\n    actionbar.appendChild(button)\n  })\n\n  if (settings.styleWithCSS) exec('styleWithCSS')\n\n  return settings.element\n}\n\nexport default { exec, init }",
    "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport * as pell from './pell';\n\n\n@Component({\n  selector: 'pell-editor',\n  template: `<div #pell>\n  <div [class]=\"actionBarClass\">\n    <button *ngFor=\"let action of actions\" [class]=\"actionButtonClass\" [title]=\"action.title\" \n    (click)=\"action.result()\" [innerHTML]=\"action.icon\">\n    </button>\n  </div>\n  <div contenteditable=\"true\" [class]=\"contentClass\" (input)=\"onInput($event)\"></div>\n</div>\n`,\n  styles: [`.pell{border-radius:5px;-webkit-box-shadow:0 2px 3px hsla(0,0%,4%,.1),0 0 0 1px hsla(0,0%,4%,.1);box-shadow:0 2px 3px hsla(0,0%,4%,.1),0 0 0 1px hsla(0,0%,4%,.1)}.pell,.pell-content{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%}.pell-content{height:300px;outline:0;overflow-y:auto;padding:10px}.pell-actionbar{background-color:#fff;border-bottom:1px solid hsla(0,0%,4%,.1);border-top-left-radius:5px;border-top-right-radius:5px;width:100%}.pell-button{background-color:transparent;border:none;cursor:pointer;height:30px;outline:0;width:30px}`],\n})\nexport class PellComponent implements OnInit {\n  actions = Object.keys(pell.actions).map(action => pell.actions[action]);\n  actionBarClass = 'pell-actionbar';\n  actionButtonClass = 'pell-button';\n  contentClass = 'pell-content';\n\n  @Output()\n  onChange = new EventEmitter<string>()\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onInput(event: any) {\n    this.onChange.emit(event.target.innerHTML);\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PellComponent } from './pell.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [PellComponent],\n  exports: [PellComponent]\n})\nexport class PellModule { }\n"
  ],
  "names": [
    "actions",
    "bold",
    "icon",
    "title",
    "result",
    "exec",
    "italic",
    "underline",
    "strikethrough",
    "heading1",
    "heading2",
    "paragraph",
    "quote",
    "olist",
    "ulist",
    "code",
    "line",
    "link",
    "url",
    "window",
    "prompt",
    "image",
    "command",
    "value",
    "document",
    "execCommand",
    "PellComponent",
    "this",
    "Object",
    "keys",
    "pell.actions",
    "map",
    "action",
    "actionBarClass",
    "actionButtonClass",
    "contentClass",
    "onChange",
    "EventEmitter",
    "prototype",
    "ngOnInit",
    "onInput",
    "event",
    "emit",
    "target",
    "innerHTML",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "Output",
    "PellModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "kTAAA,IAAaA,GACXC,MACEC,KAAM,WACNC,MAAO,OACPC,OAAQ,WAAM,OAAAC,EAAK,UAErBC,QACEJ,KAAM,WACNC,MAAO,SACPC,OAAQ,WAAM,OAAAC,EAAK,YAErBE,WACEL,KAAM,WACNC,MAAO,YACPC,OAAQ,WAAM,OAAAC,EAAK,eAErBG,eACEN,KAAM,qBACNC,MAAO,iBACPC,OAAQ,WAAM,OAAAC,EAAK,mBAErBI,UACEP,KAAM,uBACNC,MAAO,YACPC,OAAQ,WAAM,OAAAC,EAAK,cAAe,UAEpCK,UACER,KAAM,uBACNC,MAAO,YACPC,OAAQ,WAAM,OAAAC,EAAK,cAAe,UAEpCM,WACET,KAAM,SACNC,MAAO,YACPC,OAAQ,WAAM,OAAAC,EAAK,cAAe,SAEpCO,OACEV,KAAM,kBACNC,MAAO,QACPC,OAAQ,WAAM,OAAAC,EAAK,cAAe,kBAEpCQ,OACEX,KAAM,QACNC,MAAO,eACPC,OAAQ,WAAM,OAAAC,EAAK,uBAErBS,OACEZ,KAAM,UACNC,MAAO,iBACPC,OAAQ,WAAM,OAAAC,EAAK,yBAErBU,MACEb,KAAM,YACNC,MAAO,OACPC,OAAQ,WAAM,OAAAC,EAAK,cAAe,WAEpCW,MACEd,KAAM,UACNC,MAAO,kBACPC,OAAQ,WAAM,OAAAC,EAAK,0BAErBY,MACEf,KAAM,YACNC,MAAO,OACPC,OAAQ,WACN,IAAMc,EAAMC,OAAOC,OAAO,sBACtBF,GAAKb,EAAK,aAAca,KAGhCG,OACEnB,KAAM,YACNC,MAAO,QACPC,OAAQ,WACN,IAAMc,EAAMC,OAAOC,OAAO,uBACtBF,GAAKb,EAAK,cAAea,MAWtBb,EAAO,SAACiB,EAASC,QAA9B,IAAAA,IAA8BA,EAA9B,MACEC,SAASC,YAAYH,GAAS,EAAOC,ICtFvCG,EAAA,WAyBE,SAAFA,IAPAC,KAAA3B,QAAY4B,OAAOC,KAAKC,GAAcC,IAAI,SAAAC,GAAUF,OAAAA,EAAaE,KACjEL,KAAAM,eAAmB,iBACnBN,KAAAO,kBAAsB,cACtBP,KAAAQ,aAAiB,eAGjBR,KAAAS,SAAa,IAAIC,EAAAA,oBAGfX,EAAFY,UAAAC,SAAE,aAGAb,EAAFY,UAAAE,QAAE,SAAQC,GACNd,KAAKS,SAASM,KAAKD,EAAME,OAAOC,cA/BpC,kBAIAC,KAACC,EAAAA,UAADC,OACEC,SAAU,cACVC,SAAU,mUASVC,QAAS,8mBAQXd,WAAAS,KAAGM,EAAAA,UCvBH,IAAAC,EAAA,4BAIAP,KAACQ,EAAAA,SAADN,OACEO,SACEC,EAAAA,cAEFC,cAAe9B,GACf+B,SAAU/B"
}
